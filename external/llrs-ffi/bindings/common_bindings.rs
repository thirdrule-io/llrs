/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize);
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            byte | mask
        } else {
            byte & !mask
        }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte =
            (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize);
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if Self::raw_get_bit(this, i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            Self::raw_set_bit(this, index + bit_offset, val_bit_is_set);
        }
    }
}
#[doc = r" If Bindgen could only determine the size and alignment of a"]
#[doc = r" type, it is represented like this."]
#[derive(PartialEq, Copy, Clone, Debug, Hash)]
#[repr(C)]
pub struct __BindgenOpaqueArray<T: Copy, const N: usize>(pub [T; N]);
impl<T: Copy + Default, const N: usize> Default for __BindgenOpaqueArray<T, N> {
    fn default() -> Self {
        Self([<T as Default>::default(); N])
    }
}
#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        *self
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
pub const _GLIBCXX_MEMORY: u32 = 1;
pub const _STL_ALGOBASE_H: u32 = 1;
pub const _GLIBCXX_CXX_CONFIG_H: u32 = 1;
pub const _GLIBCXX_RELEASE: u32 = 11;
pub const __GLIBCXX__: u32 = 20230528;
pub const _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY: u32 = 1;
pub const _GLIBCXX_USE_DEPRECATED: u32 = 1;
pub const _GLIBCXX_EXTERN_TEMPLATE: u32 = 1;
pub const _GLIBCXX_USE_DUAL_ABI: u32 = 1;
pub const _GLIBCXX_USE_CXX11_ABI: u32 = 1;
pub const _GLIBCXX_INLINE_VERSION: u32 = 0;
pub const _GLIBCXX_USE_ALLOCATOR_NEW: u32 = 1;
pub const _GLIBCXX_OS_DEFINES: u32 = 1;
pub const __NO_CTYPE: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _ISOC2X_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const _DYNAMIC_STACK_SIZE_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_ISOCXX11: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_DYNAMIC_STACK_SIZE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 0;
pub const _GLIBCXX_GTHREAD_USE_WEAK: u32 = 0;
pub const _GLIBCXX_CPU_DEFINES: u32 = 1;
pub const _GLIBCXX_USE_STD_SPEC_FUNCS: u32 = 1;
pub const _GLIBCXX_FAST_MATH: u32 = 0;
pub const _GLIBCXX_USE_FLOAT128: u32 = 1;
pub const _GLIBCXX_FLOAT_IS_IEEE_BINARY32: u32 = 1;
pub const _GLIBCXX_DOUBLE_IS_IEEE_BINARY64: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_IS_SAME: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_LAUNDER: u32 = 1;
pub const _PSTL_VERSION: u32 = 12000;
pub const _PSTL_VERSION_MAJOR: u32 = 12;
pub const _PSTL_VERSION_MINOR: u32 = 0;
pub const _PSTL_VERSION_PATCH: u32 = 0;
pub const _PSTL_USAGE_WARNINGS: u32 = 0;
pub const _PSTL_UDR_PRESENT: u32 = 0;
pub const _PSTL_PRAGMA_LOCATION: &[u8; 26] = b" [Parallel STL message]: \0";
pub const _GLIBCXX_HAVE_ACOSF: u32 = 1;
pub const _GLIBCXX_HAVE_ACOSL: u32 = 1;
pub const _GLIBCXX_HAVE_ALIGNED_ALLOC: u32 = 1;
pub const _GLIBCXX_HAVE_ARPA_INET_H: u32 = 1;
pub const _GLIBCXX_HAVE_ASINF: u32 = 1;
pub const _GLIBCXX_HAVE_ASINL: u32 = 1;
pub const _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2F: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2L: u32 = 1;
pub const _GLIBCXX_HAVE_ATANF: u32 = 1;
pub const _GLIBCXX_HAVE_ATANL: u32 = 1;
pub const _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY: u32 = 1;
pub const _GLIBCXX_HAVE_AT_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_CEILF: u32 = 1;
pub const _GLIBCXX_HAVE_CEILL: u32 = 1;
pub const _GLIBCXX_HAVE_COMPLEX_H: u32 = 1;
pub const _GLIBCXX_HAVE_COSF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHL: u32 = 1;
pub const _GLIBCXX_HAVE_COSL: u32 = 1;
pub const _GLIBCXX_HAVE_DIRENT_H: u32 = 1;
pub const _GLIBCXX_HAVE_DLFCN_H: u32 = 1;
pub const _GLIBCXX_HAVE_ENDIAN_H: u32 = 1;
pub const _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46: u32 = 1;
pub const _GLIBCXX_HAVE_EXECINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_EXPF: u32 = 1;
pub const _GLIBCXX_HAVE_EXPL: u32 = 1;
pub const _GLIBCXX_HAVE_FABSF: u32 = 1;
pub const _GLIBCXX_HAVE_FABSL: u32 = 1;
pub const _GLIBCXX_HAVE_FCNTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_FENV_H: u32 = 1;
pub const _GLIBCXX_HAVE_FINITE: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEF: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEL: u32 = 1;
pub const _GLIBCXX_HAVE_FLOAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORF: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORL: u32 = 1;
pub const _GLIBCXX_HAVE_FMODF: u32 = 1;
pub const _GLIBCXX_HAVE_FMODL: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPF: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPL: u32 = 1;
pub const _GLIBCXX_HAVE_GETIPINFO: u32 = 1;
pub const _GLIBCXX_HAVE_GETS: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOT: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTF: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTL: u32 = 1;
pub const _GLIBCXX_HAVE_ICONV: u32 = 1;
pub const _GLIBCXX_HAVE_INT64_T: u32 = 1;
pub const _GLIBCXX_HAVE_INT64_T_LONG: u32 = 1;
pub const _GLIBCXX_HAVE_INTTYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFF: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFL: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANF: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANL: u32 = 1;
pub const _GLIBCXX_HAVE_ISWBLANK: u32 = 1;
pub const _GLIBCXX_HAVE_LC_MESSAGES: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPF: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPL: u32 = 1;
pub const _GLIBCXX_HAVE_LIBINTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_AS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_DATA: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_FSIZE: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_RSS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_VMEM: u32 = 0;
pub const _GLIBCXX_HAVE_LINK: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_FUTEX: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_RANDOM_H: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_TYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_LOCALE_H: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10F: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10L: u32 = 1;
pub const _GLIBCXX_HAVE_LOGF: u32 = 1;
pub const _GLIBCXX_HAVE_LOGL: u32 = 1;
pub const _GLIBCXX_HAVE_MBSTATE_T: u32 = 1;
pub const _GLIBCXX_HAVE_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_MEMORY_H: u32 = 1;
pub const _GLIBCXX_HAVE_MODF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFL: u32 = 1;
pub const _GLIBCXX_HAVE_NETDB_H: u32 = 1;
pub const _GLIBCXX_HAVE_NETINET_IN_H: u32 = 1;
pub const _GLIBCXX_HAVE_NETINET_TCP_H: u32 = 1;
pub const _GLIBCXX_HAVE_POLL: u32 = 1;
pub const _GLIBCXX_HAVE_POLL_H: u32 = 1;
pub const _GLIBCXX_HAVE_POSIX_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_POSIX_SEMAPHORE: u32 = 1;
pub const _GLIBCXX_HAVE_POWF: u32 = 1;
pub const _GLIBCXX_HAVE_POWL: u32 = 1;
pub const _GLIBCXX_HAVE_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_READLINK: u32 = 1;
pub const _GLIBCXX_HAVE_SECURE_GETENV: u32 = 1;
pub const _GLIBCXX_HAVE_SETENV: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOS: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSF: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSL: u32 = 1;
pub const _GLIBCXX_HAVE_SINF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHL: u32 = 1;
pub const _GLIBCXX_HAVE_SINL: u32 = 1;
pub const _GLIBCXX_HAVE_SOCKATMARK: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTF: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTL: u32 = 1;
pub const _GLIBCXX_HAVE_STDALIGN_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDBOOL_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDINT_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDLIB_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_L: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_R: u32 = 1;
pub const _GLIBCXX_HAVE_STRINGS_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRING_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOF: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOLD: u32 = 1;
pub const _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE: u32 = 1;
pub const _GLIBCXX_HAVE_STRXFRM_L: u32 = 1;
pub const _GLIBCXX_HAVE_SYMLINK: u32 = 1;
pub const _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IOCTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IPC_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_PARAM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_RESOURCE_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SDT_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SEM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SOCKET_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STATVFS_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SYSINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_UIO_H: u32 = 1;
pub const _GLIBCXX_HAVE_S_ISREG: u32 = 1;
pub const _GLIBCXX_HAVE_TANF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHL: u32 = 1;
pub const _GLIBCXX_HAVE_TANL: u32 = 1;
pub const _GLIBCXX_HAVE_TGMATH_H: u32 = 1;
pub const _GLIBCXX_HAVE_TIMESPEC_GET: u32 = 1;
pub const _GLIBCXX_HAVE_TLS: u32 = 1;
pub const _GLIBCXX_HAVE_TRUNCATE: u32 = 1;
pub const _GLIBCXX_HAVE_UCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_UNISTD_H: u32 = 1;
pub const _GLIBCXX_HAVE_USELOCALE: u32 = 1;
pub const _GLIBCXX_HAVE_UTIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_VFWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VSWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_WCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_WCSTOF: u32 = 1;
pub const _GLIBCXX_HAVE_WCTYPE_H: u32 = 1;
pub const _GLIBCXX_HAVE_WRITEV: u32 = 1;
pub const _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
pub const _GLIBCXX_LT_OBJDIR: &[u8; 7] = b".libs/\0";
pub const _GLIBCXX_PACKAGE_BUGREPORT: &[u8; 1] = b"\0";
pub const _GLIBCXX_PACKAGE_NAME: &[u8; 15] = b"package-unused\0";
pub const _GLIBCXX_PACKAGE_STRING: &[u8; 30] = b"package-unused version-unused\0";
pub const _GLIBCXX_PACKAGE_TARNAME: &[u8; 10] = b"libstdc++\0";
pub const _GLIBCXX_PACKAGE_URL: &[u8; 1] = b"\0";
pub const _GLIBCXX_PACKAGE__GLIBCXX_VERSION: &[u8; 15] = b"version-unused\0";
pub const _GLIBCXX_STDC_HEADERS: u32 = 1;
pub const _GLIBCXX_DARWIN_USE_64_BIT_INODE: u32 = 1;
pub const _GLIBCXX11_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX11_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX11_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX98_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX98_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX98_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX_ATOMIC_BUILTINS: u32 = 1;
pub const _GLIBCXX_FULLY_DYNAMIC_STRING: u32 = 0;
pub const _GLIBCXX_HAS_GTHREADS: u32 = 1;
pub const _GLIBCXX_HOSTED: u32 = 1;
pub const _GLIBCXX_RES_LIMITS: u32 = 1;
pub const _GLIBCXX_STDIO_EOF: i32 = -1;
pub const _GLIBCXX_STDIO_SEEK_CUR: u32 = 1;
pub const _GLIBCXX_STDIO_SEEK_END: u32 = 2;
pub const _GLIBCXX_SYMVER: u32 = 1;
pub const _GLIBCXX_SYMVER_GNU: u32 = 1;
pub const _GLIBCXX_USE_C11_UCHAR_CXX11: u32 = 1;
pub const _GLIBCXX_USE_C99: u32 = 1;
pub const _GLIBCXX_USE_C99_COMPLEX_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_CTYPE_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_FENV_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_MATH_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_STDINT_TR1: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_MONOTONIC: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_REALTIME: u32 = 1;
pub const _GLIBCXX_USE_DECIMAL_FLOAT: u32 = 1;
pub const _GLIBCXX_USE_DEV_RANDOM: u32 = 1;
pub const _GLIBCXX_USE_FCHMOD: u32 = 1;
pub const _GLIBCXX_USE_FCHMODAT: u32 = 1;
pub const _GLIBCXX_USE_GETTIMEOFDAY: u32 = 1;
pub const _GLIBCXX_USE_GET_NPROCS: u32 = 1;
pub const _GLIBCXX_USE_INT128: u32 = 1;
pub const _GLIBCXX_USE_LFS: u32 = 1;
pub const _GLIBCXX_USE_LONG_LONG: u32 = 1;
pub const _GLIBCXX_USE_LSTAT: u32 = 1;
pub const _GLIBCXX_USE_NANOSLEEP: u32 = 1;
pub const _GLIBCXX_USE_NLS: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_COND_CLOCKWAIT: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_MUTEX_CLOCKLOCK: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_RWLOCK_CLOCKLOCK: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_RWLOCK_T: u32 = 1;
pub const _GLIBCXX_USE_RANDOM_TR1: u32 = 1;
pub const _GLIBCXX_USE_REALPATH: u32 = 1;
pub const _GLIBCXX_USE_SCHED_YIELD: u32 = 1;
pub const _GLIBCXX_USE_SC_NPROCESSORS_ONLN: u32 = 1;
pub const _GLIBCXX_USE_SENDFILE: u32 = 1;
pub const _GLIBCXX_USE_ST_MTIM: u32 = 1;
pub const _GLIBCXX_USE_TMPNAM: u32 = 1;
pub const _GLIBCXX_USE_UTIME: u32 = 1;
pub const _GLIBCXX_USE_UTIMENSAT: u32 = 1;
pub const _GLIBCXX_USE_WCHAR_T: u32 = 1;
pub const _GLIBCXX_VERBOSE: u32 = 1;
pub const _GLIBCXX_X86_RDRAND: u32 = 1;
pub const _GLIBCXX_X86_RDSEED: u32 = 1;
pub const _GTHREAD_USE_MUTEX_TIMEDLOCK: u32 = 1;
pub const _FUNCTEXCEPT_H: u32 = 1;
pub const _EXCEPTION_DEFINES_H: u32 = 1;
pub const _CPP_TYPE_TRAITS_H: u32 = 1;
pub const _EXT_TYPE_TRAITS: u32 = 1;
pub const _EXT_NUMERIC_TRAITS: u32 = 1;
pub const _STL_PAIR_H: u32 = 1;
pub const _MOVE_H: u32 = 1;
pub const _GLIBCXX_TYPE_TRAITS: u32 = 1;
pub const __cpp_lib_integral_constant_callable: u32 = 201304;
pub const __cpp_lib_bool_constant: u32 = 201505;
pub const __cpp_lib_logical_traits: u32 = 201510;
pub const __cpp_lib_is_null_pointer: u32 = 201309;
pub const __cpp_lib_is_final: u32 = 201402;
pub const __cpp_lib_transformation_trait_aliases: u32 = 201304;
pub const __cpp_lib_result_of_sfinae: u32 = 201210;
pub const __cpp_lib_void_t: u32 = 201411;
pub const __cpp_lib_is_swappable: u32 = 201603;
pub const __cpp_lib_is_invocable: u32 = 201703;
pub const __cpp_lib_type_trait_variable_templates: u32 = 201510;
pub const __cpp_lib_has_unique_object_representations: u32 = 201606;
pub const __cpp_lib_is_aggregate: u32 = 201703;
pub const __cpp_lib_addressof_constexpr: u32 = 201603;
pub const _STL_ITERATOR_BASE_TYPES_H: u32 = 1;
pub const _STL_ITERATOR_BASE_FUNCS_H: u32 = 1;
pub const _CONCEPT_CHECK_H: u32 = 1;
pub const _GLIBCXX_DEBUG_ASSERTIONS_H: u32 = 1;
pub const _STL_ITERATOR_H: u32 = 1;
pub const _PTR_TRAITS_H: u32 = 1;
pub const __cpp_lib_array_constexpr: u32 = 201803;
pub const __cpp_lib_make_reverse_iterator: u32 = 201402;
pub const _GLIBCXX_DEBUG_MACRO_SWITCH_H: u32 = 1;
pub const _GLIBCXX_PREDEFINED_OPS_H: u32 = 1;
pub const __cpp_lib_robust_nonmodifying_seq_ops: u32 = 201304;
pub const _ALLOCATOR_H: u32 = 1;
pub const _GLIBCXX_CXX_ALLOCATOR_H: u32 = 1;
pub const _NEW_ALLOCATOR_H: u32 = 1;
pub const __EXCEPTION_H: u32 = 1;
pub const __cpp_lib_launder: u32 = 201606;
pub const _MEMORYFWD_H: u32 = 1;
pub const __cpp_lib_incomplete_container_elements: u32 = 201505;
pub const _STL_CONSTRUCT_H: u32 = 1;
pub const _STL_UNINITIALIZED_H: u32 = 1;
pub const _EXT_ALLOC_TRAITS_H: u32 = 1;
pub const _ALLOC_TRAITS_H: u32 = 1;
pub const __cpp_lib_allocator_traits_is_always_equal: u32 = 201411;
pub const __cpp_lib_raw_memory_algorithms: u32 = 201606;
pub const _STL_TEMPBUF_H: u32 = 1;
pub const _STL_RAW_STORAGE_ITERATOR_H: u32 = 1;
pub const _GLIBCXX_ALIGN_H: u32 = 1;
pub const _GLIBCXX_BIT: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INT8_WIDTH: u32 = 8;
pub const UINT8_WIDTH: u32 = 8;
pub const INT16_WIDTH: u32 = 16;
pub const UINT16_WIDTH: u32 = 16;
pub const INT32_WIDTH: u32 = 32;
pub const UINT32_WIDTH: u32 = 32;
pub const INT64_WIDTH: u32 = 64;
pub const UINT64_WIDTH: u32 = 64;
pub const INT_LEAST8_WIDTH: u32 = 8;
pub const UINT_LEAST8_WIDTH: u32 = 8;
pub const INT_LEAST16_WIDTH: u32 = 16;
pub const UINT_LEAST16_WIDTH: u32 = 16;
pub const INT_LEAST32_WIDTH: u32 = 32;
pub const UINT_LEAST32_WIDTH: u32 = 32;
pub const INT_LEAST64_WIDTH: u32 = 64;
pub const UINT_LEAST64_WIDTH: u32 = 64;
pub const INT_FAST8_WIDTH: u32 = 8;
pub const UINT_FAST8_WIDTH: u32 = 8;
pub const INT_FAST16_WIDTH: u32 = 64;
pub const UINT_FAST16_WIDTH: u32 = 64;
pub const INT_FAST32_WIDTH: u32 = 64;
pub const UINT_FAST32_WIDTH: u32 = 64;
pub const INT_FAST64_WIDTH: u32 = 64;
pub const UINT_FAST64_WIDTH: u32 = 64;
pub const INTPTR_WIDTH: u32 = 64;
pub const UINTPTR_WIDTH: u32 = 64;
pub const INTMAX_WIDTH: u32 = 64;
pub const UINTMAX_WIDTH: u32 = 64;
pub const PTRDIFF_WIDTH: u32 = 64;
pub const SIG_ATOMIC_WIDTH: u32 = 32;
pub const SIZE_WIDTH: u32 = 64;
pub const WCHAR_WIDTH: u32 = 32;
pub const WINT_WIDTH: u32 = 32;
pub const _USES_ALLOCATOR_H: u32 = 1;
pub const _UNIQUE_PTR_H: u32 = 1;
pub const _GLIBCXX_UTILITY: u32 = 1;
pub const _STL_RELOPS_H: u32 = 1;
pub const __cpp_lib_tuple_element_t: u32 = 201402;
pub const __cpp_lib_tuples_by_type: u32 = 201304;
pub const __cpp_lib_exchange_function: u32 = 201304;
pub const __cpp_lib_integer_sequence: u32 = 201304;
pub const __cpp_lib_as_const: u32 = 201510;
pub const _GLIBCXX_TUPLE: u32 = 1;
pub const _GLIBCXX_ARRAY: u32 = 1;
pub const _GLIBCXX_RANGE_ACCESS_H: u32 = 1;
pub const __cpp_lib_nonmember_container_access: u32 = 201411;
pub const _GLIBCXX_INVOKE_H: u32 = 1;
pub const __cpp_lib_apply: u32 = 201603;
pub const __cpp_lib_make_from_tuple: u32 = 201606;
pub const _STL_FUNCTION_H: u32 = 1;
pub const __cpp_lib_transparent_operators: u32 = 201510;
pub const _BACKWARD_BINDERS_H: u32 = 1;
pub const _FUNCTIONAL_HASH_H: u32 = 1;
pub const _HASH_BYTES_H: u32 = 1;
pub const __cpp_lib_make_unique: u32 = 201304;
pub const _SHARED_PTR_H: u32 = 1;
pub const _GLIBCXX_IOSFWD: u32 = 1;
pub const _STRINGFWD_H: u32 = 1;
pub const _GLIBCXX_POSTYPES_H: u32 = 1;
pub const _WCHAR_H: u32 = 1;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __GNUC_VA_LIST: u32 = 1;
pub const __wint_t_defined: u32 = 1;
pub const _WINT_T: u32 = 1;
pub const __mbstate_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const WEOF: u32 = 4294967295;
pub const _GLIBCXX_CWCHAR: u32 = 1;
pub const _SHARED_PTR_BASE_H: u32 = 1;
pub const __GXX_MERGED_TYPEINFO_NAMES: u32 = 0;
pub const __GXX_TYPEINFO_EQUALITY_INLINE: u32 = 1;
pub const _ALLOCATED_PTR_H: u32 = 1;
pub const _GLIBCXX_REFWRAP_H: u32 = 1;
pub const _ALIGNED_BUFFER_H: u32 = 1;
pub const _GLIBCXX_ATOMICITY_H: u32 = 1;
pub const __GTHREADS: u32 = 1;
pub const __GTHREADS_CXX0X: u32 = 1;
pub const _PTHREAD_H: u32 = 1;
pub const _SCHED_H: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const _BITS_SCHED_H: u32 = 1;
pub const SCHED_OTHER: u32 = 0;
pub const SCHED_FIFO: u32 = 1;
pub const SCHED_RR: u32 = 2;
pub const SCHED_BATCH: u32 = 3;
pub const SCHED_ISO: u32 = 4;
pub const SCHED_IDLE: u32 = 5;
pub const SCHED_DEADLINE: u32 = 6;
pub const SCHED_RESET_ON_FORK: u32 = 1073741824;
pub const CSIGNAL: u32 = 255;
pub const CLONE_VM: u32 = 256;
pub const CLONE_FS: u32 = 512;
pub const CLONE_FILES: u32 = 1024;
pub const CLONE_SIGHAND: u32 = 2048;
pub const CLONE_PIDFD: u32 = 4096;
pub const CLONE_PTRACE: u32 = 8192;
pub const CLONE_VFORK: u32 = 16384;
pub const CLONE_PARENT: u32 = 32768;
pub const CLONE_THREAD: u32 = 65536;
pub const CLONE_NEWNS: u32 = 131072;
pub const CLONE_SYSVSEM: u32 = 262144;
pub const CLONE_SETTLS: u32 = 524288;
pub const CLONE_PARENT_SETTID: u32 = 1048576;
pub const CLONE_CHILD_CLEARTID: u32 = 2097152;
pub const CLONE_DETACHED: u32 = 4194304;
pub const CLONE_UNTRACED: u32 = 8388608;
pub const CLONE_CHILD_SETTID: u32 = 16777216;
pub const CLONE_NEWCGROUP: u32 = 33554432;
pub const CLONE_NEWUTS: u32 = 67108864;
pub const CLONE_NEWIPC: u32 = 134217728;
pub const CLONE_NEWUSER: u32 = 268435456;
pub const CLONE_NEWPID: u32 = 536870912;
pub const CLONE_NEWNET: u32 = 1073741824;
pub const CLONE_IO: u32 = 2147483648;
pub const _BITS_TYPES_STRUCT_SCHED_PARAM: u32 = 1;
pub const _BITS_CPU_SET_H: u32 = 1;
pub const __CPU_SETSIZE: u32 = 1024;
pub const CPU_SETSIZE: u32 = 1024;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const _BITS_TIMEX_H: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const ADJ_OFFSET: u32 = 1;
pub const ADJ_FREQUENCY: u32 = 2;
pub const ADJ_MAXERROR: u32 = 4;
pub const ADJ_ESTERROR: u32 = 8;
pub const ADJ_STATUS: u32 = 16;
pub const ADJ_TIMECONST: u32 = 32;
pub const ADJ_TAI: u32 = 128;
pub const ADJ_SETOFFSET: u32 = 256;
pub const ADJ_MICRO: u32 = 4096;
pub const ADJ_NANO: u32 = 8192;
pub const ADJ_TICK: u32 = 16384;
pub const ADJ_OFFSET_SINGLESHOT: u32 = 32769;
pub const ADJ_OFFSET_SS_READ: u32 = 40961;
pub const MOD_OFFSET: u32 = 1;
pub const MOD_FREQUENCY: u32 = 2;
pub const MOD_MAXERROR: u32 = 4;
pub const MOD_ESTERROR: u32 = 8;
pub const MOD_STATUS: u32 = 16;
pub const MOD_TIMECONST: u32 = 32;
pub const MOD_CLKB: u32 = 16384;
pub const MOD_CLKA: u32 = 32769;
pub const MOD_TAI: u32 = 128;
pub const MOD_MICRO: u32 = 4096;
pub const MOD_NANO: u32 = 8192;
pub const STA_PLL: u32 = 1;
pub const STA_PPSFREQ: u32 = 2;
pub const STA_PPSTIME: u32 = 4;
pub const STA_FLL: u32 = 8;
pub const STA_INS: u32 = 16;
pub const STA_DEL: u32 = 32;
pub const STA_UNSYNC: u32 = 64;
pub const STA_FREQHOLD: u32 = 128;
pub const STA_PPSSIGNAL: u32 = 256;
pub const STA_PPSJITTER: u32 = 512;
pub const STA_PPSWANDER: u32 = 1024;
pub const STA_PPSERROR: u32 = 2048;
pub const STA_CLOCKERR: u32 = 4096;
pub const STA_NANO: u32 = 8192;
pub const STA_MODE: u32 = 16384;
pub const STA_CLK: u32 = 32768;
pub const STA_RONLY: u32 = 65280;
pub const __clock_t_defined: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _BITS_SETJMP_H: u32 = 1;
pub const __jmp_buf_tag_defined: u32 = 1;
pub const __SC_THREAD_STACK_MIN_VALUE: u32 = 75;
pub const PTHREAD_ONCE_INIT: u32 = 0;
pub const PTHREAD_BARRIER_SERIAL_THREAD: i32 = -1;
pub const PTHREAD_ATTR_NO_SIGMASK_NP: i32 = -1;
pub const __GTHREAD_HAS_COND: u32 = 1;
pub const __GTHREAD_ONCE_INIT: u32 = 0;
pub const _GLIBCXX_ATOMIC_WORD_H: u32 = 1;
pub const _CONCURRENCE_H: u32 = 1;
pub const __cpp_lib_uncaught_exceptions: u32 = 201411;
pub const _CXXABI_INIT_EXCEPTION_H: u32 = 1;
pub const _GLIBCXX_HAVE_CDTOR_CALLABI: u32 = 0;
pub const _GLIBCXX_NESTED_EXCEPTION_H: u32 = 1;
pub const __cpp_lib_shared_ptr_arrays: u32 = 201611;
pub const __cpp_lib_shared_ptr_weak_type: u32 = 201606;
pub const __cpp_lib_enable_shared_from_this: u32 = 201603;
pub const _SHARED_PTR_ATOMIC_H: u32 = 1;
pub const _GLIBCXX_ATOMIC_BASE_H: u32 = 1;
pub const _GLIBCXX_ATOMIC_LOCK_FREE_H: u32 = 1;
pub const _BACKWARD_AUTO_PTR_H: u32 = 1;
pub const __cpp_lib_parallel_algorithm: u32 = 201603;
pub const __bool_true_false_are_defined: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const __cookie_io_functions_t_defined: u32 = 1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_DATA: u32 = 3;
pub const SEEK_HOLE: u32 = 4;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const L_cuserid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const _PRINTF_NAN_LEN_MAX: u32 = 4;
pub const RENAME_NOREPLACE: u32 = 1;
pub const RENAME_EXCHANGE: u32 = 2;
pub const RENAME_WHITEOUT: u32 = 4;
pub const GGML_FILE_MAGIC: u32 = 1734831468;
pub const GGML_FILE_VERSION: u32 = 2;
pub const GGML_QNT_VERSION: u32 = 2;
pub const GGML_QNT_VERSION_FACTOR: u32 = 1000;
pub const GGML_MAX_DIMS: u32 = 4;
pub const GGML_MAX_PARAMS: u32 = 2048;
pub const GGML_MAX_SRC: u32 = 10;
pub const GGML_MAX_N_THREADS: u32 = 512;
pub const GGML_MAX_OP_PARAMS: u32 = 64;
pub const GGML_MAX_NAME: u32 = 64;
pub const GGML_DEFAULT_N_THREADS: u32 = 4;
pub const GGML_DEFAULT_GRAPH_SIZE: u32 = 2048;
pub const GGML_MEM_ALIGN: u32 = 16;
pub const GGML_EXIT_SUCCESS: u32 = 0;
pub const GGML_EXIT_ABORTED: u32 = 1;
pub const GGML_ROPE_TYPE_NEOX: u32 = 2;
pub const GGML_ROPE_TYPE_MROPE: u32 = 8;
pub const GGML_ROPE_TYPE_VISION: u32 = 24;
pub const GGML_KQ_MASK_PAD: u32 = 64;
pub const GGML_N_TASKS_MAX: i32 = -1;
pub const LLAMA_DEFAULT_SEED: u32 = 4294967295;
pub const LLAMA_TOKEN_NULL: i32 = -1;
pub const LLAMA_FILE_MAGIC_GGLA: u32 = 1734831201;
pub const LLAMA_FILE_MAGIC_GGSN: u32 = 1734833006;
pub const LLAMA_FILE_MAGIC_GGSQ: u32 = 1734833009;
pub const LLAMA_SESSION_MAGIC: u32 = 1734833006;
pub const LLAMA_SESSION_VERSION: u32 = 9;
pub const LLAMA_STATE_SEQ_MAGIC: u32 = 1734833009;
pub const LLAMA_STATE_SEQ_VERSION: u32 = 2;
pub const _GLIBCXX_SET: u32 = 1;
pub const _STL_TREE_H: u32 = 1;
pub const _NODE_HANDLE: u32 = 1;
pub const __cpp_lib_node_extract: u32 = 201606;
pub const __cpp_lib_generic_associative_lookup: u32 = 201304;
pub const _STL_SET_H: u32 = 1;
pub const _STL_MULTISET_H: u32 = 1;
pub const _GLIBCXX_ERASE_IF_H: u32 = 1;
pub const _GLIBCXX_STRING: u32 = 1;
pub const _CHAR_TRAITS_H: u32 = 1;
pub const __cpp_lib_constexpr_char_traits: u32 = 201611;
pub const _GLIBCXX_CSTDINT: u32 = 1;
pub const _LOCALE_FWD_H: u32 = 1;
pub const _GLIBCXX_CXX_LOCALE_H: u32 = 1;
pub const _LOCALE_H: u32 = 1;
pub const _BITS_LOCALE_H: u32 = 1;
pub const __LC_CTYPE: u32 = 0;
pub const __LC_NUMERIC: u32 = 1;
pub const __LC_TIME: u32 = 2;
pub const __LC_COLLATE: u32 = 3;
pub const __LC_MONETARY: u32 = 4;
pub const __LC_MESSAGES: u32 = 5;
pub const __LC_ALL: u32 = 6;
pub const __LC_PAPER: u32 = 7;
pub const __LC_NAME: u32 = 8;
pub const __LC_ADDRESS: u32 = 9;
pub const __LC_TELEPHONE: u32 = 10;
pub const __LC_MEASUREMENT: u32 = 11;
pub const __LC_IDENTIFICATION: u32 = 12;
pub const LC_CTYPE: u32 = 0;
pub const LC_NUMERIC: u32 = 1;
pub const LC_TIME: u32 = 2;
pub const LC_COLLATE: u32 = 3;
pub const LC_MONETARY: u32 = 4;
pub const LC_MESSAGES: u32 = 5;
pub const LC_ALL: u32 = 6;
pub const LC_PAPER: u32 = 7;
pub const LC_NAME: u32 = 8;
pub const LC_ADDRESS: u32 = 9;
pub const LC_TELEPHONE: u32 = 10;
pub const LC_MEASUREMENT: u32 = 11;
pub const LC_IDENTIFICATION: u32 = 12;
pub const LC_CTYPE_MASK: u32 = 1;
pub const LC_NUMERIC_MASK: u32 = 2;
pub const LC_TIME_MASK: u32 = 4;
pub const LC_COLLATE_MASK: u32 = 8;
pub const LC_MONETARY_MASK: u32 = 16;
pub const LC_MESSAGES_MASK: u32 = 32;
pub const LC_PAPER_MASK: u32 = 128;
pub const LC_NAME_MASK: u32 = 256;
pub const LC_ADDRESS_MASK: u32 = 512;
pub const LC_TELEPHONE_MASK: u32 = 1024;
pub const LC_MEASUREMENT_MASK: u32 = 2048;
pub const LC_IDENTIFICATION_MASK: u32 = 4096;
pub const LC_ALL_MASK: u32 = 8127;
pub const _GLIBCXX_CLOCALE: u32 = 1;
pub const _GLIBCXX_C_LOCALE_GNU: u32 = 1;
pub const _GLIBCXX_NUM_CATEGORIES: u32 = 6;
pub const _CTYPE_H: u32 = 1;
pub const _GLIBCXX_CCTYPE: u32 = 1;
pub const _OSTREAM_INSERT_H: u32 = 1;
pub const _CXXABI_FORCED_H: u32 = 1;
pub const _BASIC_STRING_H: u32 = 1;
pub const _GLIBCXX_STRING_VIEW: u32 = 1;
pub const __cpp_lib_string_view: u32 = 201803;
pub const _GLIBCXX_STRING_VIEW_TCC: u32 = 1;
pub const __cpp_lib_constexpr_string: u32 = 201611;
pub const _STRING_CONVERSIONS_H: u32 = 1;
pub const _GLIBCXX_CSTDLIB: u32 = 1;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _ALLOCA_H: u32 = 1;
pub const _GLIBCXX_CSTDIO: u32 = 1;
pub const _ERRNO_H: u32 = 1;
pub const _BITS_ERRNO_H: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const ENOTSUP: u32 = 95;
pub const __error_t_defined: u32 = 1;
pub const _GLIBCXX_CERRNO: u32 = 1;
pub const _GLIBCXX_CHARCONV_H: u32 = 1;
pub const __cpp_lib_string_udls: u32 = 201304;
pub const _BASIC_STRING_TCC: u32 = 1;
pub const _GLIBCXX_VECTOR: u32 = 1;
pub const _STL_VECTOR_H: u32 = 1;
pub const _STL_BVECTOR_H: u32 = 1;
pub const _VECTOR_TCC: u32 = 1;
pub const _GLIBCXX_SSTREAM: u32 = 1;
pub const _GLIBCXX_ISTREAM: u32 = 1;
pub const _GLIBCXX_IOS: u32 = 1;
pub const _IOS_BASE_H: u32 = 1;
pub const _LOCALE_CLASSES_H: u32 = 1;
pub const _LOCALE_CLASSES_TCC: u32 = 1;
pub const _GLIBCXX_SYSTEM_ERROR: u32 = 1;
pub const _GLIBCXX_ERROR_CONSTANTS: u32 = 1;
pub const _GLIBCXX_STDEXCEPT: u32 = 1;
pub const _GLIBXX_STREAMBUF: u32 = 1;
pub const _STREAMBUF_TCC: u32 = 1;
pub const _BASIC_IOS_H: u32 = 1;
pub const _LOCALE_FACETS_H: u32 = 1;
pub const _WCTYPE_H: u32 = 1;
pub const _BITS_WCTYPE_WCHAR_H: u32 = 1;
pub const _GLIBCXX_CWCTYPE: u32 = 1;
pub const _STREAMBUF_ITERATOR_H: u32 = 1;
pub const _GLIBCXX_NUM_FACETS: u32 = 14;
pub const _GLIBCXX_NUM_UNICODE_FACETS: u32 = 2;
pub const _LOCALE_FACETS_TCC: u32 = 1;
pub const _BASIC_IOS_TCC: u32 = 1;
pub const _GLIBCXX_OSTREAM: u32 = 1;
pub const _OSTREAM_TCC: u32 = 1;
pub const _ISTREAM_TCC: u32 = 1;
pub const _SSTREAM_TCC: u32 = 1;
pub const DIRECTORY_SEPARATOR: u8 = 47u8;
pub const DEFAULT_MODEL_PATH: &[u8; 30] = b"models/7B/ggml-model-f16.gguf\0";
pub type std_nullptr_t = *const ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_time_get {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_time_get_byname {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_money_get {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_money_put {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_messages {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_messages_byname {
    pub _address: u8,
}
#[repr(C)]
pub struct std_basic_string<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _M_dataplus: std_basic_string__Alloc_hider,
    pub _M_string_length: std_basic_string_size_type,
    pub __bindgen_anon_1: std_basic_string__bindgen_ty_2<_CharT>,
}
pub type std_basic_string__Char_alloc_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_string__Alloc_traits = __gnu_cxx___alloc_traits;
pub type std_basic_string_traits_type<_Traits> = _Traits;
pub type std_basic_string_value_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_string_allocator_type = std_basic_string__Char_alloc_type;
pub type std_basic_string_size_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_string_difference_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_string_reference = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_string_const_reference = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_string_pointer = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_string_const_pointer = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_string_iterator = __gnu_cxx___normal_iterator<std_basic_string_pointer>;
pub type std_basic_string_const_iterator =
    __gnu_cxx___normal_iterator<std_basic_string_const_pointer>;
pub type std_basic_string_const_reverse_iterator =
    std_reverse_iterator<std_basic_string_const_iterator>;
pub type std_basic_string_reverse_iterator = std_reverse_iterator<std_basic_string_iterator>;
pub type std_basic_string___const_iterator = std_basic_string_const_iterator;
pub type std_basic_string___sv_type<_CharT> = std_basic_string_view<_CharT>;
pub type std_basic_string__If_sv = std_enable_if_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_string___sv_wrapper<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _M_sv: std_basic_string___sv_type<_CharT>,
}
#[repr(C)]
pub struct std_basic_string__Alloc_hider {
    pub _M_p: std_basic_string_pointer,
}
pub const std_basic_string__S_local_capacity: std_basic_string__bindgen_ty_1 = 0;
pub type std_basic_string__bindgen_ty_1 = i32;
#[repr(C)]
pub struct std_basic_string__bindgen_ty_2<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _M_local_buf: __BindgenUnionField<*mut _CharT>,
    pub _M_allocated_capacity: __BindgenUnionField<std_basic_string_size_type>,
    pub bindgen_union_field: u64,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_collate {
    pub _base: std_locale_facet,
    pub _M_c_locale_collate: std___c_locale,
}
pub type std_collate_char_type<_CharT> = _CharT;
pub type std_collate_string_type = std_basic_string<_CharT>;
#[repr(C)]
#[derive(Debug)]
pub struct std_collate_byname {
    pub _base: std_collate,
}
pub type std_collate_byname_char_type<_CharT> = _CharT;
pub type std_collate_byname_string_type = std_basic_string<_CharT>;
#[repr(C)]
#[derive(Debug)]
pub struct std_numpunct<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _base: std_locale_facet,
    pub _M_data: *mut std_numpunct___cache_type<_CharT>,
}
pub type std_numpunct_char_type<_CharT> = _CharT;
pub type std_numpunct_string_type = std_basic_string<_CharT>;
pub type std_numpunct___cache_type<_CharT> = std___numpunct_cache<_CharT>;
unsafe extern "C" {
    #[link_name = "\u{1}id"]
    pub static mut std_id: std_locale_id;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_numpunct_byname<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _base: std_numpunct<_CharT>,
}
pub type std_numpunct_byname_char_type<_CharT> = _CharT;
pub type std_numpunct_byname_string_type = std_basic_string<_CharT>;
#[repr(C)]
pub struct std_basic_stringbuf<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _base: std_basic_streambuf<_CharT>,
    pub _M_mode: std_ios_base_openmode,
    pub _M_string: std_basic_stringbuf___string_type<_CharT>,
}
pub type std_basic_stringbuf_allocator_traits = std_allocator_traits;
pub type std_basic_stringbuf__Noexcept_swap = std___or_;
pub type std_basic_stringbuf_char_type<_CharT> = _CharT;
pub type std_basic_stringbuf_traits_type<_Traits> = _Traits;
pub type std_basic_stringbuf_allocator_type<_Alloc> = _Alloc;
pub type std_basic_stringbuf_int_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_stringbuf_pos_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_stringbuf_off_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_stringbuf___streambuf_type<_CharT> =
    std_basic_streambuf<std_basic_stringbuf_char_type<_CharT>>;
pub type std_basic_stringbuf___string_type<_CharT> =
    std_basic_string<std_basic_stringbuf_char_type<_CharT>>;
pub type std_basic_stringbuf___size_type<_CharT> = std_basic_stringbuf___string_type<_CharT>;
#[repr(C)]
pub struct std_basic_stringbuf___xfer_bufptrs<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _M_to: *mut std_basic_stringbuf<_CharT>,
    pub _M_goff: [std_basic_stringbuf_off_type; 3usize],
    pub _M_poff: [std_basic_stringbuf_off_type; 3usize],
}
#[repr(C)]
pub struct std_basic_istringstream<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _base: std_basic_istream<_CharT>,
    pub _M_stringbuf: std_basic_istringstream___stringbuf_type<_CharT>,
}
pub type std_basic_istringstream_char_type<_CharT> = _CharT;
pub type std_basic_istringstream_traits_type<_Traits> = _Traits;
pub type std_basic_istringstream_allocator_type<_Alloc> = _Alloc;
pub type std_basic_istringstream_int_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_istringstream_pos_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_istringstream_off_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_istringstream___string_type<_CharT> = std_basic_string<_CharT>;
pub type std_basic_istringstream___stringbuf_type<_CharT> = std_basic_stringbuf<_CharT>;
pub type std_basic_istringstream___istream_type<_CharT> =
    std_basic_istream<std_basic_istringstream_char_type<_CharT>>;
#[repr(C)]
pub struct std_basic_ostringstream<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _base: std_basic_ostream<_CharT>,
    pub _M_stringbuf: std_basic_ostringstream___stringbuf_type<_CharT>,
}
pub type std_basic_ostringstream_char_type<_CharT> = _CharT;
pub type std_basic_ostringstream_traits_type<_Traits> = _Traits;
pub type std_basic_ostringstream_allocator_type<_Alloc> = _Alloc;
pub type std_basic_ostringstream_int_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_ostringstream_pos_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_ostringstream_off_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_ostringstream___string_type<_CharT> = std_basic_string<_CharT>;
pub type std_basic_ostringstream___stringbuf_type<_CharT> = std_basic_stringbuf<_CharT>;
pub type std_basic_ostringstream___ostream_type<_CharT> =
    std_basic_ostream<std_basic_ostringstream_char_type<_CharT>>;
#[repr(C)]
pub struct std_basic_stringstream<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _base: std_basic_iostream<_CharT>,
    pub _M_stringbuf: std_basic_stringstream___stringbuf_type<_CharT>,
}
pub type std_basic_stringstream_char_type<_CharT> = _CharT;
pub type std_basic_stringstream_traits_type<_Traits> = _Traits;
pub type std_basic_stringstream_allocator_type<_Alloc> = _Alloc;
pub type std_basic_stringstream_int_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_stringstream_pos_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_stringstream_off_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_stringstream___string_type<_CharT> = std_basic_string<_CharT>;
pub type std_basic_stringstream___stringbuf_type<_CharT> = std_basic_stringbuf<_CharT>;
pub type std_basic_stringstream___iostream_type<_CharT> =
    std_basic_iostream<std_basic_stringstream_char_type<_CharT>>;
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt21__throw_bad_exceptionv"]
    pub fn std___throw_bad_exception() -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt17__throw_bad_allocv"]
    pub fn std___throw_bad_alloc() -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt28__throw_bad_array_new_lengthv"]
    pub fn std___throw_bad_array_new_length() -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt16__throw_bad_castv"]
    pub fn std___throw_bad_cast() -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt18__throw_bad_typeidv"]
    pub fn std___throw_bad_typeid() -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt19__throw_logic_errorPKc"]
    pub fn std___throw_logic_error(arg1: *const ::std::os::raw::c_char) -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt20__throw_domain_errorPKc"]
    pub fn std___throw_domain_error(arg1: *const ::std::os::raw::c_char) -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt24__throw_invalid_argumentPKc"]
    pub fn std___throw_invalid_argument(arg1: *const ::std::os::raw::c_char) -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt20__throw_length_errorPKc"]
    pub fn std___throw_length_error(arg1: *const ::std::os::raw::c_char) -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt20__throw_out_of_rangePKc"]
    pub fn std___throw_out_of_range(arg1: *const ::std::os::raw::c_char) -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt24__throw_out_of_range_fmtPKcz"]
    pub fn std___throw_out_of_range_fmt(arg1: *const ::std::os::raw::c_char, ...) -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt21__throw_runtime_errorPKc"]
    pub fn std___throw_runtime_error(arg1: *const ::std::os::raw::c_char) -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt19__throw_range_errorPKc"]
    pub fn std___throw_range_error(arg1: *const ::std::os::raw::c_char) -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt22__throw_overflow_errorPKc"]
    pub fn std___throw_overflow_error(arg1: *const ::std::os::raw::c_char) -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt23__throw_underflow_errorPKc"]
    pub fn std___throw_underflow_error(arg1: *const ::std::os::raw::c_char) -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt19__throw_ios_failurePKc"]
    pub fn std___throw_ios_failure(arg1: *const ::std::os::raw::c_char) -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt19__throw_ios_failurePKci"]
    pub fn std___throw_ios_failure1(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt20__throw_system_errori"]
    pub fn std___throw_system_error(arg1: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt20__throw_future_errori"]
    pub fn std___throw_future_error(arg1: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt25__throw_bad_function_callv"]
    pub fn std___throw_bad_function_call() -> !;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___true_type {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___true_type"][::std::mem::size_of::<std___true_type>() - 1usize];
    ["Alignment of std___true_type"][::std::mem::align_of::<std___true_type>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___false_type {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___false_type"][::std::mem::size_of::<std___false_type>() - 1usize];
    ["Alignment of std___false_type"][::std::mem::align_of::<std___false_type>() - 1usize];
};
pub type std___truth_type___type = std___false_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___traitor {
    pub _address: u8,
}
pub const std___traitor___value: std___traitor__bindgen_ty_1 = 0;
pub type std___traitor__bindgen_ty_1 = i32;
pub type std___traitor___type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___are_same {
    pub _address: u8,
}
pub const std___are_same___value: std___are_same__bindgen_ty_1 = 0;
pub type std___are_same__bindgen_ty_1 = i32;
pub type std___are_same___type = std___false_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_void {
    pub _address: u8,
}
pub const std___is_void___value: std___is_void__bindgen_ty_1 = 0;
pub type std___is_void__bindgen_ty_1 = i32;
pub type std___is_void___type = std___false_type;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_void_open0_void_close0"]
        [::std::mem::size_of::<std___is_void>() - 1usize];
    ["Align of template specialization: std___is_void_open0_void_close0"]
        [::std::mem::align_of::<std___is_void>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_integer {
    pub _address: u8,
}
pub const std___is_integer___value: std___is_integer__bindgen_ty_1 = 0;
pub type std___is_integer__bindgen_ty_1 = i32;
pub type std___is_integer___type = std___false_type;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_bool__close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_bool__close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_char_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_char_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_signed_char_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_signed_char_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_wchar_t_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_wchar_t_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_char16_t_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_char16_t_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_char32_t_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_char32_t_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_short_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_short_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_unsigned_short_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_unsigned_short_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_int_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_int_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_unsigned_int_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_unsigned_int_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_long_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_long_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_unsigned_long_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_unsigned_long_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_long_long_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_long_long_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_unsigned_long_long_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_unsigned_long_long_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_floating {
    pub _address: u8,
}
pub const std___is_floating___value: std___is_floating__bindgen_ty_1 = 0;
pub type std___is_floating__bindgen_ty_1 = i32;
pub type std___is_floating___type = std___false_type;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_floating_open0_float_close0"]
        [::std::mem::size_of::<std___is_floating>() - 1usize];
    ["Align of template specialization: std___is_floating_open0_float_close0"]
        [::std::mem::align_of::<std___is_floating>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_floating_open0_double_close0"]
        [::std::mem::size_of::<std___is_floating>() - 1usize];
    ["Align of template specialization: std___is_floating_open0_double_close0"]
        [::std::mem::align_of::<std___is_floating>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_floating_open0_long_double_close0"]
        [::std::mem::size_of::<std___is_floating>() - 1usize];
    ["Align of template specialization: std___is_floating_open0_long_double_close0"]
        [::std::mem::align_of::<std___is_floating>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_pointer {
    pub _address: u8,
}
pub const std___is_pointer___value: std___is_pointer__bindgen_ty_1 = 0;
pub type std___is_pointer__bindgen_ty_1 = i32;
pub type std___is_pointer___type = std___false_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_arithmetic {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_scalar {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_char {
    pub _address: u8,
}
pub const std___is_char___value: std___is_char__bindgen_ty_1 = 0;
pub type std___is_char__bindgen_ty_1 = i32;
pub type std___is_char___type = std___false_type;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_char_open0_char_close0"]
        [::std::mem::size_of::<std___is_char>() - 1usize];
    ["Align of template specialization: std___is_char_open0_char_close0"]
        [::std::mem::align_of::<std___is_char>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_char_open0_wchar_t_close0"]
        [::std::mem::size_of::<std___is_char>() - 1usize];
    ["Align of template specialization: std___is_char_open0_wchar_t_close0"]
        [::std::mem::align_of::<std___is_char>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_byte {
    pub _address: u8,
}
pub const std___is_byte___value: std___is_byte__bindgen_ty_1 = 0;
pub type std___is_byte__bindgen_ty_1 = i32;
pub type std___is_byte___type = std___false_type;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_byte_open0_char_close0"]
        [::std::mem::size_of::<std___is_byte>() - 1usize];
    ["Align of template specialization: std___is_byte_open0_char_close0"]
        [::std::mem::align_of::<std___is_byte>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_byte_open0_signed_char_close0"]
        [::std::mem::size_of::<std___is_byte>() - 1usize];
    ["Align of template specialization: std___is_byte_open0_signed_char_close0"]
        [::std::mem::align_of::<std___is_byte>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_byte_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std___is_byte>() - 1usize];
    ["Align of template specialization: std___is_byte_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std___is_byte>() - 1usize];
};
pub type std_byte = ::std::os::raw::c_uchar;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_byte_open0_std_byte_close0"]
        [::std::mem::size_of::<std___is_byte>() - 1usize];
    ["Align of template specialization: std___is_byte_open0_std_byte_close0"]
        [::std::mem::align_of::<std___is_byte>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nonvolatile_trivially_copyable {
    pub _address: u8,
}
pub const std___is_nonvolatile_trivially_copyable___value:
    std___is_nonvolatile_trivially_copyable__bindgen_ty_1 = 0;
pub type std___is_nonvolatile_trivially_copyable__bindgen_ty_1 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___memcpyable {
    pub _address: u8,
}
pub const std___memcpyable___value: std___memcpyable__bindgen_ty_1 = 0;
pub type std___memcpyable__bindgen_ty_1 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___memcmpable {
    pub _address: u8,
}
pub const std___memcmpable___value: std___memcmpable__bindgen_ty_1 = 0;
pub type std___memcmpable__bindgen_ty_1 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_move_iterator {
    pub _address: u8,
}
pub const std___is_move_iterator___value: std___is_move_iterator__bindgen_ty_1 = 0;
pub type std___is_move_iterator__bindgen_ty_1 = i32;
pub type std___is_move_iterator___type = std___false_type;
pub type std_integral_constant_value_type<_Tp> = _Tp;
pub type std_integral_constant_type = u8;
unsafe extern "C" {
    #[link_name = "\u{1}value"]
    pub static std_value: _Tp;
}
pub type std_true_type = u8;
pub type std_false_type = u8;
pub type std___bool_constant = u8;
pub type std_bool_constant = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___type_identity {
    pub _address: u8,
}
pub type std___type_identity_type<_Type> = _Type;
pub type std___type_identity_t = std___type_identity;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___or_ {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___or__open0_close0"]
        [::std::mem::size_of::<std___or_>() - 1usize];
    ["Align of template specialization: std___or__open0_close0"]
        [::std::mem::align_of::<std___or_>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___and_ {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___and__open0_close0"]
        [::std::mem::size_of::<std___and_>() - 1usize];
    ["Align of template specialization: std___and__open0_close0"]
        [::std::mem::align_of::<std___and_>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___not_ {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_conjunction {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_disjunction {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_negation {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___success_type {
    pub _address: u8,
}
pub type std___success_type_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___failure_type {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___failure_type"][::std::mem::size_of::<std___failure_type>() - 1usize];
    ["Alignment of std___failure_type"][::std::mem::align_of::<std___failure_type>() - 1usize];
};
pub type std___remove_cv_t = std_remove_cv;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_void_helper {
    pub _base: std_false_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_void_helper_open0_void_close0"]
        [::std::mem::size_of::<std___is_void_helper>() - 1usize];
    ["Align of template specialization: std___is_void_helper_open0_void_close0"]
        [::std::mem::align_of::<std___is_void_helper>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_void {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_integral_helper {
    pub _base: std_false_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_bool__close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_bool__close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_char_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_char_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_signed_char_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_signed_char_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_wchar_t_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_wchar_t_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_char16_t_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_char16_t_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_char32_t_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_char32_t_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_short_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_short_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_unsigned_short_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_unsigned_short_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_int_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_int_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_unsigned_int_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_unsigned_int_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_long_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_long_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_unsigned_long_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_unsigned_long_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_long_long_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_long_long_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_unsigned_long_long_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_unsigned_long_long_close0"] [:: std :: mem :: align_of :: < std___is_integral_helper > () - 1usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_integral {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_floating_point_helper {
    pub _base: std_false_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_floating_point_helper_open0_float_close0"]
        [::std::mem::size_of::<std___is_floating_point_helper>() - 1usize];
    ["Align of template specialization: std___is_floating_point_helper_open0_float_close0"]
        [::std::mem::align_of::<std___is_floating_point_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_floating_point_helper_open0_double_close0"]
        [::std::mem::size_of::<std___is_floating_point_helper>() - 1usize];
    ["Align of template specialization: std___is_floating_point_helper_open0_double_close0"]
        [::std::mem::align_of::<std___is_floating_point_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_floating_point_helper_open0_long_double_close0"]
        [::std::mem::size_of::<std___is_floating_point_helper>() - 1usize];
    ["Align of template specialization: std___is_floating_point_helper_open0_long_double_close0"]
        [::std::mem::align_of::<std___is_floating_point_helper>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_floating_point {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_array {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_pointer_helper {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_pointer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_lvalue_reference {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_rvalue_reference {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_member_object_pointer_helper {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_member_object_pointer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_member_function_pointer_helper {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_member_function_pointer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_enum {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_union {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_class {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_function {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_null_pointer_helper {
    pub _base: std_false_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_null_pointer_helper_open0_nullptr_t_close0"]
        [::std::mem::size_of::<std___is_null_pointer_helper>() - 1usize];
    ["Align of template specialization: std___is_null_pointer_helper_open0_nullptr_t_close0"]
        [::std::mem::align_of::<std___is_null_pointer_helper>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_null_pointer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nullptr_t {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_reference {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_arithmetic {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_fundamental {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_object {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_scalar {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_compound {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_member_pointer_helper {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_member_pointer {
    pub _address: u8,
}
pub type std___is_one_of = std___or_;
pub type std___is_signed_integer = std___is_one_of;
pub type std___is_unsigned_integer = std___is_one_of;
pub type std___is_standard_integer = std___or_;
pub type std___void_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_referenceable {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_const {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_volatile {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivial {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_copyable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_standard_layout {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_pod {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_literal_type {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_empty {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_polymorphic {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_final {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_abstract {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_signed {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_unsigned {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_array_known_bounds {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_array_unknown_bounds {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___do_is_destructible_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___do_is_destructible_impl"]
        [::std::mem::size_of::<std___do_is_destructible_impl>() - 1usize];
    ["Alignment of std___do_is_destructible_impl"]
        [::std::mem::align_of::<std___do_is_destructible_impl>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_destructible_impl {
    pub _address: u8,
}
pub type std___is_destructible_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_destructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___do_is_nt_destructible_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___do_is_nt_destructible_impl"]
        [::std::mem::size_of::<std___do_is_nt_destructible_impl>() - 1usize];
    ["Alignment of std___do_is_nt_destructible_impl"]
        [::std::mem::align_of::<std___do_is_nt_destructible_impl>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nt_destructible_impl {
    pub _address: u8,
}
pub type std___is_nt_destructible_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_destructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_constructible_impl {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_default_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_copy_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_move_constructible {
    pub _address: u8,
}
pub type std___is_nothrow_constructible_impl = std___bool_constant;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_default_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_copy_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_move_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_copy_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_move_assignable {
    pub _address: u8,
}
pub type std___is_nothrow_assignable_impl = std___bool_constant;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_copy_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_move_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_default_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___do_is_implicitly_default_constructible_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___do_is_implicitly_default_constructible_impl"]
        [::std::mem::size_of::<std___do_is_implicitly_default_constructible_impl>() - 1usize];
    ["Alignment of std___do_is_implicitly_default_constructible_impl"]
        [::std::mem::align_of::<std___do_is_implicitly_default_constructible_impl>() - 1usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt45__do_is_implicitly_default_constructible_impl6__testEz"]
    pub fn std___do_is_implicitly_default_constructible_impl___test() -> std_false_type;
}
impl std___do_is_implicitly_default_constructible_impl {
    #[inline]
    pub unsafe fn __test() -> std_false_type {
        std___do_is_implicitly_default_constructible_impl___test()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_implicitly_default_constructible_impl {
    pub _address: u8,
}
pub type std___is_implicitly_default_constructible_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_implicitly_default_constructible_safe {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_implicitly_default_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_copy_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_move_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_copy_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_move_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_destructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_has_virtual_destructor {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_alignment_of {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_rank {
    pub _base: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_same {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_base_of {
    pub _address: u8,
}
pub type std___is_convertible_helper_type = std_is_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_convertible {
    pub _address: u8,
}
pub type std___is_array_convertible = std_is_convertible;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_const {
    pub _address: u8,
}
pub type std_remove_const_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_volatile {
    pub _address: u8,
}
pub type std_remove_volatile_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_cv {
    pub _address: u8,
}
pub type std_remove_cv_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_const {
    pub _address: u8,
}
pub type std_add_const_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_volatile {
    pub _address: u8,
}
pub type std_add_volatile_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_cv {
    pub _address: u8,
}
pub type std_add_cv_type = std_add_const;
pub type std_remove_const_t = std_remove_const;
pub type std_remove_volatile_t = std_remove_volatile;
pub type std_remove_cv_t = std_remove_cv;
pub type std_add_const_t = std_add_const;
pub type std_add_volatile_t = std_add_volatile;
pub type std_add_cv_t = std_add_cv;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_reference {
    pub _address: u8,
}
pub type std_remove_reference_type<_Tp> = _Tp;
pub type std___add_lvalue_reference_helper_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_lvalue_reference {
    pub _address: u8,
}
pub type std___add_rvalue_reference_helper_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_rvalue_reference {
    pub _address: u8,
}
pub type std_remove_reference_t = std_remove_reference;
pub type std_add_lvalue_reference_t = std_add_lvalue_reference;
pub type std_add_rvalue_reference_t = std_add_rvalue_reference;
pub type std___match_cv_qualifiers___match = u8;
pub type std___match_cv_qualifiers___type = std___match_cv_qualifiers___match;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___make_unsigned {
    pub _address: u8,
}
pub type std___make_unsigned___type<_Tp> = _Tp;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_unsigned_open0_char_close0"]
        [::std::mem::size_of::<std___make_unsigned>() - 1usize];
    ["Align of template specialization: std___make_unsigned_open0_char_close0"]
        [::std::mem::align_of::<std___make_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_unsigned_open0_signed_char_close0"]
        [::std::mem::size_of::<std___make_unsigned>() - 1usize];
    ["Align of template specialization: std___make_unsigned_open0_signed_char_close0"]
        [::std::mem::align_of::<std___make_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_unsigned_open0_short_close0"]
        [::std::mem::size_of::<std___make_unsigned>() - 1usize];
    ["Align of template specialization: std___make_unsigned_open0_short_close0"]
        [::std::mem::align_of::<std___make_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_unsigned_open0_int_close0"]
        [::std::mem::size_of::<std___make_unsigned>() - 1usize];
    ["Align of template specialization: std___make_unsigned_open0_int_close0"]
        [::std::mem::align_of::<std___make_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_unsigned_open0_long_close0"]
        [::std::mem::size_of::<std___make_unsigned>() - 1usize];
    ["Align of template specialization: std___make_unsigned_open0_long_close0"]
        [::std::mem::align_of::<std___make_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_unsigned_open0_long_long_close0"]
        [::std::mem::size_of::<std___make_unsigned>() - 1usize];
    ["Align of template specialization: std___make_unsigned_open0_long_long_close0"]
        [::std::mem::align_of::<std___make_unsigned>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___make_unsigned_selector_base {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___make_unsigned_selector_base__List {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___make_unsigned_selector_base"]
        [::std::mem::size_of::<std___make_unsigned_selector_base>() - 1usize];
    ["Alignment of std___make_unsigned_selector_base"]
        [::std::mem::align_of::<std___make_unsigned_selector_base>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_unsigned_open0_wchar_t_close0"]
        [::std::mem::size_of::<std___make_unsigned>() - 1usize];
    ["Align of template specialization: std___make_unsigned_open0_wchar_t_close0"]
        [::std::mem::align_of::<std___make_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_unsigned_open0_char16_t_close0"]
        [::std::mem::size_of::<std___make_unsigned>() - 1usize];
    ["Align of template specialization: std___make_unsigned_open0_char16_t_close0"]
        [::std::mem::align_of::<std___make_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_unsigned_open0_char32_t_close0"]
        [::std::mem::size_of::<std___make_unsigned>() - 1usize];
    ["Align of template specialization: std___make_unsigned_open0_char32_t_close0"]
        [::std::mem::align_of::<std___make_unsigned>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_make_unsigned {
    pub _address: u8,
}
pub type std_make_unsigned_type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___make_signed {
    pub _address: u8,
}
pub type std___make_signed___type<_Tp> = _Tp;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_signed_open0_char_close0"]
        [::std::mem::size_of::<std___make_signed>() - 1usize];
    ["Align of template specialization: std___make_signed_open0_char_close0"]
        [::std::mem::align_of::<std___make_signed>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_signed_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std___make_signed>() - 1usize];
    ["Align of template specialization: std___make_signed_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std___make_signed>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_signed_open0_unsigned_short_close0"]
        [::std::mem::size_of::<std___make_signed>() - 1usize];
    ["Align of template specialization: std___make_signed_open0_unsigned_short_close0"]
        [::std::mem::align_of::<std___make_signed>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_signed_open0_unsigned_int_close0"]
        [::std::mem::size_of::<std___make_signed>() - 1usize];
    ["Align of template specialization: std___make_signed_open0_unsigned_int_close0"]
        [::std::mem::align_of::<std___make_signed>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_signed_open0_unsigned_long_close0"]
        [::std::mem::size_of::<std___make_signed>() - 1usize];
    ["Align of template specialization: std___make_signed_open0_unsigned_long_close0"]
        [::std::mem::align_of::<std___make_signed>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_signed_open0_unsigned_long_long_close0"]
        [::std::mem::size_of::<std___make_signed>() - 1usize];
    ["Align of template specialization: std___make_signed_open0_unsigned_long_long_close0"]
        [::std::mem::align_of::<std___make_signed>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_signed_open0_wchar_t_close0"]
        [::std::mem::size_of::<std___make_signed>() - 1usize];
    ["Align of template specialization: std___make_signed_open0_wchar_t_close0"]
        [::std::mem::align_of::<std___make_signed>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_signed_open0_char16_t_close0"]
        [::std::mem::size_of::<std___make_signed>() - 1usize];
    ["Align of template specialization: std___make_signed_open0_char16_t_close0"]
        [::std::mem::align_of::<std___make_signed>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_signed_open0_char32_t_close0"]
        [::std::mem::size_of::<std___make_signed>() - 1usize];
    ["Align of template specialization: std___make_signed_open0_char32_t_close0"]
        [::std::mem::align_of::<std___make_signed>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_make_signed {
    pub _address: u8,
}
pub type std_make_signed_type = u8;
pub type std_make_signed_t = std_make_signed;
pub type std_make_unsigned_t = std_make_unsigned;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_extent {
    pub _address: u8,
}
pub type std_remove_extent_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_all_extents {
    pub _address: u8,
}
pub type std_remove_all_extents_type<_Tp> = _Tp;
pub type std_remove_extent_t = std_remove_extent;
pub type std_remove_all_extents_t = std_remove_all_extents;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___remove_pointer_helper {
    pub _address: u8,
}
pub type std___remove_pointer_helper_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_pointer {
    pub _address: u8,
}
pub type std___add_pointer_helper_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_pointer {
    pub _address: u8,
}
pub type std_remove_pointer_t = std_remove_pointer;
pub type std_add_pointer_t = std_add_pointer;
#[repr(C)]
#[derive(Copy, Clone)]
pub union std___aligned_storage_msa___type {
    pub __data: *mut ::std::os::raw::c_uchar,
    pub __align: std___aligned_storage_msa___type__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___aligned_storage_msa___type__bindgen_ty_1 {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___aligned_storage_msa___type"]
        [::std::mem::size_of::<std___aligned_storage_msa___type>() - 8usize];
    ["Alignment of std___aligned_storage_msa___type"]
        [::std::mem::align_of::<std___aligned_storage_msa___type>() - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union std_aligned_storage_type {
    pub __data: *mut ::std::os::raw::c_uchar,
    pub __align: std_aligned_storage_type__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_aligned_storage_type__bindgen_ty_1 {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_aligned_storage_type"]
        [::std::mem::size_of::<std_aligned_storage_type>() - 8usize];
    ["Alignment of std_aligned_storage_type"]
        [::std::mem::align_of::<std_aligned_storage_type>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___strictest_alignment {
    pub _address: u8,
}
pub type std_aligned_union___strictest = std___strictest_alignment;
pub type std_aligned_union_type = u8;
unsafe extern "C" {
    #[link_name = "\u{1}alignment_value"]
    pub static std_alignment_value: usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_decay {
    pub _address: u8,
}
pub type std_decay___remove_type = std_remove_reference;
pub type std_decay_type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___strip_reference_wrapper {
    pub _address: u8,
}
pub type std___strip_reference_wrapper___type<_Tp> = _Tp;
pub type std___decay_t = std_decay;
pub type std___decay_and_strip = std___strip_reference_wrapper;
pub type std___enable_if_t = u8;
pub type std__Require = std___enable_if_t;
pub type std___remove_cvref_t = std_remove_cv;
pub type std_conditional_type<_Iftrue> = _Iftrue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_common_type {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___do_common_type_impl {
    pub _address: u8,
}
pub type std___do_common_type_impl___cond_t<_Tp> = _Tp;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___do_common_type_impl"]
        [::std::mem::size_of::<std___do_common_type_impl>() - 1usize];
    ["Alignment of std___do_common_type_impl"]
        [::std::mem::align_of::<std___do_common_type_impl>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_common_type_open0_close0"]
        [::std::mem::size_of::<std_common_type>() - 1usize];
    ["Align of template specialization: std_common_type_open0_close0"]
        [::std::mem::align_of::<std_common_type>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___common_type_impl {
    pub _address: u8,
}
pub type std___common_type_impl_type = std_common_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___common_type_pack {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___common_type_fold {
    pub _address: u8,
}
pub type std___underlying_type_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_underlying_type {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___declval_protector {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_result_of {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___invoke_memfun_ref {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___invoke_memfun_ref"][::std::mem::size_of::<std___invoke_memfun_ref>() - 1usize];
    ["Alignment of std___invoke_memfun_ref"]
        [::std::mem::align_of::<std___invoke_memfun_ref>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___invoke_memfun_deref {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___invoke_memfun_deref"]
        [::std::mem::size_of::<std___invoke_memfun_deref>() - 1usize];
    ["Alignment of std___invoke_memfun_deref"]
        [::std::mem::align_of::<std___invoke_memfun_deref>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___invoke_memobj_ref {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___invoke_memobj_ref"][::std::mem::size_of::<std___invoke_memobj_ref>() - 1usize];
    ["Alignment of std___invoke_memobj_ref"]
        [::std::mem::align_of::<std___invoke_memobj_ref>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___invoke_memobj_deref {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___invoke_memobj_deref"]
        [::std::mem::size_of::<std___invoke_memobj_deref>() - 1usize];
    ["Alignment of std___invoke_memobj_deref"]
        [::std::mem::align_of::<std___invoke_memobj_deref>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___invoke_other {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___invoke_other"][::std::mem::size_of::<std___invoke_other>() - 1usize];
    ["Alignment of std___invoke_other"][::std::mem::align_of::<std___invoke_other>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_success {
    pub _address: u8,
}
pub type std___result_of_success___invoke_type<_Tag> = _Tag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memfun_ref_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___result_of_memfun_ref_impl"]
        [::std::mem::size_of::<std___result_of_memfun_ref_impl>() - 1usize];
    ["Alignment of std___result_of_memfun_ref_impl"]
        [::std::mem::align_of::<std___result_of_memfun_ref_impl>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memfun_ref {
    pub _address: u8,
}
pub type std___result_of_memfun_ref_type<_MemPtr> = _MemPtr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memfun_deref_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___result_of_memfun_deref_impl"]
        [::std::mem::size_of::<std___result_of_memfun_deref_impl>() - 1usize];
    ["Alignment of std___result_of_memfun_deref_impl"]
        [::std::mem::align_of::<std___result_of_memfun_deref_impl>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memfun_deref {
    pub _address: u8,
}
pub type std___result_of_memfun_deref_type<_MemPtr> = _MemPtr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memobj_ref_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___result_of_memobj_ref_impl"]
        [::std::mem::size_of::<std___result_of_memobj_ref_impl>() - 1usize];
    ["Alignment of std___result_of_memobj_ref_impl"]
        [::std::mem::align_of::<std___result_of_memobj_ref_impl>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memobj_ref {
    pub _address: u8,
}
pub type std___result_of_memobj_ref_type<_MemPtr> = _MemPtr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memobj_deref_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___result_of_memobj_deref_impl"]
        [::std::mem::size_of::<std___result_of_memobj_deref_impl>() - 1usize];
    ["Alignment of std___result_of_memobj_deref_impl"]
        [::std::mem::align_of::<std___result_of_memobj_deref_impl>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memobj_deref {
    pub _address: u8,
}
pub type std___result_of_memobj_deref_type<_MemPtr> = _MemPtr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memobj {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memfun {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___inv_unwrap {
    pub _address: u8,
}
pub type std___inv_unwrap_type<_Tp> = _Tp;
pub type std___result_of_impl_type = std___failure_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_other_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___result_of_other_impl"]
        [::std::mem::size_of::<std___result_of_other_impl>() - 1usize];
    ["Alignment of std___result_of_other_impl"]
        [::std::mem::align_of::<std___result_of_other_impl>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___invoke_result {
    pub _address: u8,
}
pub type std_aligned_storage_t = u8;
pub type std_aligned_union_t = u8;
pub type std_decay_t = std_decay;
pub type std_enable_if_t = u8;
pub type std_conditional_t = u8;
pub type std_common_type_t = std_common_type;
pub type std_underlying_type_t = std_underlying_type;
pub type std_result_of_t = std_result_of;
pub type std_void_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detector {
    pub _address: u8,
}
pub type std___detector_value_t = std_false_type;
pub type std___detector_type<_Default> = _Default;
pub type std___detected_or = std___detector;
pub type std___detected_or_t = std___detected_or;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_tuple_like_impl {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_tuple_like {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___swappable_details___do_is_swappable_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___swappable_details___do_is_swappable_impl"]
        [::std::mem::size_of::<std___swappable_details___do_is_swappable_impl>() - 1usize];
    ["Alignment of std___swappable_details___do_is_swappable_impl"]
        [::std::mem::align_of::<std___swappable_details___do_is_swappable_impl>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___swappable_details___do_is_nothrow_swappable_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___swappable_details___do_is_nothrow_swappable_impl"]
        [::std::mem::size_of::<std___swappable_details___do_is_nothrow_swappable_impl>() - 1usize];
    ["Alignment of std___swappable_details___do_is_nothrow_swappable_impl"]
        [::std::mem::align_of::<std___swappable_details___do_is_nothrow_swappable_impl>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_swappable_impl {
    pub _address: u8,
}
pub type std___is_swappable_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nothrow_swappable_impl {
    pub _address: u8,
}
pub type std___is_nothrow_swappable_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_swappable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nothrow_swappable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_swappable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_swappable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___swappable_with_details___do_is_swappable_with_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___swappable_with_details___do_is_swappable_with_impl"][::std::mem::size_of::<
        std___swappable_with_details___do_is_swappable_with_impl,
    >() - 1usize];
    ["Alignment of std___swappable_with_details___do_is_swappable_with_impl"][::std::mem::align_of::<
        std___swappable_with_details___do_is_swappable_with_impl,
    >() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___swappable_with_details___do_is_nothrow_swappable_with_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___swappable_with_details___do_is_nothrow_swappable_with_impl"][::std::mem::size_of::<
        std___swappable_with_details___do_is_nothrow_swappable_with_impl,
    >() - 1usize];
    ["Alignment of std___swappable_with_details___do_is_nothrow_swappable_with_impl"]
        [::std::mem::align_of::<std___swappable_with_details___do_is_nothrow_swappable_with_impl>(
        ) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_swappable_with_impl {
    pub _address: u8,
}
pub type std___is_swappable_with_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nothrow_swappable_with_impl {
    pub _address: u8,
}
pub type std___is_nothrow_swappable_with_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_swappable_with {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_swappable_with {
    pub _address: u8,
}
pub type std___is_invocable_impl___nothrow_type = std_false_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_invocable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___call_is_nothrow {
    pub _address: u8,
}
pub type std___call_is_nothrow_ = std___call_is_nothrow;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nothrow_invocable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___nonesuchbase {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___nonesuchbase"][::std::mem::size_of::<std___nonesuchbase>() - 1usize];
    ["Alignment of std___nonesuchbase"][::std::mem::align_of::<std___nonesuchbase>() - 1usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std___nonesuch {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___nonesuch"][::std::mem::size_of::<std___nonesuch>() - 1usize];
    ["Alignment of std___nonesuch"][::std::mem::align_of::<std___nonesuch>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_invoke_result {
    pub _address: u8,
}
pub type std_invoke_result_t = std_invoke_result;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_invocable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_invocable_r {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_invocable {
    pub _address: u8,
}
pub type std___is_nt_invocable_impl = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_invocable_r {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_has_unique_object_representations {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_aggregate {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___move_if_noexcept_cond {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_piecewise_construct_t {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_piecewise_construct_t"]
        [::std::mem::size_of::<std_piecewise_construct_t>() - 1usize];
    ["Alignment of std_piecewise_construct_t"]
        [::std::mem::align_of::<std_piecewise_construct_t>() - 1usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt19piecewise_construct"]
    pub static std_piecewise_construct: std_piecewise_construct_t;
}
#[repr(C)]
#[derive(Debug)]
pub struct std___pair_base {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_pair<_T1, _T2> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_T1>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_T2>>,
    pub first: _T1,
    pub second: _T2,
}
pub type std_pair_first_type<_T1> = _T1;
pub type std_pair_second_type<_T2> = _T2;
pub type std_pair__PCCP = u8;
pub type std_pair__PCCFP = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_input_iterator_tag {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_input_iterator_tag"][::std::mem::size_of::<std_input_iterator_tag>() - 1usize];
    ["Alignment of std_input_iterator_tag"]
        [::std::mem::align_of::<std_input_iterator_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_output_iterator_tag {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_output_iterator_tag"][::std::mem::size_of::<std_output_iterator_tag>() - 1usize];
    ["Alignment of std_output_iterator_tag"]
        [::std::mem::align_of::<std_output_iterator_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_forward_iterator_tag {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_forward_iterator_tag"]
        [::std::mem::size_of::<std_forward_iterator_tag>() - 1usize];
    ["Alignment of std_forward_iterator_tag"]
        [::std::mem::align_of::<std_forward_iterator_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_bidirectional_iterator_tag {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_bidirectional_iterator_tag"]
        [::std::mem::size_of::<std_bidirectional_iterator_tag>() - 1usize];
    ["Alignment of std_bidirectional_iterator_tag"]
        [::std::mem::align_of::<std_bidirectional_iterator_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_random_access_iterator_tag {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_random_access_iterator_tag"]
        [::std::mem::size_of::<std_random_access_iterator_tag>() - 1usize];
    ["Alignment of std_random_access_iterator_tag"]
        [::std::mem::align_of::<std_random_access_iterator_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_iterator {
    pub _address: u8,
}
pub type std_iterator_iterator_category<_Category> = _Category;
pub type std_iterator_value_type<_Tp> = _Tp;
pub type std_iterator_difference_type<_Distance> = _Distance;
pub type std_iterator_pointer<_Pointer> = _Pointer;
pub type std_iterator_reference<_Reference> = _Reference;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___iterator_traits {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_iterator_traits {
    pub _address: u8,
}
pub type std___iterator_category_t = std_iterator_traits;
pub type std__RequireInputIter = std___enable_if_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_random_access_iter {
    pub _address: u8,
}
pub type std___is_random_access_iter__Base = std_is_base_of;
pub const std___is_random_access_iter___value: std___is_random_access_iter__bindgen_ty_1 = 0;
pub type std___is_random_access_iter__bindgen_ty_1 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__List_iterator {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__List_const_iterator {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___undefined {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___replace_first_arg {
    pub _address: u8,
}
pub type std___replace_first_arg_t = std___replace_first_arg;
pub type std___make_not_void = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___ptr_traits_elem_1 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___ptr_traits_elem {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pointer_traits {
    pub _address: u8,
}
pub type std_pointer_traits___difference_type = __BindgenOpaqueArray<u8, 0usize>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pointer_traits___rebind {
    pub _address: u8,
}
pub type std_pointer_traits_pointer<_Ptr> = _Ptr;
pub type std_pointer_traits_difference_type = std___detected_or_t;
pub type std_pointer_traits_rebind = std_pointer_traits___rebind;
pub type std___ptr_rebind = std_pointer_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_reverse_iterator<_Iterator> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
    pub current: _Iterator,
}
pub type std_reverse_iterator___traits_type = std_iterator_traits;
pub type std_reverse_iterator_iterator_type<_Iterator> = _Iterator;
pub type std_reverse_iterator_pointer = std_reverse_iterator___traits_type;
pub type std_reverse_iterator_difference_type = std_reverse_iterator___traits_type;
pub type std_reverse_iterator_reference = std_reverse_iterator___traits_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_back_insert_iterator<_Container> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
    pub container: *mut _Container,
}
pub type std_back_insert_iterator_container_type<_Container> = _Container;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_front_insert_iterator<_Container> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
    pub container: *mut _Container,
}
pub type std_front_insert_iterator_container_type<_Container> = _Container;
#[repr(C)]
pub struct std_insert_iterator<_Container> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
    pub container: *mut _Container,
    pub iter: std_insert_iterator__Iter,
}
pub type std_insert_iterator__Iter = __BindgenOpaqueArray<u8, 0usize>;
pub type std_insert_iterator_container_type<_Container> = _Container;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail___variant__Never_valueless_alt {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_move_iterator<_Iterator> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
    pub _M_current: _Iterator,
}
pub type std_move_iterator___traits_type = std_iterator_traits;
pub type std_move_iterator___base_ref = std_move_iterator___traits_type;
pub type std_move_iterator_iterator_type<_Iterator> = _Iterator;
pub type std_move_iterator_iterator_category = std_move_iterator___traits_type;
pub type std_move_iterator_value_type = std_move_iterator___traits_type;
pub type std_move_iterator_difference_type = std_move_iterator___traits_type;
pub type std_move_iterator_pointer<_Iterator> = _Iterator;
pub type std_move_iterator_reference = u8;
pub type std___iter_key_t = std_remove_const_t;
pub type std___iter_val_t = std_iterator_traits;
pub type std___iter_to_alloc_t = std_pair<std_add_const_t, std___iter_val_t>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Deque_iterator {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___lc_rai {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___lc_rai_open0_std_random_access_iterator_tag_std_random_access_iterator_tag_close0"] [:: std :: mem :: size_of :: < std___lc_rai > () - 1usize] ;
    ["Align of template specialization: std___lc_rai_open0_std_random_access_iterator_tag_std_random_access_iterator_tag_close0"] [:: std :: mem :: align_of :: < std___lc_rai > () - 1usize] ;
};
#[repr(C)]
pub struct std_exception__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_exception {
    pub vtable_: *const std_exception__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_exception"][::std::mem::size_of::<std_exception>() - 8usize];
    ["Alignment of std_exception"][::std::mem::align_of::<std_exception>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt9exceptionD1Ev"]
    pub fn std_exception_exception_destructor(this: *mut std_exception);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt9exception4whatEv"]
    pub fn std_exception_what(this: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_alloc {
    pub _base: std_exception,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_bad_alloc"][::std::mem::size_of::<std_bad_alloc>() - 8usize];
    ["Alignment of std_bad_alloc"][::std::mem::align_of::<std_bad_alloc>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt9bad_allocD1Ev"]
    pub fn std_bad_alloc_bad_alloc_destructor(this: *mut std_bad_alloc);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt9bad_alloc4whatEv"]
    pub fn std_bad_alloc_what(this: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_array_new_length {
    pub _base: std_bad_alloc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_bad_array_new_length"]
        [::std::mem::size_of::<std_bad_array_new_length>() - 8usize];
    ["Alignment of std_bad_array_new_length"]
        [::std::mem::align_of::<std_bad_array_new_length>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt20bad_array_new_lengthD1Ev"]
    pub fn std_bad_array_new_length_bad_array_new_length_destructor(
        this: *mut std_bad_array_new_length,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt20bad_array_new_length4whatEv"]
    pub fn std_bad_array_new_length_what(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
pub type std_align_val_t = usize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_nothrow_t {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_nothrow_t"][::std::mem::size_of::<std_nothrow_t>() - 1usize];
    ["Alignment of std_nothrow_t"][::std::mem::align_of::<std_nothrow_t>() - 1usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt7nothrow"]
    pub static std_nothrow: std_nothrow_t;
}
pub type std_new_handler = ::std::option::Option<unsafe extern "C" fn()>;
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt15set_new_handlerPFvvE"]
    pub fn std_set_new_handler(arg1: std_new_handler) -> std_new_handler;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt15get_new_handlerv"]
    pub fn std_get_new_handler() -> std_new_handler;
}
pub type std___allocator_base = __gnu_cxx_new_allocator;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_void_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_void_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_allocator {
    pub _address: u8,
}
pub type std_allocator_value_type<_Tp> = _Tp;
pub type std_allocator_size_type = usize;
pub type std_allocator_difference_type = isize;
pub type std_allocator_pointer<_Tp> = *mut _Tp;
pub type std_allocator_const_pointer<_Tp> = *const _Tp;
pub type std_allocator_reference<_Tp> = *mut _Tp;
pub type std_allocator_const_reference<_Tp> = *const _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_rebind {
    pub _address: u8,
}
pub type std_allocator_rebind_other = std_allocator;
pub type std_allocator_propagate_on_container_move_assignment = std_true_type;
pub type std_allocator_is_always_equal = std_true_type;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___allocator_traits_base {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___allocator_traits_base___rebind {
    pub _address: u8,
}
pub type std___allocator_traits_base___pointer = __BindgenOpaqueArray<u8, 0usize>;
pub type std___allocator_traits_base___c_pointer = __BindgenOpaqueArray<u8, 0usize>;
pub type std___allocator_traits_base___v_pointer = __BindgenOpaqueArray<u8, 0usize>;
pub type std___allocator_traits_base___cv_pointer = __BindgenOpaqueArray<u8, 0usize>;
pub type std___allocator_traits_base___pocca = __BindgenOpaqueArray<u8, 0usize>;
pub type std___allocator_traits_base___pocma = __BindgenOpaqueArray<u8, 0usize>;
pub type std___allocator_traits_base___pocs = __BindgenOpaqueArray<u8, 0usize>;
pub type std___allocator_traits_base___equal = __BindgenOpaqueArray<u8, 0usize>;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___allocator_traits_base"]
        [::std::mem::size_of::<std___allocator_traits_base>() - 1usize];
    ["Alignment of std___allocator_traits_base"]
        [::std::mem::align_of::<std___allocator_traits_base>() - 1usize];
};
pub type std___alloc_rebind = std___allocator_traits_base;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_traits {
    pub _address: u8,
}
pub type std_allocator_traits_allocator_type<_Alloc> = _Alloc;
pub type std_allocator_traits_value_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_allocator_traits_pointer = std___detected_or_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_traits__Ptr {
    pub _address: u8,
}
pub type std_allocator_traits__Ptr_type = __BindgenOpaqueArray<u8, 0usize>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_traits__Diff {
    pub _address: u8,
}
pub type std_allocator_traits__Diff_type = std_pointer_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_traits__Size {
    pub _address: u8,
}
pub type std_allocator_traits_const_pointer = __BindgenOpaqueArray<u8, 0usize>;
pub type std_allocator_traits_void_pointer = std_allocator_traits__Ptr;
pub type std_allocator_traits_const_void_pointer = std_allocator_traits__Ptr;
pub type std_allocator_traits_difference_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_allocator_traits_size_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_allocator_traits_propagate_on_container_copy_assignment = std___detected_or_t;
pub type std_allocator_traits_propagate_on_container_move_assignment = std___detected_or_t;
pub type std_allocator_traits_propagate_on_container_swap = std___detected_or_t;
pub type std_allocator_traits_is_always_equal = std___detected_or_t;
pub type std_allocator_traits_rebind_alloc = std___alloc_rebind;
pub type std_allocator_traits_rebind_traits = std_allocator_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_traits___construct_helper {
    pub _address: u8,
}
pub type std_allocator_traits___construct_helper_type<_Alloc> = _Alloc;
pub type std_allocator_traits___has_construct = std_allocator_traits___construct_helper;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_traits_open0_std_allocator_open1_void_close1_close0"] [:: std :: mem :: size_of :: < std_allocator_traits > () - 1usize] ;
    ["Align of template specialization: std_allocator_traits_open0_std_allocator_open1_void_close1_close0"] [:: std :: mem :: align_of :: < std_allocator_traits > () - 1usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_alloc_insertable_impl {
    pub _base: std_false_type,
}
#[repr(C)]
pub struct std___is_copy_insertable {
    pub _address: u8,
}
#[repr(C)]
pub struct std___is_move_insertable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_allocator {
    pub _base: std_false_type,
}
pub type std__RequireAllocator = u8;
pub type std__RequireNotAllocator = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_bitwise_relocatable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct std__Temporary_buffer<_Tp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
    pub _M_original_len: std__Temporary_buffer_size_type,
    pub _M_len: std__Temporary_buffer_size_type,
    pub _M_buffer: std__Temporary_buffer_pointer<_Tp>,
}
pub type std__Temporary_buffer_value_type<_Tp> = _Tp;
pub type std__Temporary_buffer_pointer<_Tp> = *mut std__Temporary_buffer_value_type<_Tp>;
pub type std__Temporary_buffer_iterator<_Tp> = std__Temporary_buffer_pointer<_Tp>;
pub type std__Temporary_buffer_size_type = isize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_raw_storage_iterator<_OutputIterator> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_OutputIterator>>,
    pub _M_iter: _OutputIterator,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___erased_type {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___erased_type"][::std::mem::size_of::<std___erased_type>() - 1usize];
    ["Alignment of std___erased_type"][::std::mem::align_of::<std___erased_type>() - 1usize];
};
pub type std___is_erased_or_convertible = std___or_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_arg_t {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_allocator_arg_t"][::std::mem::size_of::<std_allocator_arg_t>() - 1usize];
    ["Alignment of std_allocator_arg_t"][::std::mem::align_of::<std_allocator_arg_t>() - 1usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt13allocator_arg"]
    pub static std_allocator_arg: std_allocator_arg_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___uses_allocator_helper {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_uses_allocator {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___uses_alloc_base {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___uses_alloc_base"][::std::mem::size_of::<std___uses_alloc_base>() - 1usize];
    ["Alignment of std___uses_alloc_base"]
        [::std::mem::align_of::<std___uses_alloc_base>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___uses_alloc0 {
    pub _M_a: std___uses_alloc0__Sink,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___uses_alloc0__Sink {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___uses_alloc0__Sink"][::std::mem::size_of::<std___uses_alloc0__Sink>() - 1usize];
    ["Alignment of std___uses_alloc0__Sink"]
        [::std::mem::align_of::<std___uses_alloc0__Sink>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___uses_alloc0"][::std::mem::size_of::<std___uses_alloc0>() - 1usize];
    ["Alignment of std___uses_alloc0"][::std::mem::align_of::<std___uses_alloc0>() - 1usize];
    ["Offset of field: std___uses_alloc0::_M_a"]
        [::std::mem::offset_of!(std___uses_alloc0, _M_a) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___uses_alloc1<_Alloc> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
    pub _M_a: *const _Alloc,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___uses_alloc2<_Alloc> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
    pub _M_a: *const _Alloc,
}
pub type std___uses_alloc_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_uses_allocator_predicate {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_uses_allocator_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nothrow_uses_allocator_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_initializer_list<_E> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_E>>,
    pub _M_array: std_initializer_list_iterator<_E>,
    pub _M_len: std_initializer_list_size_type,
}
pub type std_initializer_list_value_type<_E> = _E;
pub type std_initializer_list_reference<_E> = *const _E;
pub type std_initializer_list_const_reference<_E> = *const _E;
pub type std_initializer_list_size_type = usize;
pub type std_initializer_list_iterator<_E> = *const _E;
pub type std_initializer_list_const_iterator<_E> = *const _E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_tuple_size {
    pub _address: u8,
}
pub type std___enable_if_has_tuple_size<_Tp> = _Tp;
pub type std___tuple_element_t = u8;
pub type std_tuple_element_t = u8;
pub type std__Build_index_tuple__IdxTuple = u8;
pub type std__Build_index_tuple___type = u8;
pub type std_integer_sequence_value_type<_Tp> = _Tp;
pub type std_make_integer_sequence = u8;
pub type std_index_sequence = u8;
pub type std_make_index_sequence = std_make_integer_sequence;
pub type std_index_sequence_for = std_make_index_sequence;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_in_place_t {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_in_place_t"][::std::mem::size_of::<std_in_place_t>() - 1usize];
    ["Alignment of std_in_place_t"][::std::mem::align_of::<std_in_place_t>() - 1usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt8in_place"]
    pub static std_in_place: std_in_place_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_in_place_type_t {
    pub _address: u8,
}
pub type std___is_in_place_type = std_bool_constant;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_valarray {
    pub _address: u8,
}
pub type std___array_traits__Type<_Tp> = *mut _Tp;
pub type std___array_traits__Is_swappable = std___is_swappable;
pub type std___array_traits__Is_nothrow_swappable = std___is_nothrow_swappable;
pub type std_array_value_type<_Tp> = _Tp;
pub type std_array_pointer<_Tp> = *mut std_array_value_type<_Tp>;
pub type std_array_const_pointer<_Tp> = *const std_array_value_type<_Tp>;
pub type std_array_reference<_Tp> = *mut std_array_value_type<_Tp>;
pub type std_array_const_reference<_Tp> = *const std_array_value_type<_Tp>;
pub type std_array_iterator<_Tp> = *mut std_array_value_type<_Tp>;
pub type std_array_const_iterator<_Tp> = *const std_array_value_type<_Tp>;
pub type std_array_size_type = usize;
pub type std_array_difference_type = isize;
pub type std_array_reverse_iterator<_Tp> = std_reverse_iterator<std_array_iterator<_Tp>>;
pub type std_array_const_reverse_iterator<_Tp> =
    std_reverse_iterator<std_array_const_iterator<_Tp>>;
pub type std_array__AT_Type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_empty_non_tuple {
    pub _address: u8,
}
pub type std___empty_not_final = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_tuple {
    pub _address: u8,
}
pub type std_tuple__Inherited = u8;
pub type std_tuple__TCC = u8;
pub type std_tuple__ImplicitDefaultCtor = std___enable_if_t;
pub type std_tuple__ExplicitDefaultCtor = std___enable_if_t;
pub type std_tuple__ImplicitCtor = std___enable_if_t;
pub type std_tuple__ExplicitCtor = std___enable_if_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_tuple__UseOtherCtor {
    pub _base: std_false_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_tuple_open0_close0"]
        [::std::mem::size_of::<std_tuple>() - 1usize];
    ["Align of template specialization: std_tuple_open0_close0"]
        [::std::mem::align_of::<std_tuple>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___do_make_tuple {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___make_tuple {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___combine_tuples {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___combine_tuples_open0_close0"]
        [::std::mem::size_of::<std___combine_tuples>() - 1usize];
    ["Align of template specialization: std___combine_tuples_open0_close0"]
        [::std::mem::align_of::<std___combine_tuples>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___tuple_cat_result {
    pub _address: u8,
}
pub type std___tuple_cat_result___type = std___combine_tuples;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___make_1st_indices {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_1st_indices_open0_close0"]
        [::std::mem::size_of::<std___make_1st_indices>() - 1usize];
    ["Align of template specialization: std___make_1st_indices_open0_close0"]
        [::std::mem::align_of::<std___make_1st_indices>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___tuple_concater {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Swallow_assign {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Swallow_assign"][::std::mem::size_of::<std__Swallow_assign>() - 1usize];
    ["Alignment of std__Swallow_assign"][::std::mem::align_of::<std__Swallow_assign>() - 1usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt6ignore"]
    pub static std_ignore: std__Swallow_assign;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_unary_function {
    pub _address: u8,
}
pub type std_unary_function_argument_type<_Arg> = _Arg;
pub type std_unary_function_result_type<_Result> = _Result;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_binary_function {
    pub _address: u8,
}
pub type std_binary_function_first_argument_type<_Arg1> = _Arg1;
pub type std_binary_function_second_argument_type<_Arg2> = _Arg2;
pub type std_binary_function_result_type<_Result> = _Result;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_transparent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_plus {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_minus {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_multiplies {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_divides {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_modulus {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_negate {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_plus_open0_void_close0"]
        [::std::mem::size_of::<std_plus>() - 1usize];
    ["Align of template specialization: std_plus_open0_void_close0"]
        [::std::mem::align_of::<std_plus>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_minus_open0_void_close0"]
        [::std::mem::size_of::<std_minus>() - 1usize];
    ["Align of template specialization: std_minus_open0_void_close0"]
        [::std::mem::align_of::<std_minus>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_multiplies_open0_void_close0"]
        [::std::mem::size_of::<std_multiplies>() - 1usize];
    ["Align of template specialization: std_multiplies_open0_void_close0"]
        [::std::mem::align_of::<std_multiplies>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_divides_open0_void_close0"]
        [::std::mem::size_of::<std_divides>() - 1usize];
    ["Align of template specialization: std_divides_open0_void_close0"]
        [::std::mem::align_of::<std_divides>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_modulus_open0_void_close0"]
        [::std::mem::size_of::<std_modulus>() - 1usize];
    ["Align of template specialization: std_modulus_open0_void_close0"]
        [::std::mem::align_of::<std_modulus>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_negate_open0_void_close0"]
        [::std::mem::size_of::<std_negate>() - 1usize];
    ["Align of template specialization: std_negate_open0_void_close0"]
        [::std::mem::align_of::<std_negate>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_equal_to {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_not_equal_to {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_greater {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_less {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_greater_equal {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_less_equal {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_equal_to_open0_void_close0"]
        [::std::mem::size_of::<std_equal_to>() - 1usize];
    ["Align of template specialization: std_equal_to_open0_void_close0"]
        [::std::mem::align_of::<std_equal_to>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_not_equal_to_open0_void_close0"]
        [::std::mem::size_of::<std_not_equal_to>() - 1usize];
    ["Align of template specialization: std_not_equal_to_open0_void_close0"]
        [::std::mem::align_of::<std_not_equal_to>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_greater_open0_void_close0"]
        [::std::mem::size_of::<std_greater>() - 1usize];
    ["Align of template specialization: std_greater_open0_void_close0"]
        [::std::mem::align_of::<std_greater>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_less_open0_void_close0"]
        [::std::mem::size_of::<std_less>() - 1usize];
    ["Align of template specialization: std_less_open0_void_close0"]
        [::std::mem::align_of::<std_less>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_greater_equal_open0_void_close0"]
        [::std::mem::size_of::<std_greater_equal>() - 1usize];
    ["Align of template specialization: std_greater_equal_open0_void_close0"]
        [::std::mem::align_of::<std_greater_equal>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_less_equal_open0_void_close0"]
        [::std::mem::size_of::<std_less_equal>() - 1usize];
    ["Align of template specialization: std_less_equal_open0_void_close0"]
        [::std::mem::align_of::<std_less_equal>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_logical_and {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_logical_or {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_logical_not {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_logical_and_open0_void_close0"]
        [::std::mem::size_of::<std_logical_and>() - 1usize];
    ["Align of template specialization: std_logical_and_open0_void_close0"]
        [::std::mem::align_of::<std_logical_and>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_logical_or_open0_void_close0"]
        [::std::mem::size_of::<std_logical_or>() - 1usize];
    ["Align of template specialization: std_logical_or_open0_void_close0"]
        [::std::mem::align_of::<std_logical_or>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_logical_not_open0_void_close0"]
        [::std::mem::size_of::<std_logical_not>() - 1usize];
    ["Align of template specialization: std_logical_not_open0_void_close0"]
        [::std::mem::align_of::<std_logical_not>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_bit_and {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_bit_or {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_bit_xor {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_bit_not {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_bit_and_open0_void_close0"]
        [::std::mem::size_of::<std_bit_and>() - 1usize];
    ["Align of template specialization: std_bit_and_open0_void_close0"]
        [::std::mem::align_of::<std_bit_and>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_bit_or_open0_void_close0"]
        [::std::mem::size_of::<std_bit_or>() - 1usize];
    ["Align of template specialization: std_bit_or_open0_void_close0"]
        [::std::mem::align_of::<std_bit_or>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_bit_xor_open0_void_close0"]
        [::std::mem::size_of::<std_bit_xor>() - 1usize];
    ["Align of template specialization: std_bit_xor_open0_void_close0"]
        [::std::mem::align_of::<std_bit_xor>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_bit_not_open0_void_close0"]
        [::std::mem::size_of::<std_bit_not>() - 1usize];
    ["Align of template specialization: std_bit_not_open0_void_close0"]
        [::std::mem::align_of::<std_bit_not>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_unary_negate<_Predicate> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
    pub _M_pred: _Predicate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_binary_negate<_Predicate> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
    pub _M_pred: _Predicate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pointer_to_unary_function<_Arg, _Result> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Result>>,
    pub _M_ptr: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Result>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pointer_to_binary_function<_Arg1, _Arg2, _Result> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg1>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg2>>,
    pub _phantom_2: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Result>>,
    pub _M_ptr: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg1, arg2: _Arg2) -> _Result>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Identity {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Select1st {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Select2nd {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_mem_fun_t<_Ret> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_const_mem_fun_t<_Ret> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_mem_fun_ref_t<_Ret> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_const_mem_fun_ref_t<_Ret> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_mem_fun1_t<_Ret, _Arg> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
    pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_const_mem_fun1_t<_Ret, _Arg> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
    pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_mem_fun1_ref_t<_Ret, _Arg> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
    pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_const_mem_fun1_ref_t<_Ret, _Arg> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
    pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___has_is_transparent {
    pub _address: u8,
}
pub type std___has_is_transparent_t = std___has_is_transparent;
#[repr(C)]
pub struct std_binder1st<_Operation> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Operation>>,
    pub op: _Operation,
    pub value: __BindgenOpaqueArray<u8, 0usize>,
}
#[repr(C)]
pub struct std_binder2nd<_Operation> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Operation>>,
    pub op: _Operation,
    pub value: __BindgenOpaqueArray<u8, 0usize>,
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt11_Hash_bytesPKvmm"]
    pub fn std__Hash_bytes(
        __ptr: *const ::std::os::raw::c_void,
        __len: usize,
        __seed: usize,
    ) -> usize;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt15_Fnv_hash_bytesPKvmm"]
    pub fn std__Fnv_hash_bytes(
        __ptr: *const ::std::os::raw::c_void,
        __len: usize,
        __seed: usize,
    ) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___hash_base {
    pub _address: u8,
}
pub type std___hash_base_result_type<_Result> = _Result;
pub type std___hash_base_argument_type<_Arg> = _Arg;
#[repr(C)]
#[derive(Debug)]
pub struct std___poison_hash {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_hash {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_bool__close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_bool__close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_char_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_char_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_signed_char_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_signed_char_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_char16_t_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_char16_t_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_char32_t_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_char32_t_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_short_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_short_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_int_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_int_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_long_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_long_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_long_long_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_long_long_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_unsigned_short_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_unsigned_short_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_unsigned_int_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_unsigned_int_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_unsigned_long_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_unsigned_long_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_unsigned_long_long_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_unsigned_long_long_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Hash_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Hash_impl"][::std::mem::size_of::<std__Hash_impl>() - 1usize];
    ["Alignment of std__Hash_impl"][::std::mem::align_of::<std__Hash_impl>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Fnv_hash_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Fnv_hash_impl"][::std::mem::size_of::<std__Fnv_hash_impl>() - 1usize];
    ["Alignment of std__Fnv_hash_impl"][::std::mem::align_of::<std__Fnv_hash_impl>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_float_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_float_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_double_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_double_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_long_double_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_long_double_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_nullptr_t_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_nullptr_t_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_fast_hash {
    pub _base: std_true_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_fast_hash_open0_std_hash_open1_long_double_close1_close0"] [:: std :: mem :: size_of :: < std___is_fast_hash > () - 1usize] ;
    ["Align of template specialization: std___is_fast_hash_open0_std_hash_open1_long_double_close1_close0"] [:: std :: mem :: align_of :: < std___is_fast_hash > () - 1usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_default_delete {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___uniq_ptr_impl {
    pub _M_t: std_tuple,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___uniq_ptr_impl__Ptr {
    pub _address: u8,
}
pub type std___uniq_ptr_impl__Ptr_type<_Up> = *mut _Up;
pub type std___uniq_ptr_impl__DeleterConstraint = u8;
pub type std___uniq_ptr_impl_pointer = std___uniq_ptr_impl__Ptr;
#[repr(C)]
#[derive(Debug)]
pub struct std_unique_ptr {
    pub _M_t: u8,
}
pub type std_unique_ptr__DeleterConstraint = std___uniq_ptr_impl;
pub type std_unique_ptr_pointer = std___uniq_ptr_impl;
pub type std_unique_ptr_element_type<_Tp> = _Tp;
pub type std_unique_ptr_deleter_type<_Dp> = _Dp;
pub type std_unique_ptr___safe_conversion_up = std___and_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__MakeUniq {
    pub _address: u8,
}
pub type std__MakeUniq___single_object = std_unique_ptr;
pub type std_string = std_basic_string<::std::os::raw::c_char>;
pub type std_wstring = std_basic_string<u32>;
pub type std_u16string = std_basic_string<u16>;
pub type std_u32string = std_basic_string<u32>;
pub type std_streamoff = ::std::os::raw::c_long;
pub type std_streamsize = isize;
#[repr(C)]
#[derive(Debug)]
pub struct std_fpos<_StateT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_StateT>>,
    pub _M_off: std_streamoff,
    pub _M_state: _StateT,
}
pub type std_streampos = std_fpos<__mbstate_t>;
pub type std_wstreampos = std_fpos<__mbstate_t>;
pub type std_u16streampos = std_fpos<__mbstate_t>;
pub type std_u32streampos = std_fpos<__mbstate_t>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_filebuf {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_ifstream {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_ofstream {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_fstream {
    pub _address: u8,
}
pub type std_ios = std_basic_ios<::std::os::raw::c_char>;
pub type std_streambuf = std_basic_streambuf<::std::os::raw::c_char>;
pub type std_istream = std_basic_istream<::std::os::raw::c_char>;
pub type std_ostream = std_basic_ostream<::std::os::raw::c_char>;
pub type std_iostream = std_basic_iostream<::std::os::raw::c_char>;
pub type std_stringbuf = std_basic_stringbuf<::std::os::raw::c_char>;
pub type std_istringstream = std_basic_istringstream<::std::os::raw::c_char>;
pub type std_ostringstream = std_basic_ostringstream<::std::os::raw::c_char>;
pub type std_stringstream = std_basic_stringstream<::std::os::raw::c_char>;
pub type std_filebuf = std_basic_filebuf;
pub type std_ifstream = std_basic_ifstream;
pub type std_ofstream = std_basic_ofstream;
pub type std_fstream = std_basic_fstream;
pub type std_wios = std_basic_ios<u32>;
pub type std_wstreambuf = std_basic_streambuf<u32>;
pub type std_wistream = std_basic_istream<u32>;
pub type std_wostream = std_basic_ostream<u32>;
pub type std_wiostream = std_basic_iostream<u32>;
pub type std_wstringbuf = std_basic_stringbuf<u32>;
pub type std_wistringstream = std_basic_istringstream<u32>;
pub type std_wostringstream = std_basic_ostringstream<u32>;
pub type std_wstringstream = std_basic_stringstream<u32>;
pub type std_wfilebuf = std_basic_filebuf;
pub type std_wifstream = std_basic_ifstream;
pub type std_wofstream = std_basic_ofstream;
pub type std_wfstream = std_basic_fstream;
#[repr(C)]
pub struct std_type_info__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_type_info {
    pub vtable_: *const std_type_info__bindgen_vtable,
    pub __name: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_type_info"][::std::mem::size_of::<std_type_info>() - 16usize];
    ["Alignment of std_type_info"][::std::mem::align_of::<std_type_info>() - 8usize];
    ["Offset of field: std_type_info::__name"]
        [::std::mem::offset_of!(std_type_info, __name) - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt9type_infoD1Ev"]
    pub fn std_type_info_type_info_destructor(this: *mut std_type_info);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt9type_info14__is_pointer_pEv"]
    pub fn std_type_info___is_pointer_p(this: *mut ::std::os::raw::c_void) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt9type_info15__is_function_pEv"]
    pub fn std_type_info___is_function_p(this: *mut ::std::os::raw::c_void) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt9type_info10__do_catchEPKS_PPvj"]
    pub fn std_type_info___do_catch(
        this: *mut ::std::os::raw::c_void,
        __thr_type: *const std_type_info,
        __thr_obj: *mut *mut ::std::os::raw::c_void,
        __outer: ::std::os::raw::c_uint,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv"]
    pub fn std_type_info___do_upcast(
        this: *mut ::std::os::raw::c_void,
        __target: *const __cxxabiv1___class_type_info,
        __obj_ptr: *mut *mut ::std::os::raw::c_void,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_cast {
    pub _base: std_exception,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_bad_cast"][::std::mem::size_of::<std_bad_cast>() - 8usize];
    ["Alignment of std_bad_cast"][::std::mem::align_of::<std_bad_cast>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8bad_castD1Ev"]
    pub fn std_bad_cast_bad_cast_destructor(this: *mut std_bad_cast);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt8bad_cast4whatEv"]
    pub fn std_bad_cast_what(this: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_typeid {
    pub _base: std_exception,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_bad_typeid"][::std::mem::size_of::<std_bad_typeid>() - 8usize];
    ["Alignment of std_bad_typeid"][::std::mem::align_of::<std_bad_typeid>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10bad_typeidD1Ev"]
    pub fn std_bad_typeid_bad_typeid_destructor(this: *mut std_bad_typeid);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt10bad_typeid4whatEv"]
    pub fn std_bad_typeid_what(this: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug)]
pub struct std___allocated_ptr<_Alloc> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
    pub _M_alloc: *mut _Alloc,
    pub _M_ptr: std___allocated_ptr_pointer,
}
pub type std___allocated_ptr_pointer = std_allocator_traits;
pub type std___allocated_ptr_value_type = std_allocator_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Maybe_unary_or_binary_function {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Mem_fn_traits {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Mem_fn_traits_base {
    pub _address: u8,
}
pub type std__Mem_fn_traits_base___result_type<_Res> = _Res;
pub type std__Mem_fn_traits_base___maybe_type = std__Maybe_unary_or_binary_function;
pub type std__Mem_fn_traits_base___arity = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Maybe_get_result_type {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Weak_result_type_impl {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Weak_result_type {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Refwrap_base_arg1 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Refwrap_base_arg2 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Reference_wrapper_base {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_reference_wrapper<_Tp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
    pub _M_data: *mut _Tp,
}
pub type std_reference_wrapper___not_same = u8;
pub type std_reference_wrapper_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_exception {
    pub _base: std_exception,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_bad_exception"][::std::mem::size_of::<std_bad_exception>() - 8usize];
    ["Alignment of std_bad_exception"][::std::mem::align_of::<std_bad_exception>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt13bad_exceptionD1Ev"]
    pub fn std_bad_exception_bad_exception_destructor(this: *mut std_bad_exception);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt13bad_exception4whatEv"]
    pub fn std_bad_exception_what(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
pub type std_terminate_handler = ::std::option::Option<unsafe extern "C" fn()>;
pub type std_unexpected_handler = ::std::option::Option<unsafe extern "C" fn()>;
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt13set_terminatePFvvE"]
    pub fn std_set_terminate(arg1: std_terminate_handler) -> std_terminate_handler;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt13get_terminatev"]
    pub fn std_get_terminate() -> std_terminate_handler;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt9terminatev"]
    pub fn std_terminate() -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt14set_unexpectedPFvvE"]
    pub fn std_set_unexpected(arg1: std_unexpected_handler) -> std_unexpected_handler;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt14get_unexpectedv"]
    pub fn std_get_unexpected() -> std_unexpected_handler;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt10unexpectedv"]
    pub fn std_unexpected() -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt18uncaught_exceptionv"]
    pub fn std_uncaught_exception() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt19uncaught_exceptionsv"]
    pub fn std_uncaught_exceptions() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug)]
pub struct std___exception_ptr_exception_ptr {
    pub _M_exception_object: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___exception_ptr_exception_ptr"]
        [::std::mem::size_of::<std___exception_ptr_exception_ptr>() - 8usize];
    ["Alignment of std___exception_ptr_exception_ptr"]
        [::std::mem::align_of::<std___exception_ptr_exception_ptr>() - 8usize];
    ["Offset of field: std___exception_ptr_exception_ptr::_M_exception_object"]
        [::std::mem::offset_of!(std___exception_ptr_exception_ptr, _M_exception_object) - 0usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv"]
    pub fn std___exception_ptr_exception_ptr___cxa_exception_type(
        this: *const std___exception_ptr_exception_ptr,
    ) -> *const std_type_info;
}
impl std___exception_ptr_exception_ptr {
    #[inline]
    pub unsafe fn __cxa_exception_type(&self) -> *const std_type_info {
        std___exception_ptr_exception_ptr___cxa_exception_type(self)
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt17current_exceptionv"]
    pub fn std_current_exception() -> std___exception_ptr_exception_ptr;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE"]
    pub fn std_rethrow_exception(arg1: std___exception_ptr_exception_ptr) -> !;
}
#[repr(C)]
pub struct std_nested_exception__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_nested_exception {
    pub vtable_: *const std_nested_exception__bindgen_vtable,
    pub _M_ptr: std___exception_ptr_exception_ptr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_nested_exception"][::std::mem::size_of::<std_nested_exception>() - 16usize];
    ["Alignment of std_nested_exception"][::std::mem::align_of::<std_nested_exception>() - 8usize];
    ["Offset of field: std_nested_exception::_M_ptr"]
        [::std::mem::offset_of!(std_nested_exception, _M_ptr) - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt16nested_exceptionD1Ev"]
    pub fn std_nested_exception_nested_exception_destructor(this: *mut std_nested_exception);
}
#[repr(C)]
#[derive(Debug)]
pub struct std__Nested_exception<_Except> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Except>>,
    pub _base: _Except,
    pub _base_1: std_nested_exception,
}
pub type std___rethrow_if_nested_cond = u8;
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_weak_ptr {
    pub _base: std_exception,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_bad_weak_ptr"][::std::mem::size_of::<std_bad_weak_ptr>() - 8usize];
    ["Alignment of std_bad_weak_ptr"][::std::mem::align_of::<std_bad_weak_ptr>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt12bad_weak_ptr4whatEv"]
    pub fn std_bad_weak_ptr_what(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12bad_weak_ptrD1Ev"]
    pub fn std_bad_weak_ptr_bad_weak_ptr_destructor(this: *mut std_bad_weak_ptr);
}
pub const std__Mutex_base__S_need_barriers: std__Mutex_base__bindgen_ty_1 = 0;
pub type std__Mutex_base__bindgen_ty_1 = i32;
unsafe extern "C" {
    #[link_name = "\u{1}_M_add_ref_lock_nothrow"]
    pub fn std__Sp_counted_base__M_add_ref_lock_nothrow(this: *mut u8) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_owner_less {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Sp_counted_deleter__Impl<_Ptr> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ptr>>,
    pub _M_ptr: _Ptr,
}
pub type std__Sp_counted_deleter__Impl__Del_base = u8;
pub type std__Sp_counted_deleter__Impl__Alloc_base = u8;
pub type std__Sp_counted_deleter___allocator_type = std___alloc_rebind;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Sp_make_shared_tag {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Sp_make_shared_tag"][::std::mem::size_of::<std__Sp_make_shared_tag>() - 1usize];
    ["Alignment of std__Sp_make_shared_tag"]
        [::std::mem::align_of::<std__Sp_make_shared_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Sp_alloc_shared_tag<_Alloc> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
    pub _M_a: *const _Alloc,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Sp_counted_ptr_inplace__Impl {
    pub _M_storage: __gnu_cxx___aligned_buffer,
}
pub type std__Sp_counted_ptr_inplace__Impl__A_base = u8;
pub type std__Sp_counted_ptr_inplace___allocator_type = std___alloc_rebind;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___sp_array_delete {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___sp_array_delete"][::std::mem::size_of::<std___sp_array_delete>() - 1usize];
    ["Alignment of std___sp_array_delete"]
        [::std::mem::align_of::<std___sp_array_delete>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___shared_count___not_alloc_shared_tag {
    pub _address: u8,
}
pub type std___shared_count___not_alloc_shared_tag_type = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___sp_compatible_with {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___sp_is_constructible_arr {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___sp_is_constructible {
    pub _address: u8,
}
pub type std___shared_ptr_access_element_type<_Tp> = _Tp;
pub type std___shared_ptr_element_type = std_remove_extent;
pub type std___shared_ptr__SafeConv = u8;
pub type std___shared_ptr__Compatible = u8;
pub type std___shared_ptr__Assignable = std___shared_ptr__Compatible;
pub type std___shared_ptr__UniqCompatible = std___enable_if_t;
pub type std___shared_ptr__UniqAssignable = std___shared_ptr__UniqCompatible;
pub type std___shared_ptr_weak_type = u8;
pub type std___shared_ptr___esft_base_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___shared_ptr___has_esft_base {
    pub _base: std_false_type,
}
pub type std___weak_ptr__Compatible = u8;
pub type std___weak_ptr__Assignable = std___weak_ptr__Compatible;
pub type std___weak_ptr_element_type = std_remove_extent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Sp_owner_less {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std__Sp_owner_less_open0_void_void_close0"]
        [::std::mem::size_of::<std__Sp_owner_less>() - 1usize];
    ["Align of template specialization: std__Sp_owner_less_open0_void_void_close0"]
        [::std::mem::align_of::<std__Sp_owner_less>() - 1usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_shared_ptr {
    pub _address: u8,
}
pub type std_shared_ptr__Constructible = u8;
pub type std_shared_ptr__Assignable = u8;
pub type std_shared_ptr_element_type = u8;
pub type std_shared_ptr_weak_type = std_weak_ptr;
#[repr(C)]
#[derive(Debug)]
pub struct std_weak_ptr {
    pub _address: u8,
}
pub type std_weak_ptr__Constructible = u8;
pub type std_weak_ptr__Assignable = u8;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_owner_less_open0_void_close0"]
        [::std::mem::size_of::<std_owner_less>() - 1usize];
    ["Align of template specialization: std_owner_less_open0_void_close0"]
        [::std::mem::align_of::<std_owner_less>() - 1usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_enable_shared_from_this {
    pub _M_weak_this: std_weak_ptr,
}
pub const std_memory_order_memory_order_relaxed: std_memory_order = 0;
pub const std_memory_order_memory_order_consume: std_memory_order = 1;
pub const std_memory_order_memory_order_acquire: std_memory_order = 2;
pub const std_memory_order_memory_order_release: std_memory_order = 3;
pub const std_memory_order_memory_order_acq_rel: std_memory_order = 4;
pub const std_memory_order_memory_order_seq_cst: std_memory_order = 5;
pub type std_memory_order = ::std::os::raw::c_uint;
pub const std___memory_order_modifier___memory_order_mask: std___memory_order_modifier = 65535;
pub const std___memory_order_modifier___memory_order_modifier_mask: std___memory_order_modifier =
    4294901760;
pub const std___memory_order_modifier___memory_order_hle_acquire: std___memory_order_modifier =
    65536;
pub const std___memory_order_modifier___memory_order_hle_release: std___memory_order_modifier =
    131072;
pub type std___memory_order_modifier = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_atomic {
    pub _address: u8,
}
pub type std___atomic_flag_data_type = bool;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___atomic_flag_base {
    pub _M_i: std___atomic_flag_data_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___atomic_flag_base"][::std::mem::size_of::<std___atomic_flag_base>() - 1usize];
    ["Alignment of std___atomic_flag_base"]
        [::std::mem::align_of::<std___atomic_flag_base>() - 1usize];
    ["Offset of field: std___atomic_flag_base::_M_i"]
        [::std::mem::offset_of!(std___atomic_flag_base, _M_i) - 0usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_atomic_flag {
    pub _base: std___atomic_flag_base,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_atomic_flag"][::std::mem::size_of::<std_atomic_flag>() - 1usize];
    ["Alignment of std_atomic_flag"][::std::mem::align_of::<std_atomic_flag>() - 1usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std___atomic_base<_ITp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_ITp>>,
    pub _M_i: std___atomic_base___int_type<_ITp>,
}
pub type std___atomic_base_value_type<_ITp> = _ITp;
pub type std___atomic_base_difference_type<_ITp> = std___atomic_base_value_type<_ITp>;
pub type std___atomic_base___int_type<_ITp> = _ITp;
#[repr(C)]
#[derive(Debug)]
pub struct std__Sp_locker {
    pub _M_key1: ::std::os::raw::c_uchar,
    pub _M_key2: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Sp_locker"][::std::mem::size_of::<std__Sp_locker>() - 2usize];
    ["Alignment of std__Sp_locker"][::std::mem::align_of::<std__Sp_locker>() - 1usize];
    ["Offset of field: std__Sp_locker::_M_key1"]
        [::std::mem::offset_of!(std__Sp_locker, _M_key1) - 0usize];
    ["Offset of field: std__Sp_locker::_M_key2"]
        [::std::mem::offset_of!(std__Sp_locker, _M_key2) - 1usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10_Sp_lockerC1EPKv"]
    pub fn std__Sp_locker__Sp_locker(
        this: *mut std__Sp_locker,
        arg1: *const ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10_Sp_lockerC1EPKvS1_"]
    pub fn std__Sp_locker__Sp_locker1(
        this: *mut std__Sp_locker,
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10_Sp_lockerD1Ev"]
    pub fn std__Sp_locker__Sp_locker_destructor(this: *mut std__Sp_locker);
}
impl std__Sp_locker {
    #[inline]
    pub unsafe fn new(arg1: *const ::std::os::raw::c_void) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std__Sp_locker__Sp_locker(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std__Sp_locker__Sp_locker1(__bindgen_tmp.as_mut_ptr(), arg1, arg2);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        std__Sp_locker__Sp_locker_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_auto_ptr_ref<_Tp1> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp1>>,
    pub _M_ptr: *mut _Tp1,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_auto_ptr<_Tp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
    pub _M_ptr: *mut _Tp,
}
pub type std_auto_ptr_element_type<_Tp> = _Tp;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_auto_ptr_open0_void_close0"]
        [::std::mem::size_of::<std_auto_ptr<::std::os::raw::c_void>>() - 1usize];
    ["Align of template specialization: std_auto_ptr_open0_void_close0"]
        [::std::mem::align_of::<std_auto_ptr<::std::os::raw::c_void>>() - 1usize];
};
pub const std_pointer_safety_relaxed: std_pointer_safety = 0;
pub const std_pointer_safety_preferred: std_pointer_safety = 1;
pub const std_pointer_safety_strict: std_pointer_safety = 2;
pub type std_pointer_safety = ::std::os::raw::c_int;
#[repr(C)]
pub struct std__Node_handle_common<_NodeAlloc> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_NodeAlloc>>,
    pub _M_ptr: std__Node_handle_common__AllocTraits,
    pub _M_alloc: std__Node_handle_common__Optional_alloc<_NodeAlloc>,
}
pub type std__Node_handle_common__AllocTraits = std_allocator_traits;
pub type std__Node_handle_common_allocator_type = std___alloc_rebind;
#[repr(C)]
#[repr(align(1))]
pub struct std__Node_handle_common__Optional_alloc<_NodeAlloc> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_NodeAlloc>>,
    pub _M_empty: __BindgenUnionField<std__Node_handle_common__Optional_alloc__Empty>,
    pub _M_alloc: __BindgenUnionField<_NodeAlloc>,
    pub bindgen_union_field: [u8; 0usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Node_handle_common__Optional_alloc__Empty {
    pub _address: u8,
}
#[repr(C)]
pub struct std__Node_handle<_NodeAlloc> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_NodeAlloc>>,
    pub _base: std__Node_handle_common<_NodeAlloc>,
    pub _M_pkey: std__Node_handle___pointer,
    pub _M_pmapped: std__Node_handle___pointer,
}
pub type std__Node_handle_key_type<_Key> = _Key;
pub type std__Node_handle_mapped_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std__Node_handle__AllocTraits = std_allocator_traits;
pub type std__Node_handle___pointer = std___ptr_rebind;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Node_insert_return<_Iterator, _NodeHandle> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_NodeHandle>>,
    pub position: _Iterator,
    pub inserted: bool,
    pub node: _NodeHandle,
}
pub const std__Rb_tree_color__S_red: std__Rb_tree_color = 0;
pub const std__Rb_tree_color__S_black: std__Rb_tree_color = 1;
pub type std__Rb_tree_color = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Rb_tree_node_base {
    pub _M_color: std__Rb_tree_color,
    pub _M_parent: std__Rb_tree_node_base__Base_ptr,
    pub _M_left: std__Rb_tree_node_base__Base_ptr,
    pub _M_right: std__Rb_tree_node_base__Base_ptr,
}
pub type std__Rb_tree_node_base__Base_ptr = *mut std__Rb_tree_node_base;
pub type std__Rb_tree_node_base__Const_Base_ptr = *const std__Rb_tree_node_base;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Rb_tree_node_base"][::std::mem::size_of::<std__Rb_tree_node_base>() - 32usize];
    ["Alignment of std__Rb_tree_node_base"]
        [::std::mem::align_of::<std__Rb_tree_node_base>() - 8usize];
    ["Offset of field: std__Rb_tree_node_base::_M_color"]
        [::std::mem::offset_of!(std__Rb_tree_node_base, _M_color) - 0usize];
    ["Offset of field: std__Rb_tree_node_base::_M_parent"]
        [::std::mem::offset_of!(std__Rb_tree_node_base, _M_parent) - 8usize];
    ["Offset of field: std__Rb_tree_node_base::_M_left"]
        [::std::mem::offset_of!(std__Rb_tree_node_base, _M_left) - 16usize];
    ["Offset of field: std__Rb_tree_node_base::_M_right"]
        [::std::mem::offset_of!(std__Rb_tree_node_base, _M_right) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Rb_tree_key_compare<_Key_compare> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Key_compare>>,
    pub _M_key_compare: _Key_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Rb_tree_header {
    pub _M_header: std__Rb_tree_node_base,
    pub _M_node_count: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Rb_tree_header"][::std::mem::size_of::<std__Rb_tree_header>() - 40usize];
    ["Alignment of std__Rb_tree_header"][::std::mem::align_of::<std__Rb_tree_header>() - 8usize];
    ["Offset of field: std__Rb_tree_header::_M_header"]
        [::std::mem::offset_of!(std__Rb_tree_header, _M_header) - 0usize];
    ["Offset of field: std__Rb_tree_header::_M_node_count"]
        [::std::mem::offset_of!(std__Rb_tree_header, _M_node_count) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Rb_tree_node {
    pub _base: std__Rb_tree_node_base,
    pub _M_storage: __gnu_cxx___aligned_membuf,
}
pub type std__Rb_tree_node__Link_type = *mut std__Rb_tree_node;
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base"]
    pub fn std__Rb_tree_increment(__x: *mut std__Rb_tree_node_base) -> *mut std__Rb_tree_node_base;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base"]
    pub fn std__Rb_tree_increment1(
        __x: *const std__Rb_tree_node_base,
    ) -> *const std__Rb_tree_node_base;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base"]
    pub fn std__Rb_tree_decrement(__x: *mut std__Rb_tree_node_base) -> *mut std__Rb_tree_node_base;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt18_Rb_tree_decrementPKSt18_Rb_tree_node_base"]
    pub fn std__Rb_tree_decrement1(
        __x: *const std__Rb_tree_node_base,
    ) -> *const std__Rb_tree_node_base;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Rb_tree_iterator {
    pub _M_node: std__Rb_tree_iterator__Base_ptr,
}
pub type std__Rb_tree_iterator_value_type<_Tp> = _Tp;
pub type std__Rb_tree_iterator_reference<_Tp> = *mut _Tp;
pub type std__Rb_tree_iterator_pointer<_Tp> = *mut _Tp;
pub type std__Rb_tree_iterator_iterator_category = std_bidirectional_iterator_tag;
pub type std__Rb_tree_iterator_difference_type = isize;
pub type std__Rb_tree_iterator__Self = std__Rb_tree_iterator;
pub type std__Rb_tree_iterator__Base_ptr = std__Rb_tree_node_base__Base_ptr;
pub type std__Rb_tree_iterator__Link_type = *mut std__Rb_tree_node;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Rb_tree_const_iterator {
    pub _M_node: std__Rb_tree_const_iterator__Base_ptr,
}
pub type std__Rb_tree_const_iterator_value_type<_Tp> = _Tp;
pub type std__Rb_tree_const_iterator_reference<_Tp> = *const _Tp;
pub type std__Rb_tree_const_iterator_pointer<_Tp> = *const _Tp;
pub type std__Rb_tree_const_iterator_iterator = std__Rb_tree_iterator;
pub type std__Rb_tree_const_iterator_iterator_category = std_bidirectional_iterator_tag;
pub type std__Rb_tree_const_iterator_difference_type = isize;
pub type std__Rb_tree_const_iterator__Self = std__Rb_tree_const_iterator;
pub type std__Rb_tree_const_iterator__Base_ptr = std__Rb_tree_node_base__Const_Base_ptr;
pub type std__Rb_tree_const_iterator__Link_type = *const std__Rb_tree_node;
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_"]
    pub fn std__Rb_tree_insert_and_rebalance(
        __insert_left: bool,
        __x: *mut std__Rb_tree_node_base,
        __p: *mut std__Rb_tree_node_base,
        __header: *mut std__Rb_tree_node_base,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_"]
    pub fn std__Rb_tree_rebalance_for_erase(
        __z: *mut std__Rb_tree_node_base,
        __header: *mut std__Rb_tree_node_base,
    ) -> *mut std__Rb_tree_node_base;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Rb_tree_merge_helper {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct std__Rb_tree {
    pub _M_impl: u8,
}
pub type std__Rb_tree__Node_allocator = __BindgenOpaqueArray<u8, 0usize>;
pub type std__Rb_tree__Alloc_traits = __gnu_cxx___alloc_traits;
pub type std__Rb_tree__Base_ptr = *mut std__Rb_tree_node_base;
pub type std__Rb_tree__Const_Base_ptr = *const std__Rb_tree_node_base;
pub type std__Rb_tree__Link_type = *mut std__Rb_tree_node;
pub type std__Rb_tree__Const_Link_type = *const std__Rb_tree_node;
#[repr(C)]
#[derive(Debug)]
pub struct std__Rb_tree__Reuse_or_alloc_node {
    pub _M_root: std__Rb_tree__Base_ptr,
    pub _M_nodes: std__Rb_tree__Base_ptr,
    pub _M_t: *mut std__Rb_tree,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Rb_tree__Alloc_node {
    pub _M_t: *mut std__Rb_tree,
}
pub type std__Rb_tree_key_type<_Key> = _Key;
pub type std__Rb_tree_value_type<_Val> = _Val;
pub type std__Rb_tree_pointer<_Val> = *mut std__Rb_tree_value_type<_Val>;
pub type std__Rb_tree_const_pointer<_Val> = *const std__Rb_tree_value_type<_Val>;
pub type std__Rb_tree_reference<_Val> = *mut std__Rb_tree_value_type<_Val>;
pub type std__Rb_tree_const_reference<_Val> = *const std__Rb_tree_value_type<_Val>;
pub type std__Rb_tree_size_type = usize;
pub type std__Rb_tree_difference_type = isize;
pub type std__Rb_tree_allocator_type<_Alloc> = _Alloc;
pub type std__Rb_tree_reverse_iterator = std_reverse_iterator<std__Rb_tree_iterator>;
pub type std__Rb_tree_const_reverse_iterator = std_reverse_iterator<std__Rb_tree_const_iterator>;
pub type std__Rb_tree_node_type = std__Node_handle<std__Rb_tree__Node_allocator>;
pub type std__Rb_tree_insert_return_type = std__Node_insert_return<_Iterator, _NodeHandle>;
pub const std__Rb_tree___as_lvalue: std__Rb_tree__bindgen_ty_1 = 0;
pub const std__Rb_tree___as_rvalue: std__Rb_tree__bindgen_ty_1 = 0;
pub type std__Rb_tree__bindgen_ty_1 = i32;
pub type std__Rb_tree___same_value_type = std_is_same;
pub type std__Rb_tree__Compatible_tree = std__Rb_tree;
pub type std__Rb_tree__Rb_tree_impl__Base_key_compare<_Key_compare> =
    std__Rb_tree_key_compare<_Key_compare>;
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt20_Rb_tree_black_countPKSt18_Rb_tree_node_baseS1_"]
    pub fn std__Rb_tree_black_count(
        __node: *const std__Rb_tree_node_base,
        __root: *const std__Rb_tree_node_base,
    ) -> ::std::os::raw::c_uint;
}
#[repr(C)]
pub struct std_set {
    pub _M_t: std_set__Rep_type,
}
pub type std_set_key_type<_Key> = _Key;
pub type std_set_value_type<_Key> = _Key;
pub type std_set_key_compare<_Compare> = _Compare;
pub type std_set_value_compare<_Compare> = _Compare;
pub type std_set_allocator_type<_Alloc> = _Alloc;
pub type std_set__Key_alloc_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_set__Rep_type = std__Rb_tree;
pub type std_set__Alloc_traits = __gnu_cxx___alloc_traits;
pub type std_set_pointer = __BindgenOpaqueArray<u8, 0usize>;
pub type std_set_const_pointer = __BindgenOpaqueArray<u8, 0usize>;
pub type std_set_reference = __BindgenOpaqueArray<u8, 0usize>;
pub type std_set_const_reference = __BindgenOpaqueArray<u8, 0usize>;
pub type std_set_iterator = __BindgenOpaqueArray<u8, 0usize>;
pub type std_set_const_iterator = __BindgenOpaqueArray<u8, 0usize>;
pub type std_set_reverse_iterator = __BindgenOpaqueArray<u8, 0usize>;
pub type std_set_const_reverse_iterator = __BindgenOpaqueArray<u8, 0usize>;
pub type std_set_size_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_set_difference_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_set_node_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_set_insert_return_type = __BindgenOpaqueArray<u8, 0usize>;
#[repr(C)]
pub struct std_multiset {
    pub _M_t: std_multiset__Rep_type,
}
pub type std_multiset_key_type<_Key> = _Key;
pub type std_multiset_value_type<_Key> = _Key;
pub type std_multiset_key_compare<_Compare> = _Compare;
pub type std_multiset_value_compare<_Compare> = _Compare;
pub type std_multiset_allocator_type<_Alloc> = _Alloc;
pub type std_multiset__Key_alloc_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_multiset__Rep_type = std__Rb_tree;
pub type std_multiset__Alloc_traits = __gnu_cxx___alloc_traits;
pub type std_multiset_pointer = __BindgenOpaqueArray<u8, 0usize>;
pub type std_multiset_const_pointer = __BindgenOpaqueArray<u8, 0usize>;
pub type std_multiset_reference = __BindgenOpaqueArray<u8, 0usize>;
pub type std_multiset_const_reference = __BindgenOpaqueArray<u8, 0usize>;
pub type std_multiset_iterator = __BindgenOpaqueArray<u8, 0usize>;
pub type std_multiset_const_iterator = __BindgenOpaqueArray<u8, 0usize>;
pub type std_multiset_reverse_iterator = __BindgenOpaqueArray<u8, 0usize>;
pub type std_multiset_const_reverse_iterator = __BindgenOpaqueArray<u8, 0usize>;
pub type std_multiset_size_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_multiset_difference_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_multiset_node_type = __BindgenOpaqueArray<u8, 0usize>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pmr_polymorphic_allocator {
    pub _address: u8,
}
pub type std_pmr_set = std_set;
pub type std_pmr_multiset = std_multiset;
pub type std_pmr_basic_string<_CharT> = std_basic_string<_CharT>;
pub type std_pmr_string = std_basic_string<::std::os::raw::c_char>;
pub type std_pmr_u16string = std_basic_string<u16>;
pub type std_pmr_u32string = std_basic_string<u32>;
pub type std_pmr_wstring = std_basic_string<u32>;
pub type std_pmr_vector = std_vector;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_char_traits {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
pub type std___c_locale = __locale_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_codecvt_base {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_codecvt {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_codecvt_byname {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_time_base {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_time_put {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_time_put_byname {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_money_base {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_messages_base {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_string_view<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _M_len: usize,
    pub _M_str: *const _CharT,
}
pub type std_basic_string_view_traits_type<_Traits> = _Traits;
pub type std_basic_string_view_value_type<_CharT> = _CharT;
pub type std_basic_string_view_pointer<_CharT> = *mut std_basic_string_view_value_type<_CharT>;
pub type std_basic_string_view_const_pointer<_CharT> =
    *const std_basic_string_view_value_type<_CharT>;
pub type std_basic_string_view_reference<_CharT> = *mut std_basic_string_view_value_type<_CharT>;
pub type std_basic_string_view_const_reference<_CharT> =
    *const std_basic_string_view_value_type<_CharT>;
pub type std_basic_string_view_const_iterator<_CharT> =
    *const std_basic_string_view_value_type<_CharT>;
pub type std_basic_string_view_iterator<_CharT> = std_basic_string_view_const_iterator<_CharT>;
pub type std_basic_string_view_const_reverse_iterator<_CharT> =
    std_reverse_iterator<std_basic_string_view_const_iterator<_CharT>>;
pub type std_basic_string_view_reverse_iterator<_CharT> =
    std_basic_string_view_const_reverse_iterator<_CharT>;
pub type std_basic_string_view_size_type = usize;
pub type std_basic_string_view_difference_type = isize;
pub type std_string_view = std_basic_string_view<::std::os::raw::c_char>;
pub type std_wstring_view = std_basic_string_view<u32>;
pub type std_u16string_view = std_basic_string_view<u16>;
pub type std_u32string_view = std_basic_string_view<u32>;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_std_basic_string_view_open1_char_std_char_traits_open2_char_close2_close1_close0"] [:: std :: mem :: size_of :: < std_hash > () - 1usize] ;
    ["Align of template specialization: std_hash_open0_std_basic_string_view_open1_char_std_char_traits_open2_char_close2_close1_close0"] [:: std :: mem :: align_of :: < std_hash > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_fast_hash_open0_std_hash_open1_std_basic_string_view_open2_char_std_char_traits_open3_char_close3_close2_close1_close0"] [:: std :: mem :: size_of :: < std___is_fast_hash > () - 1usize] ;
    ["Align of template specialization: std___is_fast_hash_open0_std_hash_open1_std_basic_string_view_open2_char_std_char_traits_open3_char_close3_close2_close1_close0"] [:: std :: mem :: align_of :: < std___is_fast_hash > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_std_basic_string_view_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0"] [:: std :: mem :: size_of :: < std_hash > () - 1usize] ;
    ["Align of template specialization: std_hash_open0_std_basic_string_view_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0"] [:: std :: mem :: align_of :: < std_hash > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_fast_hash_open0_std_hash_open1_std_basic_string_view_open2_wchar_t_std_char_traits_open3_wchar_t_close3_close2_close1_close0"] [:: std :: mem :: size_of :: < std___is_fast_hash > () - 1usize] ;
    ["Align of template specialization: std___is_fast_hash_open0_std_hash_open1_std_basic_string_view_open2_wchar_t_std_char_traits_open3_wchar_t_close3_close2_close1_close0"] [:: std :: mem :: align_of :: < std___is_fast_hash > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_std_basic_string_view_open1_char16_t_std_char_traits_open2_char16_t_close2_close1_close0"] [:: std :: mem :: size_of :: < std_hash > () - 1usize] ;
    ["Align of template specialization: std_hash_open0_std_basic_string_view_open1_char16_t_std_char_traits_open2_char16_t_close2_close1_close0"] [:: std :: mem :: align_of :: < std_hash > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_fast_hash_open0_std_hash_open1_std_basic_string_view_open2_char16_t_std_char_traits_open3_char16_t_close3_close2_close1_close0"] [:: std :: mem :: size_of :: < std___is_fast_hash > () - 1usize] ;
    ["Align of template specialization: std___is_fast_hash_open0_std_hash_open1_std_basic_string_view_open2_char16_t_std_char_traits_open3_char16_t_close3_close2_close1_close0"] [:: std :: mem :: align_of :: < std___is_fast_hash > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_std_basic_string_view_open1_char32_t_std_char_traits_open2_char32_t_close2_close1_close0"] [:: std :: mem :: size_of :: < std_hash > () - 1usize] ;
    ["Align of template specialization: std_hash_open0_std_basic_string_view_open1_char32_t_std_char_traits_open2_char32_t_close2_close1_close0"] [:: std :: mem :: align_of :: < std_hash > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_fast_hash_open0_std_hash_open1_std_basic_string_view_open2_char32_t_std_char_traits_open3_char32_t_close3_close2_close1_close0"] [:: std :: mem :: size_of :: < std___is_fast_hash > () - 1usize] ;
    ["Align of template specialization: std___is_fast_hash_open0_std_hash_open1_std_basic_string_view_open2_char32_t_std_char_traits_open3_char32_t_close3_close2_close1_close0"] [:: std :: mem :: align_of :: < std___is_fast_hash > () - 1usize] ;
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_"]
    pub fn std_getline(
        __in: *mut std_basic_istream<::std::os::raw::c_char>,
        __str: *mut std_basic_string<::std::os::raw::c_char>,
        __delim: ::std::os::raw::c_char,
    ) -> *mut std_basic_istream<::std::os::raw::c_char>;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt7getlineIwSt11char_traitsIwESaIwEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_"]
    pub fn std_getline1(
        __in: *mut std_basic_istream<u32>,
        __str: *mut std_basic_string<u32>,
        __delim: u32,
    ) -> *mut std_basic_istream<u32>;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0"] [:: std :: mem :: size_of :: < std_hash > () - 1usize] ;
    ["Align of template specialization: std_hash_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0"] [:: std :: mem :: align_of :: < std_hash > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_fast_hash_open0_std_hash_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0"] [:: std :: mem :: size_of :: < std___is_fast_hash > () - 1usize] ;
    ["Align of template specialization: std___is_fast_hash_open0_std_hash_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0"] [:: std :: mem :: align_of :: < std___is_fast_hash > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_std_basic_string_open1_wchar_t_std_char_traits_open2_wchar_t_close2_std_allocator_open2_wchar_t_close2_close1_close0"] [:: std :: mem :: size_of :: < std_hash > () - 1usize] ;
    ["Align of template specialization: std_hash_open0_std_basic_string_open1_wchar_t_std_char_traits_open2_wchar_t_close2_std_allocator_open2_wchar_t_close2_close1_close0"] [:: std :: mem :: align_of :: < std_hash > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_fast_hash_open0_std_hash_open1_std_basic_string_open2_wchar_t_std_char_traits_open3_wchar_t_close3_std_allocator_open3_wchar_t_close3_close2_close1_close0"] [:: std :: mem :: size_of :: < std___is_fast_hash > () - 1usize] ;
    ["Align of template specialization: std___is_fast_hash_open0_std_hash_open1_std_basic_string_open2_wchar_t_std_char_traits_open3_wchar_t_close3_std_allocator_open3_wchar_t_close3_close2_close1_close0"] [:: std :: mem :: align_of :: < std___is_fast_hash > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_std_basic_string_open1_char16_t_std_char_traits_open2_char16_t_close2_std_allocator_open2_char16_t_close2_close1_close0"] [:: std :: mem :: size_of :: < std_hash > () - 1usize] ;
    ["Align of template specialization: std_hash_open0_std_basic_string_open1_char16_t_std_char_traits_open2_char16_t_close2_std_allocator_open2_char16_t_close2_close1_close0"] [:: std :: mem :: align_of :: < std_hash > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_fast_hash_open0_std_hash_open1_std_basic_string_open2_char16_t_std_char_traits_open3_char16_t_close3_std_allocator_open3_char16_t_close3_close2_close1_close0"] [:: std :: mem :: size_of :: < std___is_fast_hash > () - 1usize] ;
    ["Align of template specialization: std___is_fast_hash_open0_std_hash_open1_std_basic_string_open2_char16_t_std_char_traits_open3_char16_t_close3_std_allocator_open3_char16_t_close3_close2_close1_close0"] [:: std :: mem :: align_of :: < std___is_fast_hash > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_std_basic_string_open1_char32_t_std_char_traits_open2_char32_t_close2_std_allocator_open2_char32_t_close2_close1_close0"] [:: std :: mem :: size_of :: < std_hash > () - 1usize] ;
    ["Align of template specialization: std_hash_open0_std_basic_string_open1_char32_t_std_char_traits_open2_char32_t_close2_std_allocator_open2_char32_t_close2_close1_close0"] [:: std :: mem :: align_of :: < std_hash > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_fast_hash_open0_std_hash_open1_std_basic_string_open2_char32_t_std_char_traits_open3_char32_t_close3_std_allocator_open3_char32_t_close3_close2_close1_close0"] [:: std :: mem :: size_of :: < std___is_fast_hash > () - 1usize] ;
    ["Align of template specialization: std___is_fast_hash_open0_std_hash_open1_std_basic_string_open2_char32_t_std_char_traits_open3_char32_t_close3_std_allocator_open3_char32_t_close3_close2_close1_close0"] [:: std :: mem :: align_of :: < std___is_fast_hash > () - 1usize] ;
};
unsafe extern "C" {
    #[link_name = "\u{1}npos"]
    pub static std_npos: std_basic_string_size_type;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < u32 > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < u32 > > () - 8usize] ;
};
pub type std_size_type = size_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___hash_string_base {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_pmr_polymorphic_allocator_open2_char_close2_close1_close0"] [:: std :: mem :: size_of :: < std_hash > () - 1usize] ;
    ["Align of template specialization: std_hash_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_pmr_polymorphic_allocator_open2_char_close2_close1_close0"] [:: std :: mem :: align_of :: < std_hash > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_std_basic_string_open1_char16_t_std_char_traits_open2_char16_t_close2_std_pmr_polymorphic_allocator_open2_char16_t_close2_close1_close0"] [:: std :: mem :: size_of :: < std_hash > () - 1usize] ;
    ["Align of template specialization: std_hash_open0_std_basic_string_open1_char16_t_std_char_traits_open2_char16_t_close2_std_pmr_polymorphic_allocator_open2_char16_t_close2_close1_close0"] [:: std :: mem :: align_of :: < std_hash > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_std_basic_string_open1_char32_t_std_char_traits_open2_char32_t_close2_std_pmr_polymorphic_allocator_open2_char32_t_close2_close1_close0"] [:: std :: mem :: size_of :: < std_hash > () - 1usize] ;
    ["Align of template specialization: std_hash_open0_std_basic_string_open1_char32_t_std_char_traits_open2_char32_t_close2_std_pmr_polymorphic_allocator_open2_char32_t_close2_close1_close0"] [:: std :: mem :: align_of :: < std_hash > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_std_basic_string_open1_wchar_t_std_char_traits_open2_wchar_t_close2_std_pmr_polymorphic_allocator_open2_wchar_t_close2_close1_close0"] [:: std :: mem :: size_of :: < std_hash > () - 1usize] ;
    ["Align of template specialization: std_hash_open0_std_basic_string_open1_wchar_t_std_char_traits_open2_wchar_t_close2_std_pmr_polymorphic_allocator_open2_wchar_t_close2_close1_close0"] [:: std :: mem :: align_of :: < std_hash > () - 1usize] ;
};
#[repr(C)]
pub struct std__Vector_base {
    pub _M_impl: std__Vector_base__Vector_impl,
}
pub type std__Vector_base__Tp_alloc_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std__Vector_base_pointer = __BindgenOpaqueArray<u8, 0usize>;
#[repr(C)]
pub struct std__Vector_base__Vector_impl_data {
    pub _M_start: std__Vector_base_pointer,
    pub _M_finish: std__Vector_base_pointer,
    pub _M_end_of_storage: std__Vector_base_pointer,
}
#[repr(C)]
pub struct std__Vector_base__Vector_impl {
    pub _base_1: std__Vector_base__Vector_impl_data,
}
pub type std__Vector_base_allocator_type<_Alloc> = _Alloc;
#[repr(C)]
pub struct std_vector {
    pub _base: std__Vector_base,
}
pub type std_vector__Base = std__Vector_base;
pub type std_vector__Tp_alloc_type = std_vector__Base;
pub type std_vector__Alloc_traits = __gnu_cxx___alloc_traits;
pub type std_vector_value_type<_Tp> = _Tp;
pub type std_vector_pointer = std_vector__Base;
pub type std_vector_const_pointer = std_vector__Alloc_traits;
pub type std_vector_reference = std_vector__Alloc_traits;
pub type std_vector_const_reference = std_vector__Alloc_traits;
pub type std_vector_iterator = __gnu_cxx___normal_iterator<std_vector_pointer>;
pub type std_vector_const_iterator = __gnu_cxx___normal_iterator<std_vector_const_pointer>;
pub type std_vector_const_reverse_iterator = std_reverse_iterator<std_vector_const_iterator>;
pub type std_vector_reverse_iterator = std_reverse_iterator<std_vector_iterator>;
pub type std_vector_size_type = usize;
pub type std_vector_difference_type = isize;
pub type std_vector_allocator_type<_Alloc> = _Alloc;
#[repr(C)]
#[derive(Debug)]
pub struct std_vector__Temporary_value {
    pub _M_this: *mut std_vector,
    pub __buf: u8,
}
pub type std__Bit_type = ::std::os::raw::c_ulong;
pub const _S_word_bit: std__bindgen_ty_1 = 64;
pub type std__bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Bit_reference {
    pub _M_p: *mut std__Bit_type,
    pub _M_mask: std__Bit_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Bit_reference"][::std::mem::size_of::<std__Bit_reference>() - 16usize];
    ["Alignment of std__Bit_reference"][::std::mem::align_of::<std__Bit_reference>() - 8usize];
    ["Offset of field: std__Bit_reference::_M_p"]
        [::std::mem::offset_of!(std__Bit_reference, _M_p) - 0usize];
    ["Offset of field: std__Bit_reference::_M_mask"]
        [::std::mem::offset_of!(std__Bit_reference, _M_mask) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Bit_iterator_base {
    pub _M_p: *mut std__Bit_type,
    pub _M_offset: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Bit_iterator_base"][::std::mem::size_of::<std__Bit_iterator_base>() - 16usize];
    ["Alignment of std__Bit_iterator_base"]
        [::std::mem::align_of::<std__Bit_iterator_base>() - 8usize];
    ["Offset of field: std__Bit_iterator_base::_M_p"]
        [::std::mem::offset_of!(std__Bit_iterator_base, _M_p) - 0usize];
    ["Offset of field: std__Bit_iterator_base::_M_offset"]
        [::std::mem::offset_of!(std__Bit_iterator_base, _M_offset) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Bit_iterator {
    pub _base: std__Bit_iterator_base,
}
pub type std__Bit_iterator_reference = std__Bit_reference;
pub type std__Bit_iterator_pointer = *mut std__Bit_reference;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Bit_iterator"][::std::mem::size_of::<std__Bit_iterator>() - 16usize];
    ["Alignment of std__Bit_iterator"][::std::mem::align_of::<std__Bit_iterator>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Bit_const_iterator {
    pub _base: std__Bit_iterator_base,
}
pub type std__Bit_const_iterator_reference = bool;
pub type std__Bit_const_iterator_const_reference = bool;
pub type std__Bit_const_iterator_pointer = *const bool;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Bit_const_iterator"][::std::mem::size_of::<std__Bit_const_iterator>() - 16usize];
    ["Alignment of std__Bit_const_iterator"]
        [::std::mem::align_of::<std__Bit_const_iterator>() - 8usize];
};
#[repr(C)]
pub struct std__Bvector_base {
    pub _M_impl: std__Bvector_base__Bvector_impl,
}
pub type std__Bvector_base__Bit_alloc_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std__Bvector_base__Bit_alloc_traits = __gnu_cxx___alloc_traits;
pub type std__Bvector_base__Bit_pointer = __BindgenOpaqueArray<u8, 0usize>;
#[repr(C)]
pub struct std__Bvector_base__Bvector_impl_data {
    pub _M_start: std__Bit_iterator,
    pub _M_finish: std__Bit_iterator,
    pub _M_end_of_storage: std__Bvector_base__Bit_pointer,
}
#[repr(C)]
pub struct std__Bvector_base__Bvector_impl {
    pub _base_1: std__Bvector_base__Bvector_impl_data,
}
pub type std__Bvector_base_allocator_type<_Alloc> = _Alloc;
#[repr(C)]
#[derive(Debug)]
pub struct std_locale {
    pub _M_impl: *mut std_locale__Impl,
}
pub type std_locale_category = ::std::os::raw::c_int;
pub const std_locale__S_categories_size: std_locale__bindgen_ty_1 = 12;
pub type std_locale__bindgen_ty_1 = ::std::os::raw::c_uint;
pub const std_locale_none: std_locale_category = 0;
pub const std_locale_ctype: std_locale_category = 1;
pub const std_locale_numeric: std_locale_category = 2;
pub const std_locale_collate: std_locale_category = 4;
pub const std_locale_time: std_locale_category = 8;
pub const std_locale_monetary: std_locale_category = 16;
pub const std_locale_messages: std_locale_category = 32;
pub const std_locale_all: std_locale_category = 63;
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale10_S_classicE"]
    pub static mut std_locale__S_classic: *mut std_locale__Impl;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale9_S_globalE"]
    pub static mut std_locale__S_global: *mut std_locale__Impl;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale13_S_categoriesE"]
    pub static std_locale__S_categories: *const *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale7_S_onceE"]
    pub static mut std_locale__S_once: __gthread_once_t;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale17_S_twinned_facetsE"]
    pub static std_locale__S_twinned_facets: [*const std_locale_id; 0usize];
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_locale"][::std::mem::size_of::<std_locale>() - 8usize];
    ["Alignment of std_locale"][::std::mem::align_of::<std_locale>() - 8usize];
    ["Offset of field: std_locale::_M_impl"][::std::mem::offset_of!(std_locale, _M_impl) - 0usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt6locale4nameB5cxx11Ev"]
    pub fn std_locale_name(this: *const std_locale) -> std_string;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale6globalERKS_"]
    pub fn std_locale_global(__loc: *const std_locale) -> std_locale;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale7classicEv"]
    pub fn std_locale_classic() -> *const std_locale;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6localeC1Ev"]
    pub fn std_locale_locale(this: *mut std_locale);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6localeC1ERKS_"]
    pub fn std_locale_locale1(this: *mut std_locale, __other: *const std_locale);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6localeC1EPKc"]
    pub fn std_locale_locale2(this: *mut std_locale, __s: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6localeC1ERKS_PKci"]
    pub fn std_locale_locale3(
        this: *mut std_locale,
        __base: *const std_locale,
        __s: *const ::std::os::raw::c_char,
        __cat: std_locale_category,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6localeC1ERKS_S1_i"]
    pub fn std_locale_locale4(
        this: *mut std_locale,
        __base: *const std_locale,
        __add: *const std_locale,
        __cat: std_locale_category,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6localeD1Ev"]
    pub fn std_locale_locale_destructor(this: *mut std_locale);
}
impl std_locale {
    #[inline]
    pub unsafe fn name(&self) -> std_string {
        std_locale_name(self)
    }
    #[inline]
    pub unsafe fn global(__loc: *const std_locale) -> std_locale {
        std_locale_global(__loc)
    }
    #[inline]
    pub unsafe fn classic() -> *const std_locale {
        std_locale_classic()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_locale_locale(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(__other: *const std_locale) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_locale_locale1(__bindgen_tmp.as_mut_ptr(), __other);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(__s: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_locale_locale2(__bindgen_tmp.as_mut_ptr(), __s);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new3(
        __base: *const std_locale,
        __s: *const ::std::os::raw::c_char,
        __cat: std_locale_category,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_locale_locale3(__bindgen_tmp.as_mut_ptr(), __base, __s, __cat);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new4(
        __base: *const std_locale,
        __add: *const std_locale,
        __cat: std_locale_category,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_locale_locale4(__bindgen_tmp.as_mut_ptr(), __base, __add, __cat);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        std_locale_locale_destructor(self)
    }
}
#[repr(C)]
pub struct std_locale_facet__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_locale_facet {
    pub vtable_: *const std_locale_facet__bindgen_vtable,
    pub _M_refcount: _Atomic_word,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_locale_facet___shim {
    _unused: [u8; 0],
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale5facet11_S_c_localeE"]
    pub static mut std_locale_facet__S_c_locale: std___c_locale;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale5facet9_S_c_nameE"]
    pub static std_locale_facet__S_c_name: [::std::os::raw::c_char; 2usize];
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale5facet7_S_onceE"]
    pub static mut std_locale_facet__S_once: __gthread_once_t;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_locale_facet"][::std::mem::size_of::<std_locale_facet>() - 16usize];
    ["Alignment of std_locale_facet"][::std::mem::align_of::<std_locale_facet>() - 8usize];
    ["Offset of field: std_locale_facet::_M_refcount"]
        [::std::mem::offset_of!(std_locale_facet, _M_refcount) - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale5facet18_S_create_c_localeERP15__locale_structPKcS2_"]
    pub fn std_locale_facet__S_create_c_locale(
        __cloc: *mut std___c_locale,
        __s: *const ::std::os::raw::c_char,
        __old: std___c_locale,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale5facet17_S_clone_c_localeERP15__locale_struct"]
    pub fn std_locale_facet__S_clone_c_locale(__cloc: *mut std___c_locale) -> std___c_locale;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale5facet19_S_destroy_c_localeERP15__locale_struct"]
    pub fn std_locale_facet__S_destroy_c_locale(__cloc: *mut std___c_locale);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale5facet20_S_lc_ctype_c_localeEP15__locale_structPKc"]
    pub fn std_locale_facet__S_lc_ctype_c_locale(
        __cloc: std___c_locale,
        __s: *const ::std::os::raw::c_char,
    ) -> std___c_locale;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale5facet15_S_get_c_localeEv"]
    pub fn std_locale_facet__S_get_c_locale() -> std___c_locale;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale5facet13_S_get_c_nameEv"]
    pub fn std_locale_facet__S_get_c_name() -> *const ::std::os::raw::c_char;
}
impl std_locale_facet {
    #[inline]
    pub unsafe fn _S_create_c_locale(
        __cloc: *mut std___c_locale,
        __s: *const ::std::os::raw::c_char,
        __old: std___c_locale,
    ) {
        std_locale_facet__S_create_c_locale(__cloc, __s, __old)
    }
    #[inline]
    pub unsafe fn _S_clone_c_locale(__cloc: *mut std___c_locale) -> std___c_locale {
        std_locale_facet__S_clone_c_locale(__cloc)
    }
    #[inline]
    pub unsafe fn _S_destroy_c_locale(__cloc: *mut std___c_locale) {
        std_locale_facet__S_destroy_c_locale(__cloc)
    }
    #[inline]
    pub unsafe fn _S_lc_ctype_c_locale(
        __cloc: std___c_locale,
        __s: *const ::std::os::raw::c_char,
    ) -> std___c_locale {
        std_locale_facet__S_lc_ctype_c_locale(__cloc, __s)
    }
    #[inline]
    pub unsafe fn _S_get_c_locale() -> std___c_locale {
        std_locale_facet__S_get_c_locale()
    }
    #[inline]
    pub unsafe fn _S_get_c_name() -> *const ::std::os::raw::c_char {
        std_locale_facet__S_get_c_name()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale5facetD1Ev"]
    pub fn std_locale_facet_facet_destructor(this: *mut std_locale_facet);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_locale_id {
    pub _M_index: usize,
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale2id11_S_refcountE"]
    pub static mut std_locale_id__S_refcount: _Atomic_word;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_locale_id"][::std::mem::size_of::<std_locale_id>() - 8usize];
    ["Alignment of std_locale_id"][::std::mem::align_of::<std_locale_id>() - 8usize];
    ["Offset of field: std_locale_id::_M_index"]
        [::std::mem::offset_of!(std_locale_id, _M_index) - 0usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt6locale2id5_M_idEv"]
    pub fn std_locale_id__M_id(this: *const std_locale_id) -> usize;
}
impl std_locale_id {
    #[inline]
    pub unsafe fn _M_id(&self) -> usize {
        std_locale_id__M_id(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct std_locale__Impl {
    pub _M_refcount: _Atomic_word,
    pub _M_facets: *mut *const std_locale_facet,
    pub _M_facets_size: usize,
    pub _M_caches: *mut *const std_locale_facet,
    pub _M_names: *mut *mut ::std::os::raw::c_char,
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale5_Impl11_S_id_ctypeE"]
    pub static std_locale__Impl__S_id_ctype: [*const std_locale_id; 0usize];
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale5_Impl13_S_id_numericE"]
    pub static std_locale__Impl__S_id_numeric: [*const std_locale_id; 0usize];
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale5_Impl13_S_id_collateE"]
    pub static std_locale__Impl__S_id_collate: [*const std_locale_id; 0usize];
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale5_Impl10_S_id_timeE"]
    pub static std_locale__Impl__S_id_time: [*const std_locale_id; 0usize];
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale5_Impl14_S_id_monetaryE"]
    pub static std_locale__Impl__S_id_monetary: [*const std_locale_id; 0usize];
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale5_Impl14_S_id_messagesE"]
    pub static std_locale__Impl__S_id_messages: [*const std_locale_id; 0usize];
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale5_Impl19_S_facet_categoriesE"]
    pub static std_locale__Impl__S_facet_categories: [*const *const std_locale_id; 0usize];
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_locale__Impl"][::std::mem::size_of::<std_locale__Impl>() - 40usize];
    ["Alignment of std_locale__Impl"][::std::mem::align_of::<std_locale__Impl>() - 8usize];
    ["Offset of field: std_locale__Impl::_M_refcount"]
        [::std::mem::offset_of!(std_locale__Impl, _M_refcount) - 0usize];
    ["Offset of field: std_locale__Impl::_M_facets"]
        [::std::mem::offset_of!(std_locale__Impl, _M_facets) - 8usize];
    ["Offset of field: std_locale__Impl::_M_facets_size"]
        [::std::mem::offset_of!(std_locale__Impl, _M_facets_size) - 16usize];
    ["Offset of field: std_locale__Impl::_M_caches"]
        [::std::mem::offset_of!(std_locale__Impl, _M_caches) - 24usize];
    ["Offset of field: std_locale__Impl::_M_names"]
        [::std::mem::offset_of!(std_locale__Impl, _M_names) - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_collate_open0_char_close0"]
        [::std::mem::size_of::<std_collate>() - 24usize];
    ["Align of template specialization: std_collate_open0_char_close0"]
        [::std::mem::align_of::<std_collate>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_collate_byname_open0_char_close0"]
        [::std::mem::size_of::<std_collate_byname>() - 24usize];
    ["Align of template specialization: std_collate_byname_open0_char_close0"]
        [::std::mem::align_of::<std_collate_byname>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_collate_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_collate>() - 24usize];
    ["Align of template specialization: std_collate_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_collate>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_collate_byname_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_collate_byname>() - 24usize];
    ["Align of template specialization: std_collate_byname_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_collate_byname>() - 8usize];
};
pub const std_errc_address_family_not_supported: std_errc = 97;
pub const std_errc_address_in_use: std_errc = 98;
pub const std_errc_address_not_available: std_errc = 99;
pub const std_errc_already_connected: std_errc = 106;
pub const std_errc_argument_list_too_long: std_errc = 7;
pub const std_errc_argument_out_of_domain: std_errc = 33;
pub const std_errc_bad_address: std_errc = 14;
pub const std_errc_bad_file_descriptor: std_errc = 9;
pub const std_errc_bad_message: std_errc = 74;
pub const std_errc_broken_pipe: std_errc = 32;
pub const std_errc_connection_aborted: std_errc = 103;
pub const std_errc_connection_already_in_progress: std_errc = 114;
pub const std_errc_connection_refused: std_errc = 111;
pub const std_errc_connection_reset: std_errc = 104;
pub const std_errc_cross_device_link: std_errc = 18;
pub const std_errc_destination_address_required: std_errc = 89;
pub const std_errc_device_or_resource_busy: std_errc = 16;
pub const std_errc_directory_not_empty: std_errc = 39;
pub const std_errc_executable_format_error: std_errc = 8;
pub const std_errc_file_exists: std_errc = 17;
pub const std_errc_file_too_large: std_errc = 27;
pub const std_errc_filename_too_long: std_errc = 36;
pub const std_errc_function_not_supported: std_errc = 38;
pub const std_errc_host_unreachable: std_errc = 113;
pub const std_errc_identifier_removed: std_errc = 43;
pub const std_errc_illegal_byte_sequence: std_errc = 84;
pub const std_errc_inappropriate_io_control_operation: std_errc = 25;
pub const std_errc_interrupted: std_errc = 4;
pub const std_errc_invalid_argument: std_errc = 22;
pub const std_errc_invalid_seek: std_errc = 29;
pub const std_errc_io_error: std_errc = 5;
pub const std_errc_is_a_directory: std_errc = 21;
pub const std_errc_message_size: std_errc = 90;
pub const std_errc_network_down: std_errc = 100;
pub const std_errc_network_reset: std_errc = 102;
pub const std_errc_network_unreachable: std_errc = 101;
pub const std_errc_no_buffer_space: std_errc = 105;
pub const std_errc_no_child_process: std_errc = 10;
pub const std_errc_no_link: std_errc = 67;
pub const std_errc_no_lock_available: std_errc = 37;
pub const std_errc_no_message_available: std_errc = 61;
pub const std_errc_no_message: std_errc = 42;
pub const std_errc_no_protocol_option: std_errc = 92;
pub const std_errc_no_space_on_device: std_errc = 28;
pub const std_errc_no_stream_resources: std_errc = 63;
pub const std_errc_no_such_device_or_address: std_errc = 6;
pub const std_errc_no_such_device: std_errc = 19;
pub const std_errc_no_such_file_or_directory: std_errc = 2;
pub const std_errc_no_such_process: std_errc = 3;
pub const std_errc_not_a_directory: std_errc = 20;
pub const std_errc_not_a_socket: std_errc = 88;
pub const std_errc_not_a_stream: std_errc = 60;
pub const std_errc_not_connected: std_errc = 107;
pub const std_errc_not_enough_memory: std_errc = 12;
pub const std_errc_not_supported: std_errc = 95;
pub const std_errc_operation_canceled: std_errc = 125;
pub const std_errc_operation_in_progress: std_errc = 115;
pub const std_errc_operation_not_permitted: std_errc = 1;
pub const std_errc_operation_not_supported: std_errc = 95;
pub const std_errc_operation_would_block: std_errc = 11;
pub const std_errc_owner_dead: std_errc = 130;
pub const std_errc_permission_denied: std_errc = 13;
pub const std_errc_protocol_error: std_errc = 71;
pub const std_errc_protocol_not_supported: std_errc = 93;
pub const std_errc_read_only_file_system: std_errc = 30;
pub const std_errc_resource_deadlock_would_occur: std_errc = 35;
pub const std_errc_resource_unavailable_try_again: std_errc = 11;
pub const std_errc_result_out_of_range: std_errc = 34;
pub const std_errc_state_not_recoverable: std_errc = 131;
pub const std_errc_stream_timeout: std_errc = 62;
pub const std_errc_text_file_busy: std_errc = 26;
pub const std_errc_timed_out: std_errc = 110;
pub const std_errc_too_many_files_open_in_system: std_errc = 23;
pub const std_errc_too_many_files_open: std_errc = 24;
pub const std_errc_too_many_links: std_errc = 31;
pub const std_errc_too_many_symbolic_link_levels: std_errc = 40;
pub const std_errc_value_too_large: std_errc = 75;
pub const std_errc_wrong_protocol_type: std_errc = 91;
pub type std_errc = ::std::os::raw::c_int;
#[repr(C)]
pub struct std___cow_string {
    pub __bindgen_anon_1: std___cow_string__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union std___cow_string__bindgen_ty_1 {
    pub _M_p: *const ::std::os::raw::c_char,
    pub _M_bytes: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___cow_string__bindgen_ty_1"]
        [::std::mem::size_of::<std___cow_string__bindgen_ty_1>() - 8usize];
    ["Alignment of std___cow_string__bindgen_ty_1"]
        [::std::mem::align_of::<std___cow_string__bindgen_ty_1>() - 8usize];
    ["Offset of field: std___cow_string__bindgen_ty_1::_M_p"]
        [::std::mem::offset_of!(std___cow_string__bindgen_ty_1, _M_p) - 0usize];
    ["Offset of field: std___cow_string__bindgen_ty_1::_M_bytes"]
        [::std::mem::offset_of!(std___cow_string__bindgen_ty_1, _M_bytes) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___cow_string"][::std::mem::size_of::<std___cow_string>() - 8usize];
    ["Alignment of std___cow_string"][::std::mem::align_of::<std___cow_string>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12__cow_stringC1Ev"]
    pub fn std___cow_string___cow_string(this: *mut std___cow_string);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12__cow_stringC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std___cow_string___cow_string1(this: *mut std___cow_string, arg1: *const std_string);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12__cow_stringC1EPKcm"]
    pub fn std___cow_string___cow_string2(
        this: *mut std___cow_string,
        arg1: *const ::std::os::raw::c_char,
        arg2: usize,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12__cow_stringC1ERKS_"]
    pub fn std___cow_string___cow_string3(
        this: *mut std___cow_string,
        arg1: *const std___cow_string,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12__cow_stringC1EOS_"]
    pub fn std___cow_string___cow_string4(this: *mut std___cow_string, arg1: *mut std___cow_string);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12__cow_stringD1Ev"]
    pub fn std___cow_string___cow_string_destructor(this: *mut std___cow_string);
}
impl std___cow_string {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std___cow_string___cow_string(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std___cow_string___cow_string1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(arg1: *const ::std::os::raw::c_char, arg2: usize) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std___cow_string___cow_string2(__bindgen_tmp.as_mut_ptr(), arg1, arg2);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new3(arg1: *const std___cow_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std___cow_string___cow_string3(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new4(arg1: *mut std___cow_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std___cow_string___cow_string4(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        std___cow_string___cow_string_destructor(self)
    }
}
pub type std___sso_string = std_basic_string<::std::os::raw::c_char>;
#[repr(C)]
pub struct std_logic_error {
    pub _base: std_exception,
    pub _M_msg: std___cow_string,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_logic_error"][::std::mem::size_of::<std_logic_error>() - 16usize];
    ["Alignment of std_logic_error"][::std::mem::align_of::<std_logic_error>() - 8usize];
    ["Offset of field: std_logic_error::_M_msg"]
        [::std::mem::offset_of!(std_logic_error, _M_msg) - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt11logic_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_logic_error_logic_error(this: *mut std_logic_error, __arg: *const std_string);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt11logic_errorC1EPKc"]
    pub fn std_logic_error_logic_error1(
        this: *mut std_logic_error,
        arg1: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt11logic_errorC1EOS_"]
    pub fn std_logic_error_logic_error2(this: *mut std_logic_error, arg1: *mut std_logic_error);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt11logic_errorC1ERKS_"]
    pub fn std_logic_error_logic_error3(this: *mut std_logic_error, arg1: *const std_logic_error);
}
impl std_logic_error {
    #[inline]
    pub unsafe fn new(__arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_logic_error_logic_error(__bindgen_tmp.as_mut_ptr(), __arg);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_logic_error_logic_error1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(arg1: *mut std_logic_error) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_logic_error_logic_error2(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new3(arg1: *const std_logic_error) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_logic_error_logic_error3(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt11logic_errorD1Ev"]
    pub fn std_logic_error_logic_error_destructor(this: *mut std_logic_error);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt11logic_error4whatEv"]
    pub fn std_logic_error_what(this: *mut ::std::os::raw::c_void)
        -> *const ::std::os::raw::c_char;
}
#[repr(C)]
pub struct std_domain_error {
    pub _base: std_logic_error,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_domain_error"][::std::mem::size_of::<std_domain_error>() - 16usize];
    ["Alignment of std_domain_error"][::std::mem::align_of::<std_domain_error>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12domain_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_domain_error_domain_error(this: *mut std_domain_error, __arg: *const std_string);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12domain_errorC1EPKc"]
    pub fn std_domain_error_domain_error1(
        this: *mut std_domain_error,
        arg1: *const ::std::os::raw::c_char,
    );
}
impl std_domain_error {
    #[inline]
    pub unsafe fn new(__arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_domain_error_domain_error(__bindgen_tmp.as_mut_ptr(), __arg);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_domain_error_domain_error1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12domain_errorD1Ev"]
    pub fn std_domain_error_domain_error_destructor(this: *mut std_domain_error);
}
#[repr(C)]
pub struct std_invalid_argument {
    pub _base: std_logic_error,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_invalid_argument"][::std::mem::size_of::<std_invalid_argument>() - 16usize];
    ["Alignment of std_invalid_argument"][::std::mem::align_of::<std_invalid_argument>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt16invalid_argumentC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_invalid_argument_invalid_argument(
        this: *mut std_invalid_argument,
        __arg: *const std_string,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt16invalid_argumentC1EPKc"]
    pub fn std_invalid_argument_invalid_argument1(
        this: *mut std_invalid_argument,
        arg1: *const ::std::os::raw::c_char,
    );
}
impl std_invalid_argument {
    #[inline]
    pub unsafe fn new(__arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_invalid_argument_invalid_argument(__bindgen_tmp.as_mut_ptr(), __arg);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_invalid_argument_invalid_argument1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt16invalid_argumentD1Ev"]
    pub fn std_invalid_argument_invalid_argument_destructor(this: *mut std_invalid_argument);
}
#[repr(C)]
pub struct std_length_error {
    pub _base: std_logic_error,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_length_error"][::std::mem::size_of::<std_length_error>() - 16usize];
    ["Alignment of std_length_error"][::std::mem::align_of::<std_length_error>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12length_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_length_error_length_error(this: *mut std_length_error, __arg: *const std_string);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12length_errorC1EPKc"]
    pub fn std_length_error_length_error1(
        this: *mut std_length_error,
        arg1: *const ::std::os::raw::c_char,
    );
}
impl std_length_error {
    #[inline]
    pub unsafe fn new(__arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_length_error_length_error(__bindgen_tmp.as_mut_ptr(), __arg);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_length_error_length_error1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12length_errorD1Ev"]
    pub fn std_length_error_length_error_destructor(this: *mut std_length_error);
}
#[repr(C)]
pub struct std_out_of_range {
    pub _base: std_logic_error,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_out_of_range"][::std::mem::size_of::<std_out_of_range>() - 16usize];
    ["Alignment of std_out_of_range"][::std::mem::align_of::<std_out_of_range>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12out_of_rangeC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_out_of_range_out_of_range(this: *mut std_out_of_range, __arg: *const std_string);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12out_of_rangeC1EPKc"]
    pub fn std_out_of_range_out_of_range1(
        this: *mut std_out_of_range,
        arg1: *const ::std::os::raw::c_char,
    );
}
impl std_out_of_range {
    #[inline]
    pub unsafe fn new(__arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_out_of_range_out_of_range(__bindgen_tmp.as_mut_ptr(), __arg);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_out_of_range_out_of_range1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12out_of_rangeD1Ev"]
    pub fn std_out_of_range_out_of_range_destructor(this: *mut std_out_of_range);
}
#[repr(C)]
pub struct std_runtime_error {
    pub _base: std_exception,
    pub _M_msg: std___cow_string,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_runtime_error"][::std::mem::size_of::<std_runtime_error>() - 16usize];
    ["Alignment of std_runtime_error"][::std::mem::align_of::<std_runtime_error>() - 8usize];
    ["Offset of field: std_runtime_error::_M_msg"]
        [::std::mem::offset_of!(std_runtime_error, _M_msg) - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt13runtime_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_runtime_error_runtime_error(this: *mut std_runtime_error, __arg: *const std_string);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt13runtime_errorC1EPKc"]
    pub fn std_runtime_error_runtime_error1(
        this: *mut std_runtime_error,
        arg1: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt13runtime_errorC1EOS_"]
    pub fn std_runtime_error_runtime_error2(
        this: *mut std_runtime_error,
        arg1: *mut std_runtime_error,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt13runtime_errorC1ERKS_"]
    pub fn std_runtime_error_runtime_error3(
        this: *mut std_runtime_error,
        arg1: *const std_runtime_error,
    );
}
impl std_runtime_error {
    #[inline]
    pub unsafe fn new(__arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_runtime_error_runtime_error(__bindgen_tmp.as_mut_ptr(), __arg);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_runtime_error_runtime_error1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(arg1: *mut std_runtime_error) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_runtime_error_runtime_error2(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new3(arg1: *const std_runtime_error) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_runtime_error_runtime_error3(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt13runtime_errorD1Ev"]
    pub fn std_runtime_error_runtime_error_destructor(this: *mut std_runtime_error);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt13runtime_error4whatEv"]
    pub fn std_runtime_error_what(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
pub struct std_range_error {
    pub _base: std_runtime_error,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_range_error"][::std::mem::size_of::<std_range_error>() - 16usize];
    ["Alignment of std_range_error"][::std::mem::align_of::<std_range_error>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt11range_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_range_error_range_error(this: *mut std_range_error, __arg: *const std_string);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt11range_errorC1EPKc"]
    pub fn std_range_error_range_error1(
        this: *mut std_range_error,
        arg1: *const ::std::os::raw::c_char,
    );
}
impl std_range_error {
    #[inline]
    pub unsafe fn new(__arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_range_error_range_error(__bindgen_tmp.as_mut_ptr(), __arg);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_range_error_range_error1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt11range_errorD1Ev"]
    pub fn std_range_error_range_error_destructor(this: *mut std_range_error);
}
#[repr(C)]
pub struct std_overflow_error {
    pub _base: std_runtime_error,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_overflow_error"][::std::mem::size_of::<std_overflow_error>() - 16usize];
    ["Alignment of std_overflow_error"][::std::mem::align_of::<std_overflow_error>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt14overflow_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_overflow_error_overflow_error(
        this: *mut std_overflow_error,
        __arg: *const std_string,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt14overflow_errorC1EPKc"]
    pub fn std_overflow_error_overflow_error1(
        this: *mut std_overflow_error,
        arg1: *const ::std::os::raw::c_char,
    );
}
impl std_overflow_error {
    #[inline]
    pub unsafe fn new(__arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_overflow_error_overflow_error(__bindgen_tmp.as_mut_ptr(), __arg);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_overflow_error_overflow_error1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt14overflow_errorD1Ev"]
    pub fn std_overflow_error_overflow_error_destructor(this: *mut std_overflow_error);
}
#[repr(C)]
pub struct std_underflow_error {
    pub _base: std_runtime_error,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_underflow_error"][::std::mem::size_of::<std_underflow_error>() - 16usize];
    ["Alignment of std_underflow_error"][::std::mem::align_of::<std_underflow_error>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt15underflow_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_underflow_error_underflow_error(
        this: *mut std_underflow_error,
        __arg: *const std_string,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt15underflow_errorC1EPKc"]
    pub fn std_underflow_error_underflow_error1(
        this: *mut std_underflow_error,
        arg1: *const ::std::os::raw::c_char,
    );
}
impl std_underflow_error {
    #[inline]
    pub unsafe fn new(__arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_underflow_error_underflow_error(__bindgen_tmp.as_mut_ptr(), __arg);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_underflow_error_underflow_error1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt15underflow_errorD1Ev"]
    pub fn std_underflow_error_underflow_error_destructor(this: *mut std_underflow_error);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_error_code_enum {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_error_condition_enum {
    pub _base: std_false_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_is_error_condition_enum_open0_std_errc_close0"]
        [::std::mem::size_of::<std_is_error_condition_enum>() - 1usize];
    ["Align of template specialization: std_is_error_condition_enum_open0_std_errc_close0"]
        [::std::mem::align_of::<std_is_error_condition_enum>() - 1usize];
};
#[repr(C)]
pub struct std_error_category__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_error_category {
    pub vtable_: *const std_error_category__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_error_category"][::std::mem::size_of::<std_error_category>() - 8usize];
    ["Alignment of std_error_category"][::std::mem::align_of::<std_error_category>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt3_V214error_categoryD1Ev"]
    pub fn std_error_category_error_category_destructor(this: *mut std_error_category);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt3_V214error_category23default_error_conditionEi"]
    pub fn std_error_category_default_error_condition(
        this: *mut ::std::os::raw::c_void,
        __i: ::std::os::raw::c_int,
    ) -> std_error_condition;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition"]
    pub fn std_error_category_equivalent(
        this: *mut ::std::os::raw::c_void,
        __i: ::std::os::raw::c_int,
        __cond: *const std_error_condition,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt3_V214error_category10equivalentERKSt10error_codei"]
    pub fn std_error_category_equivalent1(
        this: *mut ::std::os::raw::c_void,
        __code: *const std_error_code,
        __i: ::std::os::raw::c_int,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt3_V216generic_categoryEv"]
    pub fn std_generic_category() -> *const std_error_category;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt3_V215system_categoryEv"]
    pub fn std_system_category() -> *const std_error_category;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_error_code {
    pub _M_value: ::std::os::raw::c_int,
    pub _M_cat: *const std_error_category,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_error_code"][::std::mem::size_of::<std_error_code>() - 16usize];
    ["Alignment of std_error_code"][::std::mem::align_of::<std_error_code>() - 8usize];
    ["Offset of field: std_error_code::_M_value"]
        [::std::mem::offset_of!(std_error_code, _M_value) - 0usize];
    ["Offset of field: std_error_code::_M_cat"]
        [::std::mem::offset_of!(std_error_code, _M_cat) - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt10error_code23default_error_conditionEv"]
    pub fn std_error_code_default_error_condition(
        this: *const std_error_code,
    ) -> std_error_condition;
}
impl std_error_code {
    #[inline]
    pub unsafe fn default_error_condition(&self) -> std_error_condition {
        std_error_code_default_error_condition(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_error_condition {
    pub _M_value: ::std::os::raw::c_int,
    pub _M_cat: *const std_error_category,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_error_condition"][::std::mem::size_of::<std_error_condition>() - 16usize];
    ["Alignment of std_error_condition"][::std::mem::align_of::<std_error_condition>() - 8usize];
    ["Offset of field: std_error_condition::_M_value"]
        [::std::mem::offset_of!(std_error_condition, _M_value) - 0usize];
    ["Offset of field: std_error_condition::_M_cat"]
        [::std::mem::offset_of!(std_error_condition, _M_cat) - 8usize];
};
#[repr(C)]
pub struct std_system_error {
    pub _base: std_runtime_error,
    pub _M_code: std_error_code,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_system_error"][::std::mem::size_of::<std_system_error>() - 32usize];
    ["Alignment of std_system_error"][::std::mem::align_of::<std_system_error>() - 8usize];
    ["Offset of field: std_system_error::_M_code"]
        [::std::mem::offset_of!(std_system_error, _M_code) - 16usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12system_errorD1Ev"]
    pub fn std_system_error_system_error_destructor(this: *mut std_system_error);
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_std_error_code_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_std_error_code_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_std_error_condition_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_std_error_condition_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
pub const std__Ios_Fmtflags__S_boolalpha: std__Ios_Fmtflags = 1;
pub const std__Ios_Fmtflags__S_dec: std__Ios_Fmtflags = 2;
pub const std__Ios_Fmtflags__S_fixed: std__Ios_Fmtflags = 4;
pub const std__Ios_Fmtflags__S_hex: std__Ios_Fmtflags = 8;
pub const std__Ios_Fmtflags__S_internal: std__Ios_Fmtflags = 16;
pub const std__Ios_Fmtflags__S_left: std__Ios_Fmtflags = 32;
pub const std__Ios_Fmtflags__S_oct: std__Ios_Fmtflags = 64;
pub const std__Ios_Fmtflags__S_right: std__Ios_Fmtflags = 128;
pub const std__Ios_Fmtflags__S_scientific: std__Ios_Fmtflags = 256;
pub const std__Ios_Fmtflags__S_showbase: std__Ios_Fmtflags = 512;
pub const std__Ios_Fmtflags__S_showpoint: std__Ios_Fmtflags = 1024;
pub const std__Ios_Fmtflags__S_showpos: std__Ios_Fmtflags = 2048;
pub const std__Ios_Fmtflags__S_skipws: std__Ios_Fmtflags = 4096;
pub const std__Ios_Fmtflags__S_unitbuf: std__Ios_Fmtflags = 8192;
pub const std__Ios_Fmtflags__S_uppercase: std__Ios_Fmtflags = 16384;
pub const std__Ios_Fmtflags__S_adjustfield: std__Ios_Fmtflags = 176;
pub const std__Ios_Fmtflags__S_basefield: std__Ios_Fmtflags = 74;
pub const std__Ios_Fmtflags__S_floatfield: std__Ios_Fmtflags = 260;
pub const std__Ios_Fmtflags__S_ios_fmtflags_end: std__Ios_Fmtflags = 65536;
pub const std__Ios_Fmtflags__S_ios_fmtflags_max: std__Ios_Fmtflags = 2147483647;
pub const std__Ios_Fmtflags__S_ios_fmtflags_min: std__Ios_Fmtflags = -2147483648;
pub type std__Ios_Fmtflags = ::std::os::raw::c_int;
pub const std__Ios_Openmode__S_app: std__Ios_Openmode = 1;
pub const std__Ios_Openmode__S_ate: std__Ios_Openmode = 2;
pub const std__Ios_Openmode__S_bin: std__Ios_Openmode = 4;
pub const std__Ios_Openmode__S_in: std__Ios_Openmode = 8;
pub const std__Ios_Openmode__S_out: std__Ios_Openmode = 16;
pub const std__Ios_Openmode__S_trunc: std__Ios_Openmode = 32;
pub const std__Ios_Openmode__S_ios_openmode_end: std__Ios_Openmode = 65536;
pub const std__Ios_Openmode__S_ios_openmode_max: std__Ios_Openmode = 2147483647;
pub const std__Ios_Openmode__S_ios_openmode_min: std__Ios_Openmode = -2147483648;
pub type std__Ios_Openmode = ::std::os::raw::c_int;
pub const std__Ios_Iostate__S_goodbit: std__Ios_Iostate = 0;
pub const std__Ios_Iostate__S_badbit: std__Ios_Iostate = 1;
pub const std__Ios_Iostate__S_eofbit: std__Ios_Iostate = 2;
pub const std__Ios_Iostate__S_failbit: std__Ios_Iostate = 4;
pub const std__Ios_Iostate__S_ios_iostate_end: std__Ios_Iostate = 65536;
pub const std__Ios_Iostate__S_ios_iostate_max: std__Ios_Iostate = 2147483647;
pub const std__Ios_Iostate__S_ios_iostate_min: std__Ios_Iostate = -2147483648;
pub type std__Ios_Iostate = ::std::os::raw::c_int;
pub const std__Ios_Seekdir__S_beg: std__Ios_Seekdir = 0;
pub const std__Ios_Seekdir__S_cur: std__Ios_Seekdir = 1;
pub const std__Ios_Seekdir__S_end: std__Ios_Seekdir = 2;
pub const std__Ios_Seekdir__S_ios_seekdir_end: std__Ios_Seekdir = 65536;
pub type std__Ios_Seekdir = ::std::os::raw::c_uint;
pub const std_io_errc_stream: std_io_errc = 1;
pub type std_io_errc = ::std::os::raw::c_int;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_is_error_code_enum_open0_std_io_errc_close0"]
        [::std::mem::size_of::<std_is_error_code_enum>() - 1usize];
    ["Align of template specialization: std_is_error_code_enum_open0_std_io_errc_close0"]
        [::std::mem::align_of::<std_is_error_code_enum>() - 1usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt17iostream_categoryv"]
    pub fn std_iostream_category() -> *const std_error_category;
}
#[repr(C)]
pub struct std_ios_base__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_ios_base {
    pub vtable_: *const std_ios_base__bindgen_vtable,
    pub _M_precision: std_streamsize,
    pub _M_width: std_streamsize,
    pub _M_flags: std_ios_base_fmtflags,
    pub _M_exception: std_ios_base_iostate,
    pub _M_streambuf_state: std_ios_base_iostate,
    pub _M_callbacks: *mut std_ios_base__Callback_list,
    pub _M_word_zero: std_ios_base__Words,
    pub _M_local_word: [std_ios_base__Words; 8usize],
    pub _M_word_size: ::std::os::raw::c_int,
    pub _M_word: *mut std_ios_base__Words,
    pub _M_ios_locale: std_locale,
}
#[repr(C)]
pub struct std_ios_base_failure {
    pub _base: std_system_error,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_ios_base_failure"][::std::mem::size_of::<std_ios_base_failure>() - 32usize];
    ["Alignment of std_ios_base_failure"][::std::mem::align_of::<std_ios_base_failure>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base7failureB5cxx11C1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_ios_base_failure_failure(this: *mut std_ios_base_failure, __str: *const std_string);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base7failureB5cxx11C1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt10error_code"]
    pub fn std_ios_base_failure_failure1(
        this: *mut std_ios_base_failure,
        arg1: *const std_string,
        arg2: *const std_error_code,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base7failureB5cxx11C1EPKcRKSt10error_code"]
    pub fn std_ios_base_failure_failure2(
        this: *mut std_ios_base_failure,
        arg1: *const ::std::os::raw::c_char,
        arg2: *const std_error_code,
    );
}
impl std_ios_base_failure {
    #[inline]
    pub unsafe fn new(__str: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_ios_base_failure_failure(__bindgen_tmp.as_mut_ptr(), __str);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const std_string, arg2: *const std_error_code) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_ios_base_failure_failure1(__bindgen_tmp.as_mut_ptr(), arg1, arg2);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(arg1: *const ::std::os::raw::c_char, arg2: *const std_error_code) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_ios_base_failure_failure2(__bindgen_tmp.as_mut_ptr(), arg1, arg2);
        __bindgen_tmp.assume_init()
    }
}
pub use self::std__Ios_Fmtflags as std_ios_base_fmtflags;
pub use self::std__Ios_Iostate as std_ios_base_iostate;
pub use self::std__Ios_Openmode as std_ios_base_openmode;
pub use self::std__Ios_Seekdir as std_ios_base_seekdir;
pub const std_ios_base_event_erase_event: std_ios_base_event = 0;
pub const std_ios_base_event_imbue_event: std_ios_base_event = 1;
pub const std_ios_base_event_copyfmt_event: std_ios_base_event = 2;
pub type std_ios_base_event = ::std::os::raw::c_uint;
pub type std_ios_base_event_callback = ::std::option::Option<
    unsafe extern "C" fn(
        __e: std_ios_base_event,
        __b: *mut std_ios_base,
        __i: ::std::os::raw::c_int,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ios_base__Callback_list {
    pub _M_next: *mut std_ios_base__Callback_list,
    pub _M_fn: std_ios_base_event_callback,
    pub _M_index: ::std::os::raw::c_int,
    pub _M_refcount: _Atomic_word,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_ios_base__Callback_list"]
        [::std::mem::size_of::<std_ios_base__Callback_list>() - 24usize];
    ["Alignment of std_ios_base__Callback_list"]
        [::std::mem::align_of::<std_ios_base__Callback_list>() - 8usize];
    ["Offset of field: std_ios_base__Callback_list::_M_next"]
        [::std::mem::offset_of!(std_ios_base__Callback_list, _M_next) - 0usize];
    ["Offset of field: std_ios_base__Callback_list::_M_fn"]
        [::std::mem::offset_of!(std_ios_base__Callback_list, _M_fn) - 8usize];
    ["Offset of field: std_ios_base__Callback_list::_M_index"]
        [::std::mem::offset_of!(std_ios_base__Callback_list, _M_index) - 16usize];
    ["Offset of field: std_ios_base__Callback_list::_M_refcount"]
        [::std::mem::offset_of!(std_ios_base__Callback_list, _M_refcount) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ios_base__Words {
    pub _M_pword: *mut ::std::os::raw::c_void,
    pub _M_iword: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_ios_base__Words"][::std::mem::size_of::<std_ios_base__Words>() - 16usize];
    ["Alignment of std_ios_base__Words"][::std::mem::align_of::<std_ios_base__Words>() - 8usize];
    ["Offset of field: std_ios_base__Words::_M_pword"]
        [::std::mem::offset_of!(std_ios_base__Words, _M_pword) - 0usize];
    ["Offset of field: std_ios_base__Words::_M_iword"]
        [::std::mem::offset_of!(std_ios_base__Words, _M_iword) - 8usize];
};
pub const std_ios_base__S_local_word_size: std_ios_base__bindgen_ty_1 = 8;
pub type std_ios_base__bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug)]
pub struct std_ios_base_Init {
    pub _address: u8,
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base4Init11_S_refcountE"]
    pub static mut std_ios_base_Init__S_refcount: _Atomic_word;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base4Init20_S_synced_with_stdioE"]
    pub static mut std_ios_base_Init__S_synced_with_stdio: bool;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_ios_base_Init"][::std::mem::size_of::<std_ios_base_Init>() - 1usize];
    ["Alignment of std_ios_base_Init"][::std::mem::align_of::<std_ios_base_Init>() - 1usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base4InitC1Ev"]
    pub fn std_ios_base_Init_Init(this: *mut std_ios_base_Init);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base4InitD1Ev"]
    pub fn std_ios_base_Init_Init_destructor(this: *mut std_ios_base_Init);
}
impl std_ios_base_Init {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_ios_base_Init_Init(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        std_ios_base_Init_Init_destructor(self)
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base9boolalphaE"]
    pub static std_ios_base_boolalpha: std_ios_base_fmtflags;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base3decE"]
    pub static std_ios_base_dec: std_ios_base_fmtflags;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base5fixedE"]
    pub static std_ios_base_fixed: std_ios_base_fmtflags;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base3hexE"]
    pub static std_ios_base_hex: std_ios_base_fmtflags;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base8internalE"]
    pub static std_ios_base_internal: std_ios_base_fmtflags;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base4leftE"]
    pub static std_ios_base_left: std_ios_base_fmtflags;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base3octE"]
    pub static std_ios_base_oct: std_ios_base_fmtflags;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base5rightE"]
    pub static std_ios_base_right: std_ios_base_fmtflags;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base10scientificE"]
    pub static std_ios_base_scientific: std_ios_base_fmtflags;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base8showbaseE"]
    pub static std_ios_base_showbase: std_ios_base_fmtflags;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base9showpointE"]
    pub static std_ios_base_showpoint: std_ios_base_fmtflags;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base7showposE"]
    pub static std_ios_base_showpos: std_ios_base_fmtflags;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base6skipwsE"]
    pub static std_ios_base_skipws: std_ios_base_fmtflags;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base7unitbufE"]
    pub static std_ios_base_unitbuf: std_ios_base_fmtflags;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base9uppercaseE"]
    pub static std_ios_base_uppercase: std_ios_base_fmtflags;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base11adjustfieldE"]
    pub static std_ios_base_adjustfield: std_ios_base_fmtflags;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base9basefieldE"]
    pub static std_ios_base_basefield: std_ios_base_fmtflags;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base10floatfieldE"]
    pub static std_ios_base_floatfield: std_ios_base_fmtflags;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base6badbitE"]
    pub static std_ios_base_badbit: std_ios_base_iostate;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base6eofbitE"]
    pub static std_ios_base_eofbit: std_ios_base_iostate;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base7failbitE"]
    pub static std_ios_base_failbit: std_ios_base_iostate;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base7goodbitE"]
    pub static std_ios_base_goodbit: std_ios_base_iostate;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base3appE"]
    pub static std_ios_base_app: std_ios_base_openmode;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base3ateE"]
    pub static std_ios_base_ate: std_ios_base_openmode;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base6binaryE"]
    pub static std_ios_base_binary: std_ios_base_openmode;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base2inE"]
    pub static std_ios_base_in: std_ios_base_openmode;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base3outE"]
    pub static std_ios_base_out: std_ios_base_openmode;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base5truncE"]
    pub static std_ios_base_trunc: std_ios_base_openmode;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base3begE"]
    pub static std_ios_base_beg: std_ios_base_seekdir;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base3curE"]
    pub static std_ios_base_cur: std_ios_base_seekdir;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base3endE"]
    pub static std_ios_base_end: std_ios_base_seekdir;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_ios_base"][::std::mem::size_of::<std_ios_base>() - 216usize];
    ["Alignment of std_ios_base"][::std::mem::align_of::<std_ios_base>() - 8usize];
    ["Offset of field: std_ios_base::_M_precision"]
        [::std::mem::offset_of!(std_ios_base, _M_precision) - 8usize];
    ["Offset of field: std_ios_base::_M_width"]
        [::std::mem::offset_of!(std_ios_base, _M_width) - 16usize];
    ["Offset of field: std_ios_base::_M_flags"]
        [::std::mem::offset_of!(std_ios_base, _M_flags) - 24usize];
    ["Offset of field: std_ios_base::_M_exception"]
        [::std::mem::offset_of!(std_ios_base, _M_exception) - 28usize];
    ["Offset of field: std_ios_base::_M_streambuf_state"]
        [::std::mem::offset_of!(std_ios_base, _M_streambuf_state) - 32usize];
    ["Offset of field: std_ios_base::_M_callbacks"]
        [::std::mem::offset_of!(std_ios_base, _M_callbacks) - 40usize];
    ["Offset of field: std_ios_base::_M_word_zero"]
        [::std::mem::offset_of!(std_ios_base, _M_word_zero) - 48usize];
    ["Offset of field: std_ios_base::_M_local_word"]
        [::std::mem::offset_of!(std_ios_base, _M_local_word) - 64usize];
    ["Offset of field: std_ios_base::_M_word_size"]
        [::std::mem::offset_of!(std_ios_base, _M_word_size) - 192usize];
    ["Offset of field: std_ios_base::_M_word"]
        [::std::mem::offset_of!(std_ios_base, _M_word) - 200usize];
    ["Offset of field: std_ios_base::_M_ios_locale"]
        [::std::mem::offset_of!(std_ios_base, _M_ios_locale) - 208usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base17register_callbackEPFvNS_5eventERS_iEi"]
    pub fn std_ios_base_register_callback(
        this: *mut std_ios_base,
        __fn: std_ios_base_event_callback,
        __index: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base17_M_call_callbacksENS_5eventE"]
    pub fn std_ios_base__M_call_callbacks(this: *mut std_ios_base, __ev: std_ios_base_event);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base20_M_dispose_callbacksEv"]
    pub fn std_ios_base__M_dispose_callbacks(this: *mut std_ios_base);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base13_M_grow_wordsEib"]
    pub fn std_ios_base__M_grow_words(
        this: *mut std_ios_base,
        __index: ::std::os::raw::c_int,
        __iword: bool,
    ) -> *mut std_ios_base__Words;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base7_M_initEv"]
    pub fn std_ios_base__M_init(this: *mut std_ios_base);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base15sync_with_stdioEb"]
    pub fn std_ios_base_sync_with_stdio(__sync: bool) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base5imbueERKSt6locale"]
    pub fn std_ios_base_imbue(this: *mut std_ios_base, __loc: *const std_locale) -> std_locale;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base6xallocEv"]
    pub fn std_ios_base_xalloc() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base7_M_moveERS_"]
    pub fn std_ios_base__M_move(this: *mut std_ios_base, arg1: *mut std_ios_base);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base7_M_swapERS_"]
    pub fn std_ios_base__M_swap(this: *mut std_ios_base, __rhs: *mut std_ios_base);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_baseC1Ev"]
    pub fn std_ios_base_ios_base(this: *mut std_ios_base);
}
impl std_ios_base {
    #[inline]
    pub unsafe fn register_callback(
        &mut self,
        __fn: std_ios_base_event_callback,
        __index: ::std::os::raw::c_int,
    ) {
        std_ios_base_register_callback(self, __fn, __index)
    }
    #[inline]
    pub unsafe fn _M_call_callbacks(&mut self, __ev: std_ios_base_event) {
        std_ios_base__M_call_callbacks(self, __ev)
    }
    #[inline]
    pub unsafe fn _M_dispose_callbacks(&mut self) {
        std_ios_base__M_dispose_callbacks(self)
    }
    #[inline]
    pub unsafe fn _M_grow_words(
        &mut self,
        __index: ::std::os::raw::c_int,
        __iword: bool,
    ) -> *mut std_ios_base__Words {
        std_ios_base__M_grow_words(self, __index, __iword)
    }
    #[inline]
    pub unsafe fn _M_init(&mut self) {
        std_ios_base__M_init(self)
    }
    #[inline]
    pub unsafe fn sync_with_stdio(__sync: bool) -> bool {
        std_ios_base_sync_with_stdio(__sync)
    }
    #[inline]
    pub unsafe fn imbue(&mut self, __loc: *const std_locale) -> std_locale {
        std_ios_base_imbue(self, __loc)
    }
    #[inline]
    pub unsafe fn xalloc() -> ::std::os::raw::c_int {
        std_ios_base_xalloc()
    }
    #[inline]
    pub unsafe fn _M_move(&mut self, arg1: *mut std_ios_base) {
        std_ios_base__M_move(self, arg1)
    }
    #[inline]
    pub unsafe fn _M_swap(&mut self, __rhs: *mut std_ios_base) {
        std_ios_base__M_swap(self, __rhs)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_ios_base_ios_base(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base7failureB5cxx11D1Ev"]
    pub fn std_ios_base_failure_failure_destructor(this: *mut std_ios_base_failure);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt8ios_base7failureB5cxx114whatEv"]
    pub fn std_ios_base_failure_what(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_baseD1Ev"]
    pub fn std_ios_base_ios_base_destructor(this: *mut std_ios_base);
}
#[repr(C)]
pub struct std_basic_streambuf__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_basic_streambuf<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub vtable_: *const std_basic_streambuf__bindgen_vtable,
    pub _M_in_beg: *mut std_basic_streambuf_char_type<_CharT>,
    pub _M_in_cur: *mut std_basic_streambuf_char_type<_CharT>,
    pub _M_in_end: *mut std_basic_streambuf_char_type<_CharT>,
    pub _M_out_beg: *mut std_basic_streambuf_char_type<_CharT>,
    pub _M_out_cur: *mut std_basic_streambuf_char_type<_CharT>,
    pub _M_out_end: *mut std_basic_streambuf_char_type<_CharT>,
    pub _M_buf_locale: std_locale,
}
pub type std_basic_streambuf_char_type<_CharT> = _CharT;
pub type std_basic_streambuf_traits_type<_Traits> = _Traits;
pub type std_basic_streambuf_int_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_streambuf_pos_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_streambuf_off_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_streambuf___streambuf_type<_CharT> =
    std_basic_streambuf<std_basic_streambuf_char_type<_CharT>>;
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt21__copy_streambufs_eofIcSt11char_traitsIcEElPSt15basic_streambufIT_T0_ES6_Rb"]
    pub fn std___copy_streambufs_eof(
        __sbin: *mut std_basic_streambuf<::std::os::raw::c_char>,
        __sbout: *mut std_basic_streambuf<::std::os::raw::c_char>,
        __ineof: *mut bool,
    ) -> std_streamsize;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt21__copy_streambufs_eofIwSt11char_traitsIwEElPSt15basic_streambufIT_T0_ES6_Rb"]
    pub fn std___copy_streambufs_eof1(
        __sbin: *mut std_basic_streambuf<u32>,
        __sbout: *mut std_basic_streambuf<u32>,
        __ineof: *mut bool,
    ) -> std_streamsize;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_streambuf_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_streambuf < :: std :: os :: raw :: c_char > > () - 64usize] ;
    ["Align of template specialization: std_basic_streambuf_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_streambuf < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_streambuf_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_streambuf < u32 > > () - 64usize] ;
    ["Align of template specialization: std_basic_streambuf_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_streambuf < u32 > > () - 8usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ctype_base {
    pub _address: u8,
}
pub type std_ctype_base___to_type = *const ::std::os::raw::c_int;
pub type std_ctype_base_mask = ::std::os::raw::c_ushort;
pub const std_ctype_base_upper: std_ctype_base_mask = 256;
pub const std_ctype_base_lower: std_ctype_base_mask = 512;
pub const std_ctype_base_alpha: std_ctype_base_mask = 1024;
pub const std_ctype_base_digit: std_ctype_base_mask = 2048;
pub const std_ctype_base_xdigit: std_ctype_base_mask = 4096;
pub const std_ctype_base_space: std_ctype_base_mask = 8192;
pub const std_ctype_base_print: std_ctype_base_mask = 16384;
pub const std_ctype_base_graph: std_ctype_base_mask = 3076;
pub const std_ctype_base_cntrl: std_ctype_base_mask = 2;
pub const std_ctype_base_punct: std_ctype_base_mask = 4;
pub const std_ctype_base_alnum: std_ctype_base_mask = 3072;
pub const std_ctype_base_blank: std_ctype_base_mask = 1;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_ctype_base"][::std::mem::size_of::<std_ctype_base>() - 1usize];
    ["Alignment of std_ctype_base"][::std::mem::align_of::<std_ctype_base>() - 1usize];
};
#[repr(C)]
pub struct std_istreambuf_iterator<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _M_sbuf: *mut std_istreambuf_iterator_streambuf_type<_CharT>,
    pub _M_c: std_istreambuf_iterator_int_type,
}
pub type std_istreambuf_iterator_char_type<_CharT> = _CharT;
pub type std_istreambuf_iterator_traits_type<_Traits> = _Traits;
pub type std_istreambuf_iterator_int_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_istreambuf_iterator_streambuf_type<_CharT> = std_basic_streambuf<_CharT>;
pub type std_istreambuf_iterator_istream_type<_CharT> = std_basic_istream<_CharT>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ostreambuf_iterator<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _M_sbuf: *mut std_ostreambuf_iterator_streambuf_type<_CharT>,
    pub _M_failed: bool,
}
pub type std_ostreambuf_iterator_char_type<_CharT> = _CharT;
pub type std_ostreambuf_iterator_traits_type<_Traits> = _Traits;
pub type std_ostreambuf_iterator_streambuf_type<_CharT> = std_basic_streambuf<_CharT>;
pub type std_ostreambuf_iterator_ostream_type<_CharT> = std_basic_ostream<_CharT>;
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt14__convert_to_vIfEvPKcRT_RSt12_Ios_IostateRKP15__locale_struct"]
    pub fn std___convert_to_v(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut f32,
        arg3: *mut std_ios_base_iostate,
        arg4: *const std___c_locale,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt14__convert_to_vIdEvPKcRT_RSt12_Ios_IostateRKP15__locale_struct"]
    pub fn std___convert_to_v1(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut f64,
        arg3: *mut std_ios_base_iostate,
        arg4: *const std___c_locale,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt14__convert_to_vIeEvPKcRT_RSt12_Ios_IostateRKP15__locale_struct"]
    pub fn std___convert_to_v2(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut u128,
        arg3: *mut std_ios_base_iostate,
        arg4: *const std___c_locale,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___pad {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct std___ctype_abstract_base {
    pub _base: std_locale_facet,
}
pub type std___ctype_abstract_base_char_type<_CharT> = _CharT;
#[repr(C)]
#[derive(Debug)]
pub struct std_ctype {
    pub _base: std___ctype_abstract_base,
}
pub type std_ctype_char_type<_CharT> = _CharT;
pub type std_ctype_mask = std___ctype_abstract_base;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_ctype_open0_char_close0"]
        [::std::mem::size_of::<std_ctype>() - 576usize];
    ["Align of template specialization: std_ctype_open0_char_close0"]
        [::std::mem::align_of::<std_ctype>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_ctype_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_ctype>() - 1344usize];
    ["Align of template specialization: std_ctype_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_ctype>() - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_ctype_byname {
    pub _base: std_ctype,
}
pub type std_ctype_byname_mask = std_ctype;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_ctype_byname_open0_char_close0"]
        [::std::mem::size_of::<std_ctype_byname>() - 576usize];
    ["Align of template specialization: std_ctype_byname_open0_char_close0"]
        [::std::mem::align_of::<std_ctype_byname>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_ctype_byname_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_ctype_byname>() - 1344usize];
    ["Align of template specialization: std_ctype_byname_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_ctype_byname>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___num_base {
    pub _address: u8,
}
pub const std___num_base__S_ominus: std___num_base__bindgen_ty_1 = 0;
pub const std___num_base__S_oplus: std___num_base__bindgen_ty_1 = 1;
pub const std___num_base__S_ox: std___num_base__bindgen_ty_1 = 2;
pub const std___num_base__S_oX: std___num_base__bindgen_ty_1 = 3;
pub const std___num_base__S_odigits: std___num_base__bindgen_ty_1 = 4;
pub const std___num_base__S_odigits_end: std___num_base__bindgen_ty_1 = 20;
pub const std___num_base__S_oudigits: std___num_base__bindgen_ty_1 = 20;
pub const std___num_base__S_oudigits_end: std___num_base__bindgen_ty_1 = 36;
pub const std___num_base__S_oe: std___num_base__bindgen_ty_1 = 18;
pub const std___num_base__S_oE: std___num_base__bindgen_ty_1 = 34;
pub const std___num_base__S_oend: std___num_base__bindgen_ty_1 = 36;
pub type std___num_base__bindgen_ty_1 = ::std::os::raw::c_uint;
pub const std___num_base__S_iminus: std___num_base__bindgen_ty_2 = 0;
pub const std___num_base__S_iplus: std___num_base__bindgen_ty_2 = 1;
pub const std___num_base__S_ix: std___num_base__bindgen_ty_2 = 2;
pub const std___num_base__S_iX: std___num_base__bindgen_ty_2 = 3;
pub const std___num_base__S_izero: std___num_base__bindgen_ty_2 = 4;
pub const std___num_base__S_ie: std___num_base__bindgen_ty_2 = 18;
pub const std___num_base__S_iE: std___num_base__bindgen_ty_2 = 24;
pub const std___num_base__S_iend: std___num_base__bindgen_ty_2 = 26;
pub type std___num_base__bindgen_ty_2 = ::std::os::raw::c_uint;
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10__num_base12_S_atoms_outE"]
    pub static mut std___num_base__S_atoms_out: *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10__num_base11_S_atoms_inE"]
    pub static mut std___num_base__S_atoms_in: *const ::std::os::raw::c_char;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___num_base"][::std::mem::size_of::<std___num_base>() - 1usize];
    ["Alignment of std___num_base"][::std::mem::align_of::<std___num_base>() - 1usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10__num_base15_S_format_floatERKSt8ios_basePcc"]
    pub fn std___num_base__S_format_float(
        __io: *const std_ios_base,
        __fptr: *mut ::std::os::raw::c_char,
        __mod: ::std::os::raw::c_char,
    );
}
impl std___num_base {
    #[inline]
    pub unsafe fn _S_format_float(
        __io: *const std_ios_base,
        __fptr: *mut ::std::os::raw::c_char,
        __mod: ::std::os::raw::c_char,
    ) {
        std___num_base__S_format_float(__io, __fptr, __mod)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct std___numpunct_cache<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _base: std_locale_facet,
    pub _M_grouping: *const ::std::os::raw::c_char,
    pub _M_grouping_size: usize,
    pub _M_use_grouping: bool,
    pub _M_truename: *const _CharT,
    pub _M_truename_size: usize,
    pub _M_falsename: *const _CharT,
    pub _M_falsename_size: usize,
    pub _M_decimal_point: _CharT,
    pub _M_thousands_sep: _CharT,
    pub _M_atoms_out: [_CharT; 36usize],
    pub _M_atoms_in: [_CharT; 26usize],
    pub _M_allocated: bool,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_num_get {
    pub _base: std_locale_facet,
}
pub type std_num_get_char_type<_CharT> = _CharT;
pub type std_num_get_iter_type<_InIter> = _InIter;
#[repr(C)]
#[derive(Debug)]
pub struct std_num_put {
    pub _base: std_locale_facet,
}
pub type std_num_put_char_type<_CharT> = _CharT;
pub type std_num_put_iter_type<_OutIter> = _OutIter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___use_cache {
    pub _address: u8,
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt17__verify_groupingPKcmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std___verify_grouping(
        __grouping: *const ::std::os::raw::c_char,
        __grouping_size: usize,
        __grouping_tmp: *const std_string,
    ) -> bool;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numpunct_open0_char_close0"]
        [::std::mem::size_of::<std_numpunct<::std::os::raw::c_char>>() - 24usize];
    ["Align of template specialization: std_numpunct_open0_char_close0"]
        [::std::mem::align_of::<std_numpunct<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numpunct_byname_open0_char_close0"]
        [::std::mem::size_of::<std_numpunct_byname<::std::os::raw::c_char>>() - 24usize];
    ["Align of template specialization: std_numpunct_byname_open0_char_close0"]
        [::std::mem::align_of::<std_numpunct_byname<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_num_get_open0_char_std_istreambuf_iterator_open1_char_std_char_traits_open2_char_close2_close1_close0"] [:: std :: mem :: size_of :: < std_num_get > () - 16usize] ;
    ["Align of template specialization: std_num_get_open0_char_std_istreambuf_iterator_open1_char_std_char_traits_open2_char_close2_close1_close0"] [:: std :: mem :: align_of :: < std_num_get > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_num_put_open0_char_std_ostreambuf_iterator_open1_char_std_char_traits_open2_char_close2_close1_close0"] [:: std :: mem :: size_of :: < std_num_put > () - 16usize] ;
    ["Align of template specialization: std_num_put_open0_char_std_ostreambuf_iterator_open1_char_std_char_traits_open2_char_close2_close1_close0"] [:: std :: mem :: align_of :: < std_num_put > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numpunct_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_numpunct<u32>>() - 24usize];
    ["Align of template specialization: std_numpunct_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_numpunct<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numpunct_byname_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_numpunct_byname<u32>>() - 24usize];
    ["Align of template specialization: std_numpunct_byname_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_numpunct_byname<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_num_get_open0_wchar_t_std_istreambuf_iterator_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0"] [:: std :: mem :: size_of :: < std_num_get > () - 16usize] ;
    ["Align of template specialization: std_num_get_open0_wchar_t_std_istreambuf_iterator_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0"] [:: std :: mem :: align_of :: < std_num_get > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_num_put_open0_wchar_t_std_ostreambuf_iterator_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0"] [:: std :: mem :: size_of :: < std_num_put > () - 16usize] ;
    ["Align of template specialization: std_num_put_open0_wchar_t_std_ostreambuf_iterator_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0"] [:: std :: mem :: align_of :: < std_num_put > () - 8usize] ;
};
#[repr(C)]
#[derive(Debug)]
pub struct std_basic_ios<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _base: std_ios_base,
    pub _M_tie: *mut std_basic_ostream<_CharT>,
    pub _M_fill: std_basic_ios_char_type<_CharT>,
    pub _M_fill_init: bool,
    pub _M_streambuf: *mut std_basic_streambuf<_CharT>,
    pub _M_ctype: *const std_basic_ios___ctype_type,
    pub _M_num_put: *const std_basic_ios___num_put_type,
    pub _M_num_get: *const std_basic_ios___num_get_type,
}
pub type std_basic_ios_char_type<_CharT> = _CharT;
pub type std_basic_ios_int_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_ios_pos_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_ios_off_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_ios_traits_type<_Traits> = _Traits;
pub type std_basic_ios___ctype_type = std_ctype;
pub type std_basic_ios___num_put_type = std_num_put;
pub type std_basic_ios___num_get_type = std_num_get;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_ios_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_ios < :: std :: os :: raw :: c_char > > () - 264usize] ;
    ["Align of template specialization: std_basic_ios_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_ios < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_ios_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_ios < u32 > > () - 264usize] ;
    ["Align of template specialization: std_basic_ios_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_ios < u32 > > () - 8usize] ;
};
#[repr(C)]
#[derive(Debug)]
pub struct std_basic_ostream<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
pub type std_basic_ostream_char_type<_CharT> = _CharT;
pub type std_basic_ostream_int_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_ostream_pos_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_ostream_off_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_ostream_traits_type<_Traits> = _Traits;
pub type std_basic_ostream___streambuf_type<_CharT> = std_basic_streambuf<_CharT>;
pub type std_basic_ostream___ios_type<_CharT> = std_basic_ios<_CharT>;
pub type std_basic_ostream___ostream_type<_CharT> = std_basic_ostream<_CharT>;
pub type std_basic_ostream___num_put_type = std_num_put;
pub type std_basic_ostream___ctype_type = std_ctype;
#[repr(C)]
#[derive(Debug)]
pub struct std_basic_ostream_sentry {
    pub _M_ok: bool,
    pub _M_os: *mut std_basic_ostream<_CharT>,
}
pub type std__Require_derived_from_ios_base = std__Require;
pub type std___rvalue_stream_insertion_t<_Os> = *mut _Os;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_ostream_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_ostream < :: std :: os :: raw :: c_char > > () - 272usize] ;
    ["Align of template specialization: std_basic_ostream_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_ostream < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_ostream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_ostream < u32 > > () - 272usize] ;
    ["Align of template specialization: std_basic_ostream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_ostream < u32 > > () - 8usize] ;
};
#[repr(C)]
#[derive(Debug)]
pub struct std_basic_istream<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _M_gcount: std_streamsize,
}
pub type std_basic_istream_char_type<_CharT> = _CharT;
pub type std_basic_istream_int_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_istream_pos_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_istream_off_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_istream_traits_type<_Traits> = _Traits;
pub type std_basic_istream___streambuf_type<_CharT> = std_basic_streambuf<_CharT>;
pub type std_basic_istream___ios_type<_CharT> = std_basic_ios<_CharT>;
pub type std_basic_istream___istream_type<_CharT> = std_basic_istream<_CharT>;
pub type std_basic_istream___num_get_type = std_num_get;
pub type std_basic_istream___ctype_type = std_ctype;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_istream_sentry {
    pub _M_ok: bool,
}
pub type std_basic_istream_sentry_traits_type = _Traits;
pub type std_basic_istream_sentry___streambuf_type = std_basic_streambuf<_CharT>;
pub type std_basic_istream_sentry___istream_type = std_basic_istream<_CharT>;
pub type std_basic_istream_sentry___ctype_type = std_basic_istream___ctype_type;
pub type std_basic_istream_sentry___int_type = __BindgenOpaqueArray<u8, 0usize>;
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt17__istream_extractRSiPcl"]
    pub fn std___istream_extract(
        arg1: *mut std_istream,
        arg2: *mut ::std::os::raw::c_char,
        arg3: std_streamsize,
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct std_basic_iostream<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _base: std_basic_istream<_CharT>,
    pub _base_1: std_basic_ostream<_CharT>,
}
pub type std_basic_iostream_char_type<_CharT> = _CharT;
pub type std_basic_iostream_int_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_iostream_pos_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_iostream_off_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_iostream_traits_type<_Traits> = _Traits;
pub type std_basic_iostream___istream_type<_CharT> = std_basic_istream<_CharT>;
pub type std_basic_iostream___ostream_type<_CharT> = std_basic_ostream<_CharT>;
pub type std___rvalue_stream_extraction_t<_Is> = *mut _Is;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_istream_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_istream < :: std :: os :: raw :: c_char > > () - 280usize] ;
    ["Align of template specialization: std_basic_istream_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_istream < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_iostream_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_iostream < :: std :: os :: raw :: c_char > > () - 288usize] ;
    ["Align of template specialization: std_basic_iostream_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_iostream < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_istream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_istream < u32 > > () - 280usize] ;
    ["Align of template specialization: std_basic_istream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_istream < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_iostream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_iostream < u32 > > () - 288usize] ;
    ["Align of template specialization: std_basic_iostream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_iostream < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_stringbuf_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_stringbuf < :: std :: os :: raw :: c_char > > () - 104usize] ;
    ["Align of template specialization: std_basic_stringbuf_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_stringbuf < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_istringstream_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_istringstream < :: std :: os :: raw :: c_char > > () - 384usize] ;
    ["Align of template specialization: std_basic_istringstream_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_istringstream < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_ostringstream_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_ostringstream < :: std :: os :: raw :: c_char > > () - 376usize] ;
    ["Align of template specialization: std_basic_ostringstream_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_ostringstream < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_stringstream_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_stringstream < :: std :: os :: raw :: c_char > > () - 392usize] ;
    ["Align of template specialization: std_basic_stringstream_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_stringstream < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_stringbuf_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_stringbuf < u32 > > () - 104usize] ;
    ["Align of template specialization: std_basic_stringbuf_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_stringbuf < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_istringstream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_istringstream < u32 > > () - 384usize] ;
    ["Align of template specialization: std_basic_istringstream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_istringstream < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_ostringstream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_ostringstream < u32 > > () - 376usize] ;
    ["Align of template specialization: std_basic_ostringstream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_ostringstream < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_stringstream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_stringstream < u32 > > () - 392usize] ;
    ["Align of template specialization: std_basic_stringstream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_stringstream < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_void_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_void_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_ctype_open0_char_close0"]
        [::std::mem::size_of::<std_ctype>() - 576usize];
    ["Align of template specialization: std_ctype_open0_char_close0"]
        [::std::mem::align_of::<std_ctype>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_ctype_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_ctype>() - 1344usize];
    ["Align of template specialization: std_ctype_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_ctype>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_ctype_byname_open0_char_close0"]
        [::std::mem::size_of::<std_ctype_byname>() - 576usize];
    ["Align of template specialization: std_ctype_byname_open0_char_close0"]
        [::std::mem::align_of::<std_ctype_byname>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_ctype_byname_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_ctype_byname>() - 1344usize];
    ["Align of template specialization: std_ctype_byname_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_ctype_byname>() - 8usize];
};
pub type __gnu_cxx___conditional_type___type<_Iftrue> = _Iftrue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___add_unsigned {
    pub _address: u8,
}
pub type __gnu_cxx___add_unsigned___if_type = u8;
pub type __gnu_cxx___add_unsigned___type = __gnu_cxx___add_unsigned___if_type;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___add_unsigned_open0_char_close0"]
        [::std::mem::size_of::<__gnu_cxx___add_unsigned>() - 1usize];
    ["Align of template specialization: __gnu_cxx___add_unsigned_open0_char_close0"]
        [::std::mem::align_of::<__gnu_cxx___add_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___add_unsigned_open0_signed_char_close0"]
        [::std::mem::size_of::<__gnu_cxx___add_unsigned>() - 1usize];
    ["Align of template specialization: __gnu_cxx___add_unsigned_open0_signed_char_close0"]
        [::std::mem::align_of::<__gnu_cxx___add_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___add_unsigned_open0_short_close0"]
        [::std::mem::size_of::<__gnu_cxx___add_unsigned>() - 1usize];
    ["Align of template specialization: __gnu_cxx___add_unsigned_open0_short_close0"]
        [::std::mem::align_of::<__gnu_cxx___add_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___add_unsigned_open0_int_close0"]
        [::std::mem::size_of::<__gnu_cxx___add_unsigned>() - 1usize];
    ["Align of template specialization: __gnu_cxx___add_unsigned_open0_int_close0"]
        [::std::mem::align_of::<__gnu_cxx___add_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___add_unsigned_open0_long_close0"]
        [::std::mem::size_of::<__gnu_cxx___add_unsigned>() - 1usize];
    ["Align of template specialization: __gnu_cxx___add_unsigned_open0_long_close0"]
        [::std::mem::align_of::<__gnu_cxx___add_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___add_unsigned_open0_long_long_close0"]
        [::std::mem::size_of::<__gnu_cxx___add_unsigned>() - 1usize];
    ["Align of template specialization: __gnu_cxx___add_unsigned_open0_long_long_close0"]
        [::std::mem::align_of::<__gnu_cxx___add_unsigned>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___remove_unsigned {
    pub _address: u8,
}
pub type __gnu_cxx___remove_unsigned___if_type = u8;
pub type __gnu_cxx___remove_unsigned___type = __gnu_cxx___remove_unsigned___if_type;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___remove_unsigned_open0_char_close0"]
        [::std::mem::size_of::<__gnu_cxx___remove_unsigned>() - 1usize];
    ["Align of template specialization: __gnu_cxx___remove_unsigned_open0_char_close0"]
        [::std::mem::align_of::<__gnu_cxx___remove_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___remove_unsigned_open0_unsigned_char_close0"]
        [::std::mem::size_of::<__gnu_cxx___remove_unsigned>() - 1usize];
    ["Align of template specialization: __gnu_cxx___remove_unsigned_open0_unsigned_char_close0"]
        [::std::mem::align_of::<__gnu_cxx___remove_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___remove_unsigned_open0_unsigned_short_close0"]
        [::std::mem::size_of::<__gnu_cxx___remove_unsigned>() - 1usize];
    ["Align of template specialization: __gnu_cxx___remove_unsigned_open0_unsigned_short_close0"]
        [::std::mem::align_of::<__gnu_cxx___remove_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___remove_unsigned_open0_unsigned_int_close0"]
        [::std::mem::size_of::<__gnu_cxx___remove_unsigned>() - 1usize];
    ["Align of template specialization: __gnu_cxx___remove_unsigned_open0_unsigned_int_close0"]
        [::std::mem::align_of::<__gnu_cxx___remove_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___remove_unsigned_open0_unsigned_long_close0"]
        [::std::mem::size_of::<__gnu_cxx___remove_unsigned>() - 1usize];
    ["Align of template specialization: __gnu_cxx___remove_unsigned_open0_unsigned_long_close0"]
        [::std::mem::align_of::<__gnu_cxx___remove_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___remove_unsigned_open0_unsigned_long_long_close0"] [:: std :: mem :: size_of :: < __gnu_cxx___remove_unsigned > () - 1usize] ;
    ["Align of template specialization: __gnu_cxx___remove_unsigned_open0_unsigned_long_long_close0"] [:: std :: mem :: align_of :: < __gnu_cxx___remove_unsigned > () - 1usize] ;
};
pub type __gnu_cxx___promote___type = f64;
pub type __gnu_cxx___promoted_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___promote_2 {
    pub _address: u8,
}
pub type __gnu_cxx___promote_2___type<_Tp2> = _Tp2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___promote_3 {
    pub _address: u8,
}
pub type __gnu_cxx___promote_3___type<_Tp2> = _Tp2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___promote_4 {
    pub _address: u8,
}
pub type __gnu_cxx___promote_4___type<_Tp2> = _Tp2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___is_integer_nonstrict {
    pub _address: u8,
}
pub const __gnu_cxx___is_integer_nonstrict___width: __gnu_cxx___is_integer_nonstrict__bindgen_ty_1 =
    0;
pub type __gnu_cxx___is_integer_nonstrict__bindgen_ty_1 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___numeric_traits_integer {
    pub _address: u8,
}
unsafe extern "C" {
    #[link_name = "\u{1}__min"]
    pub static __gnu_cxx___min: _Value;
}
unsafe extern "C" {
    #[link_name = "\u{1}__max"]
    pub static __gnu_cxx___max: _Value;
}
unsafe extern "C" {
    #[link_name = "\u{1}__is_signed"]
    pub static __gnu_cxx___is_signed: bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__digits"]
    pub static __gnu_cxx___digits: ::std::os::raw::c_int;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___is_integer_nonstrict_open0___int128_close0"]
        [::std::mem::size_of::<__gnu_cxx___is_integer_nonstrict>() - 1usize];
    ["Align of template specialization: __gnu_cxx___is_integer_nonstrict_open0___int128_close0"]
        [::std::mem::align_of::<__gnu_cxx___is_integer_nonstrict>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___is_integer_nonstrict_open0_unsigned___int128_close0"] [:: std :: mem :: size_of :: < __gnu_cxx___is_integer_nonstrict > () - 1usize] ;
    ["Align of template specialization: __gnu_cxx___is_integer_nonstrict_open0_unsigned___int128_close0"] [:: std :: mem :: align_of :: < __gnu_cxx___is_integer_nonstrict > () - 1usize] ;
};
pub type __gnu_cxx___int_traits = __gnu_cxx___numeric_traits_integer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___numeric_traits_floating {
    pub _address: u8,
}
unsafe extern "C" {
    #[link_name = "\u{1}__max_digits10"]
    pub static __gnu_cxx___max_digits10: ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__digits10"]
    pub static __gnu_cxx___digits10: ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__max_exponent10"]
    pub static __gnu_cxx___max_exponent10: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___numeric_traits {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___numeric_traits_open0_float_close0"]
        [::std::mem::size_of::<__gnu_cxx___numeric_traits>() - 1usize];
    ["Align of template specialization: __gnu_cxx___numeric_traits_open0_float_close0"]
        [::std::mem::align_of::<__gnu_cxx___numeric_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___numeric_traits_open0_double_close0"]
        [::std::mem::size_of::<__gnu_cxx___numeric_traits>() - 1usize];
    ["Align of template specialization: __gnu_cxx___numeric_traits_open0_double_close0"]
        [::std::mem::align_of::<__gnu_cxx___numeric_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___numeric_traits_open0_long_double_close0"]
        [::std::mem::size_of::<__gnu_cxx___numeric_traits>() - 1usize];
    ["Align of template specialization: __gnu_cxx___numeric_traits_open0_long_double_close0"]
        [::std::mem::align_of::<__gnu_cxx___numeric_traits>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___normal_iterator<_Iterator> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
    pub _M_current: _Iterator,
}
pub type __gnu_cxx___normal_iterator___traits_type = std_iterator_traits;
pub type __gnu_cxx___normal_iterator_iterator_type<_Iterator> = _Iterator;
pub type __gnu_cxx___normal_iterator_iterator_category = __gnu_cxx___normal_iterator___traits_type;
pub type __gnu_cxx___normal_iterator_value_type = __gnu_cxx___normal_iterator___traits_type;
pub type __gnu_cxx___normal_iterator_difference_type = __gnu_cxx___normal_iterator___traits_type;
pub type __gnu_cxx___normal_iterator_reference = __gnu_cxx___normal_iterator___traits_type;
pub type __gnu_cxx___normal_iterator_pointer = __gnu_cxx___normal_iterator___traits_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_less_iter {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __gnu_cxx___ops__Iter_less_iter"]
        [::std::mem::size_of::<__gnu_cxx___ops__Iter_less_iter>() - 1usize];
    ["Alignment of __gnu_cxx___ops__Iter_less_iter"]
        [::std::mem::align_of::<__gnu_cxx___ops__Iter_less_iter>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_less_val {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __gnu_cxx___ops__Iter_less_val"]
        [::std::mem::size_of::<__gnu_cxx___ops__Iter_less_val>() - 1usize];
    ["Alignment of __gnu_cxx___ops__Iter_less_val"]
        [::std::mem::align_of::<__gnu_cxx___ops__Iter_less_val>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Val_less_iter {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __gnu_cxx___ops__Val_less_iter"]
        [::std::mem::size_of::<__gnu_cxx___ops__Val_less_iter>() - 1usize];
    ["Alignment of __gnu_cxx___ops__Val_less_iter"]
        [::std::mem::align_of::<__gnu_cxx___ops__Val_less_iter>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_equal_to_iter {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __gnu_cxx___ops__Iter_equal_to_iter"]
        [::std::mem::size_of::<__gnu_cxx___ops__Iter_equal_to_iter>() - 1usize];
    ["Alignment of __gnu_cxx___ops__Iter_equal_to_iter"]
        [::std::mem::align_of::<__gnu_cxx___ops__Iter_equal_to_iter>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_equal_to_val {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __gnu_cxx___ops__Iter_equal_to_val"]
        [::std::mem::size_of::<__gnu_cxx___ops__Iter_equal_to_val>() - 1usize];
    ["Alignment of __gnu_cxx___ops__Iter_equal_to_val"]
        [::std::mem::align_of::<__gnu_cxx___ops__Iter_equal_to_val>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_comp_iter<_Compare> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
    pub _M_comp: _Compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_comp_val<_Compare> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
    pub _M_comp: _Compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Val_comp_iter<_Compare> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
    pub _M_comp: _Compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_equals_val<_Value> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Value>>,
    pub _M_value: *mut _Value,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_equals_iter<_Iterator1> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator1>>,
    pub _M_it1: _Iterator1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_pred<_Predicate> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
    pub _M_pred: _Predicate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_comp_to_val<_Compare, _Value> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Value>>,
    pub _M_comp: _Compare,
    pub _M_value: *mut _Value,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_comp_to_iter<_Compare, _Iterator1> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator1>>,
    pub _M_comp: _Compare,
    pub _M_it1: _Iterator1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_negate<_Predicate> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
    pub _M_pred: _Predicate,
}
#[repr(C)]
#[derive(Debug)]
pub struct __gnu_cxx_new_allocator {
    pub _address: u8,
}
pub type __gnu_cxx_new_allocator_value_type<_Tp> = _Tp;
pub type __gnu_cxx_new_allocator_size_type = usize;
pub type __gnu_cxx_new_allocator_difference_type = isize;
pub type __gnu_cxx_new_allocator_pointer<_Tp> = *mut _Tp;
pub type __gnu_cxx_new_allocator_const_pointer<_Tp> = *const _Tp;
pub type __gnu_cxx_new_allocator_reference<_Tp> = *mut _Tp;
pub type __gnu_cxx_new_allocator_const_reference<_Tp> = *const _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx_new_allocator_rebind {
    pub _address: u8,
}
pub type __gnu_cxx_new_allocator_propagate_on_container_move_assignment = std_true_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___alloc_traits {
    pub _address: u8,
}
pub type __gnu_cxx___alloc_traits_allocator_type<_Alloc> = _Alloc;
pub type __gnu_cxx___alloc_traits__Base_type = std_allocator_traits;
pub type __gnu_cxx___alloc_traits_value_type = __gnu_cxx___alloc_traits__Base_type;
pub type __gnu_cxx___alloc_traits_pointer = __gnu_cxx___alloc_traits__Base_type;
pub type __gnu_cxx___alloc_traits_const_pointer = __gnu_cxx___alloc_traits__Base_type;
pub type __gnu_cxx___alloc_traits_size_type = __gnu_cxx___alloc_traits__Base_type;
pub type __gnu_cxx___alloc_traits_difference_type = __gnu_cxx___alloc_traits__Base_type;
pub type __gnu_cxx___alloc_traits_reference = *mut __gnu_cxx___alloc_traits_value_type;
pub type __gnu_cxx___alloc_traits_const_reference = *const __gnu_cxx___alloc_traits_value_type;
pub type __gnu_cxx___alloc_traits___is_custom_pointer = std___and_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___alloc_traits_rebind {
    pub _address: u8,
}
pub type __gnu_cxx___alloc_traits_rebind_other = __gnu_cxx___alloc_traits__Base_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___aligned_membuf {
    pub _M_storage: *mut ::std::os::raw::c_uchar,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___aligned_membuf__Tp2<_Tp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
    pub _M_t: _Tp,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___aligned_buffer {
    pub _M_storage: u8,
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN9__gnu_cxx27__verbose_terminate_handlerEv"]
    pub fn __gnu_cxx___verbose_terminate_handler();
}
pub const __gnu_cxx__Lock_policy__S_single: __gnu_cxx__Lock_policy = 0;
pub const __gnu_cxx__Lock_policy__S_mutex: __gnu_cxx__Lock_policy = 1;
pub const __gnu_cxx__Lock_policy__S_atomic: __gnu_cxx__Lock_policy = 2;
pub type __gnu_cxx__Lock_policy = ::std::os::raw::c_uint;
unsafe extern "C" {
    #[link_name = "\u{1}_ZN9__gnu_cxxL21__default_lock_policyE"]
    pub static __gnu_cxx___default_lock_policy: __gnu_cxx__Lock_policy;
}
#[repr(C)]
#[derive(Debug)]
pub struct __gnu_cxx___concurrence_lock_error {
    pub _base: std_exception,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __gnu_cxx___concurrence_lock_error"]
        [::std::mem::size_of::<__gnu_cxx___concurrence_lock_error>() - 8usize];
    ["Alignment of __gnu_cxx___concurrence_lock_error"]
        [::std::mem::align_of::<__gnu_cxx___concurrence_lock_error>() - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct __gnu_cxx___concurrence_unlock_error {
    pub _base: std_exception,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __gnu_cxx___concurrence_unlock_error"]
        [::std::mem::size_of::<__gnu_cxx___concurrence_unlock_error>() - 8usize];
    ["Alignment of __gnu_cxx___concurrence_unlock_error"]
        [::std::mem::align_of::<__gnu_cxx___concurrence_unlock_error>() - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct __gnu_cxx___concurrence_broadcast_error {
    pub _base: std_exception,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __gnu_cxx___concurrence_broadcast_error"]
        [::std::mem::size_of::<__gnu_cxx___concurrence_broadcast_error>() - 8usize];
    ["Alignment of __gnu_cxx___concurrence_broadcast_error"]
        [::std::mem::align_of::<__gnu_cxx___concurrence_broadcast_error>() - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct __gnu_cxx___concurrence_wait_error {
    pub _base: std_exception,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __gnu_cxx___concurrence_wait_error"]
        [::std::mem::size_of::<__gnu_cxx___concurrence_wait_error>() - 8usize];
    ["Alignment of __gnu_cxx___concurrence_wait_error"]
        [::std::mem::align_of::<__gnu_cxx___concurrence_wait_error>() - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __gnu_cxx___mutex {
    pub _M_mutex: __gthread_mutex_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __gnu_cxx___mutex"][::std::mem::size_of::<__gnu_cxx___mutex>() - 40usize];
    ["Alignment of __gnu_cxx___mutex"][::std::mem::align_of::<__gnu_cxx___mutex>() - 8usize];
    ["Offset of field: __gnu_cxx___mutex::_M_mutex"]
        [::std::mem::offset_of!(__gnu_cxx___mutex, _M_mutex) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __gnu_cxx___recursive_mutex {
    pub _M_mutex: __gthread_recursive_mutex_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __gnu_cxx___recursive_mutex"]
        [::std::mem::size_of::<__gnu_cxx___recursive_mutex>() - 40usize];
    ["Alignment of __gnu_cxx___recursive_mutex"]
        [::std::mem::align_of::<__gnu_cxx___recursive_mutex>() - 8usize];
    ["Offset of field: __gnu_cxx___recursive_mutex::_M_mutex"]
        [::std::mem::offset_of!(__gnu_cxx___recursive_mutex, _M_mutex) - 0usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct __gnu_cxx___scoped_lock {
    pub _M_device: *mut __gnu_cxx___scoped_lock___mutex_type,
}
pub type __gnu_cxx___scoped_lock___mutex_type = __gnu_cxx___mutex;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __gnu_cxx___scoped_lock"][::std::mem::size_of::<__gnu_cxx___scoped_lock>() - 8usize];
    ["Alignment of __gnu_cxx___scoped_lock"]
        [::std::mem::align_of::<__gnu_cxx___scoped_lock>() - 8usize];
    ["Offset of field: __gnu_cxx___scoped_lock::_M_device"]
        [::std::mem::offset_of!(__gnu_cxx___scoped_lock, _M_device) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __gnu_cxx___cond {
    pub _M_cond: __gthread_cond_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __gnu_cxx___cond"][::std::mem::size_of::<__gnu_cxx___cond>() - 48usize];
    ["Alignment of __gnu_cxx___cond"][::std::mem::align_of::<__gnu_cxx___cond>() - 8usize];
    ["Offset of field: __gnu_cxx___cond::_M_cond"]
        [::std::mem::offset_of!(__gnu_cxx___cond, _M_cond) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx__Char_types {
    pub _address: u8,
}
pub type __gnu_cxx__Char_types_int_type = ::std::os::raw::c_ulong;
pub type __gnu_cxx__Char_types_pos_type = std_streampos;
pub type __gnu_cxx__Char_types_off_type = std_streamoff;
pub type __gnu_cxx__Char_types_state_type = __mbstate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx_char_traits {
    pub _address: u8,
}
pub type __gnu_cxx_char_traits_char_type<_CharT> = _CharT;
pub type __gnu_cxx_char_traits_int_type = __gnu_cxx__Char_types;
pub type __gnu_cxx_char_traits_pos_type = __gnu_cxx__Char_types;
pub type __gnu_cxx_char_traits_off_type = __gnu_cxx__Char_types;
pub type __gnu_cxx_char_traits_state_type = __gnu_cxx__Char_types;
unsafe extern "C" {
    #[link_name = "\u{1}__uselocale"]
    pub fn __gnu_cxx___uselocale(arg1: locale_t) -> locale_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_debug__Safe_iterator {
    pub _address: u8,
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type wint_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t__bindgen_ty_1"]
        [::std::mem::size_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Alignment of __mbstate_t__bindgen_ty_1"]
        [::std::mem::align_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wch"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wch) - 0usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wchb"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wchb) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 8usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 4usize];
    ["Offset of field: __mbstate_t::__count"]
        [::std::mem::offset_of!(__mbstate_t, __count) - 0usize];
    ["Offset of field: __mbstate_t::__value"]
        [::std::mem::offset_of!(__mbstate_t, __value) - 4usize];
};
pub type mbstate_t = __mbstate_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __locale_struct"][::std::mem::size_of::<__locale_struct>() - 232usize];
    ["Alignment of __locale_struct"][::std::mem::align_of::<__locale_struct>() - 8usize];
    ["Offset of field: __locale_struct::__locales"]
        [::std::mem::offset_of!(__locale_struct, __locales) - 0usize];
    ["Offset of field: __locale_struct::__ctype_b"]
        [::std::mem::offset_of!(__locale_struct, __ctype_b) - 104usize];
    ["Offset of field: __locale_struct::__ctype_tolower"]
        [::std::mem::offset_of!(__locale_struct, __ctype_tolower) - 112usize];
    ["Offset of field: __locale_struct::__ctype_toupper"]
        [::std::mem::offset_of!(__locale_struct, __ctype_toupper) - 120usize];
    ["Offset of field: __locale_struct::__names"]
        [::std::mem::offset_of!(__locale_struct, __names) - 128usize];
};
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
unsafe extern "C" {
    pub fn wcscpy(__dest: *mut u32, __src: *const u32) -> *mut u32;
}
unsafe extern "C" {
    pub fn wcsncpy(__dest: *mut u32, __src: *const u32, __n: usize) -> *mut u32;
}
unsafe extern "C" {
    pub fn wcscat(__dest: *mut u32, __src: *const u32) -> *mut u32;
}
unsafe extern "C" {
    pub fn wcsncat(__dest: *mut u32, __src: *const u32, __n: usize) -> *mut u32;
}
unsafe extern "C" {
    pub fn wcscmp(__s1: *const u32, __s2: *const u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcsncmp(__s1: *const u32, __s2: *const u32, __n: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcscasecmp(__s1: *const u32, __s2: *const u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcsncasecmp(__s1: *const u32, __s2: *const u32, __n: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcscasecmp_l(
        __s1: *const u32,
        __s2: *const u32,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcsncasecmp_l(
        __s1: *const u32,
        __s2: *const u32,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcscoll(__s1: *const u32, __s2: *const u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcsxfrm(__s1: *mut u32, __s2: *const u32, __n: usize) -> usize;
}
unsafe extern "C" {
    pub fn wcscoll_l(__s1: *const u32, __s2: *const u32, __loc: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcsxfrm_l(__s1: *mut u32, __s2: *const u32, __n: usize, __loc: locale_t) -> usize;
}
unsafe extern "C" {
    pub fn wcsdup(__s: *const u32) -> *mut u32;
}
unsafe extern "C" {
    pub fn wcschr(__wcs: *const u32, __wc: u32) -> *mut u32;
}
unsafe extern "C" {
    pub fn wcsrchr(__wcs: *const u32, __wc: u32) -> *mut u32;
}
unsafe extern "C" {
    pub fn wcschrnul(__s: *const u32, __wc: u32) -> *mut u32;
}
unsafe extern "C" {
    pub fn wcscspn(__wcs: *const u32, __reject: *const u32) -> usize;
}
unsafe extern "C" {
    pub fn wcsspn(__wcs: *const u32, __accept: *const u32) -> usize;
}
unsafe extern "C" {
    pub fn wcspbrk(__wcs: *const u32, __accept: *const u32) -> *mut u32;
}
unsafe extern "C" {
    pub fn wcsstr(__haystack: *const u32, __needle: *const u32) -> *mut u32;
}
unsafe extern "C" {
    pub fn wcstok(__s: *mut u32, __delim: *const u32, __ptr: *mut *mut u32) -> *mut u32;
}
unsafe extern "C" {
    pub fn wcslen(__s: *const u32) -> usize;
}
unsafe extern "C" {
    pub fn wcswcs(__haystack: *const u32, __needle: *const u32) -> *mut u32;
}
unsafe extern "C" {
    pub fn wcsnlen(__s: *const u32, __maxlen: usize) -> usize;
}
unsafe extern "C" {
    pub fn wmemchr(__s: *const u32, __c: u32, __n: usize) -> *mut u32;
}
unsafe extern "C" {
    pub fn wmemcmp(__s1: *const u32, __s2: *const u32, __n: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wmemcpy(__s1: *mut u32, __s2: *const u32, __n: usize) -> *mut u32;
}
unsafe extern "C" {
    pub fn wmemmove(__s1: *mut u32, __s2: *const u32, __n: usize) -> *mut u32;
}
unsafe extern "C" {
    pub fn wmemset(__s: *mut u32, __c: u32, __n: usize) -> *mut u32;
}
unsafe extern "C" {
    pub fn wmempcpy(__s1: *mut u32, __s2: *const u32, __n: usize) -> *mut u32;
}
unsafe extern "C" {
    pub fn btowc(__c: ::std::os::raw::c_int) -> wint_t;
}
unsafe extern "C" {
    pub fn wctob(__c: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mbsinit(__ps: *const mbstate_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mbrtowc(
        __pwc: *mut u32,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
        __p: *mut mbstate_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn wcrtomb(__s: *mut ::std::os::raw::c_char, __wc: u32, __ps: *mut mbstate_t) -> usize;
}
unsafe extern "C" {
    pub fn __mbrlen(__s: *const ::std::os::raw::c_char, __n: usize, __ps: *mut mbstate_t) -> usize;
}
unsafe extern "C" {
    pub fn mbrlen(__s: *const ::std::os::raw::c_char, __n: usize, __ps: *mut mbstate_t) -> usize;
}
unsafe extern "C" {
    pub fn mbsrtowcs(
        __dst: *mut u32,
        __src: *mut *const ::std::os::raw::c_char,
        __len: usize,
        __ps: *mut mbstate_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn wcsrtombs(
        __dst: *mut ::std::os::raw::c_char,
        __src: *mut *const u32,
        __len: usize,
        __ps: *mut mbstate_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn mbsnrtowcs(
        __dst: *mut u32,
        __src: *mut *const ::std::os::raw::c_char,
        __nmc: usize,
        __len: usize,
        __ps: *mut mbstate_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn wcsnrtombs(
        __dst: *mut ::std::os::raw::c_char,
        __src: *mut *const u32,
        __nwc: usize,
        __len: usize,
        __ps: *mut mbstate_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn wcwidth(__c: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcswidth(__s: *const u32, __n: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcstod(__nptr: *const u32, __endptr: *mut *mut u32) -> f64;
}
unsafe extern "C" {
    pub fn wcstof(__nptr: *const u32, __endptr: *mut *mut u32) -> f32;
}
unsafe extern "C" {
    pub fn wcstold(__nptr: *const u32, __endptr: *mut *mut u32) -> u128;
}
unsafe extern "C" {
    pub fn wcstof32(__nptr: *const u32, __endptr: *mut *mut u32) -> _Float32;
}
unsafe extern "C" {
    pub fn wcstof64(__nptr: *const u32, __endptr: *mut *mut u32) -> _Float64;
}
unsafe extern "C" {
    pub fn wcstof32x(__nptr: *const u32, __endptr: *mut *mut u32) -> _Float32x;
}
unsafe extern "C" {
    pub fn wcstof64x(__nptr: *const u32, __endptr: *mut *mut u32) -> _Float64x;
}
unsafe extern "C" {
    pub fn wcstol(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn wcstoul(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn wcstoll(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn wcstoull(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn wcstoq(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn wcstouq(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn wcstol_l(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn wcstoul_l(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn wcstoll_l(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn wcstoull_l(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn wcstod_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: locale_t) -> f64;
}
unsafe extern "C" {
    pub fn wcstof_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: locale_t) -> f32;
}
unsafe extern "C" {
    pub fn wcstold_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: locale_t) -> u128;
}
unsafe extern "C" {
    pub fn wcstof32_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: locale_t) -> _Float32;
}
unsafe extern "C" {
    pub fn wcstof64_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: locale_t) -> _Float64;
}
unsafe extern "C" {
    pub fn wcstof32x_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: locale_t) -> _Float32x;
}
unsafe extern "C" {
    pub fn wcstof64x_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: locale_t) -> _Float64x;
}
unsafe extern "C" {
    pub fn wcpcpy(__dest: *mut u32, __src: *const u32) -> *mut u32;
}
unsafe extern "C" {
    pub fn wcpncpy(__dest: *mut u32, __src: *const u32, __n: usize) -> *mut u32;
}
unsafe extern "C" {
    pub fn open_wmemstream(__bufloc: *mut *mut u32, __sizeloc: *mut usize) -> *mut __FILE;
}
unsafe extern "C" {
    pub fn fwide(__fp: *mut __FILE, __mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fwprintf(__stream: *mut __FILE, __format: *const u32, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wprintf(__format: *const u32, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn swprintf(__s: *mut u32, __n: usize, __format: *const u32, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vfwprintf(
        __s: *mut __FILE,
        __format: *const u32,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vwprintf(__format: *const u32, __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vswprintf(
        __s: *mut u32,
        __n: usize,
        __format: *const u32,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fwscanf(__stream: *mut __FILE, __format: *const u32, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wscanf(__format: *const u32, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn swscanf(__s: *const u32, __format: *const u32, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_fwscanf"]
    pub fn fwscanf1(__stream: *mut __FILE, __format: *const u32, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_wscanf"]
    pub fn wscanf1(__format: *const u32, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_swscanf"]
    pub fn swscanf1(__s: *const u32, __format: *const u32, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vfwscanf(
        __s: *mut __FILE,
        __format: *const u32,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vwscanf(__format: *const u32, __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vswscanf(
        __s: *const u32,
        __format: *const u32,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_vfwscanf"]
    pub fn vfwscanf1(
        __s: *mut __FILE,
        __format: *const u32,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_vwscanf"]
    pub fn vwscanf1(__format: *const u32, __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_vswscanf"]
    pub fn vswscanf1(
        __s: *const u32,
        __format: *const u32,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetwc(__stream: *mut __FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn getwc(__stream: *mut __FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn getwchar() -> wint_t;
}
unsafe extern "C" {
    pub fn fputwc(__wc: u32, __stream: *mut __FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn putwc(__wc: u32, __stream: *mut __FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn putwchar(__wc: u32) -> wint_t;
}
unsafe extern "C" {
    pub fn fgetws(__ws: *mut u32, __n: ::std::os::raw::c_int, __stream: *mut __FILE) -> *mut u32;
}
unsafe extern "C" {
    pub fn fputws(__ws: *const u32, __stream: *mut __FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ungetwc(__wc: wint_t, __stream: *mut __FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn getwc_unlocked(__stream: *mut __FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn getwchar_unlocked() -> wint_t;
}
unsafe extern "C" {
    pub fn fgetwc_unlocked(__stream: *mut __FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn fputwc_unlocked(__wc: u32, __stream: *mut __FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn putwc_unlocked(__wc: u32, __stream: *mut __FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn putwchar_unlocked(__wc: u32) -> wint_t;
}
unsafe extern "C" {
    pub fn fgetws_unlocked(
        __ws: *mut u32,
        __n: ::std::os::raw::c_int,
        __stream: *mut __FILE,
    ) -> *mut u32;
}
unsafe extern "C" {
    pub fn fputws_unlocked(__ws: *const u32, __stream: *mut __FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcsftime(
        __s: *mut u32,
        __maxsize: usize,
        __format: *const u32,
        __tp: *const tm,
    ) -> usize;
}
unsafe extern "C" {
    pub fn wcsftime_l(
        __s: *mut u32,
        __maxsize: usize,
        __format: *const u32,
        __tp: *const tm,
        __loc: locale_t,
    ) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __cxxabiv1___class_type_info {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __cxxabiv1___cxa_refcounted_exception {
    _unused: [u8; 0],
}
unsafe extern "C" {
    #[link_name = "\u{1}__cxa_allocate_exception"]
    pub fn __cxxabiv1___cxa_allocate_exception(arg1: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    #[link_name = "\u{1}__cxa_free_exception"]
    pub fn __cxxabiv1___cxa_free_exception(arg1: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    #[link_name = "\u{1}__cxa_init_primary_exception"]
    pub fn __cxxabiv1___cxa_init_primary_exception(
        object: *mut ::std::os::raw::c_void,
        tinfo: *mut std_type_info,
        dest: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ) -> *mut __cxxabiv1___cxa_refcounted_exception;
}
#[repr(C)]
pub struct __cxxabiv1___forced_unwind__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct __cxxabiv1___forced_unwind {
    pub vtable_: *const __cxxabiv1___forced_unwind__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __cxxabiv1___forced_unwind"]
        [::std::mem::size_of::<__cxxabiv1___forced_unwind>() - 8usize];
    ["Alignment of __cxxabiv1___forced_unwind"]
        [::std::mem::align_of::<__cxxabiv1___forced_unwind>() - 8usize];
};
pub type time_t = __time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
pub type pid_t = __pid_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sched_param"][::std::mem::size_of::<sched_param>() - 4usize];
    ["Alignment of sched_param"][::std::mem::align_of::<sched_param>() - 4usize];
    ["Offset of field: sched_param::sched_priority"]
        [::std::mem::offset_of!(sched_param, sched_priority) - 0usize];
};
unsafe extern "C" {
    pub fn clone(
        __fn: ::std::option::Option<
            unsafe extern "C" fn(__arg: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
        __child_stack: *mut ::std::os::raw::c_void,
        __flags: ::std::os::raw::c_int,
        __arg: *mut ::std::os::raw::c_void,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn unshare(__flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sched_getcpu() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getcpu(
        arg1: *mut ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setns(
        __fd: ::std::os::raw::c_int,
        __nstype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type __cpu_mask = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_set_t {
    pub __bits: [__cpu_mask; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_set_t"][::std::mem::size_of::<cpu_set_t>() - 128usize];
    ["Alignment of cpu_set_t"][::std::mem::align_of::<cpu_set_t>() - 8usize];
    ["Offset of field: cpu_set_t::__bits"][::std::mem::offset_of!(cpu_set_t, __bits) - 0usize];
};
unsafe extern "C" {
    pub fn __sched_cpucount(__setsize: usize, __setp: *const cpu_set_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __sched_cpualloc(__count: usize) -> *mut cpu_set_t;
}
unsafe extern "C" {
    pub fn __sched_cpufree(__set: *mut cpu_set_t);
}
unsafe extern "C" {
    pub fn sched_setparam(__pid: __pid_t, __param: *const sched_param) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sched_getparam(__pid: __pid_t, __param: *mut sched_param) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sched_setscheduler(
        __pid: __pid_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sched_getscheduler(__pid: __pid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sched_yield() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sched_get_priority_max(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sched_get_priority_min(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sched_rr_get_interval(__pid: __pid_t, __t: *mut timespec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sched_setaffinity(
        __pid: __pid_t,
        __cpusetsize: usize,
        __cpuset: *const cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sched_getaffinity(
        __pid: __pid_t,
        __cpusetsize: usize,
        __cpuset: *mut cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timex {
    pub modes: ::std::os::raw::c_uint,
    pub offset: __syscall_slong_t,
    pub freq: __syscall_slong_t,
    pub maxerror: __syscall_slong_t,
    pub esterror: __syscall_slong_t,
    pub status: ::std::os::raw::c_int,
    pub constant: __syscall_slong_t,
    pub precision: __syscall_slong_t,
    pub tolerance: __syscall_slong_t,
    pub time: timeval,
    pub tick: __syscall_slong_t,
    pub ppsfreq: __syscall_slong_t,
    pub jitter: __syscall_slong_t,
    pub shift: ::std::os::raw::c_int,
    pub stabil: __syscall_slong_t,
    pub jitcnt: __syscall_slong_t,
    pub calcnt: __syscall_slong_t,
    pub errcnt: __syscall_slong_t,
    pub stbcnt: __syscall_slong_t,
    pub tai: ::std::os::raw::c_int,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 44usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timex"][::std::mem::size_of::<timex>() - 208usize];
    ["Alignment of timex"][::std::mem::align_of::<timex>() - 8usize];
    ["Offset of field: timex::modes"][::std::mem::offset_of!(timex, modes) - 0usize];
    ["Offset of field: timex::offset"][::std::mem::offset_of!(timex, offset) - 8usize];
    ["Offset of field: timex::freq"][::std::mem::offset_of!(timex, freq) - 16usize];
    ["Offset of field: timex::maxerror"][::std::mem::offset_of!(timex, maxerror) - 24usize];
    ["Offset of field: timex::esterror"][::std::mem::offset_of!(timex, esterror) - 32usize];
    ["Offset of field: timex::status"][::std::mem::offset_of!(timex, status) - 40usize];
    ["Offset of field: timex::constant"][::std::mem::offset_of!(timex, constant) - 48usize];
    ["Offset of field: timex::precision"][::std::mem::offset_of!(timex, precision) - 56usize];
    ["Offset of field: timex::tolerance"][::std::mem::offset_of!(timex, tolerance) - 64usize];
    ["Offset of field: timex::time"][::std::mem::offset_of!(timex, time) - 72usize];
    ["Offset of field: timex::tick"][::std::mem::offset_of!(timex, tick) - 88usize];
    ["Offset of field: timex::ppsfreq"][::std::mem::offset_of!(timex, ppsfreq) - 96usize];
    ["Offset of field: timex::jitter"][::std::mem::offset_of!(timex, jitter) - 104usize];
    ["Offset of field: timex::shift"][::std::mem::offset_of!(timex, shift) - 112usize];
    ["Offset of field: timex::stabil"][::std::mem::offset_of!(timex, stabil) - 120usize];
    ["Offset of field: timex::jitcnt"][::std::mem::offset_of!(timex, jitcnt) - 128usize];
    ["Offset of field: timex::calcnt"][::std::mem::offset_of!(timex, calcnt) - 136usize];
    ["Offset of field: timex::errcnt"][::std::mem::offset_of!(timex, errcnt) - 144usize];
    ["Offset of field: timex::stbcnt"][::std::mem::offset_of!(timex, stbcnt) - 152usize];
    ["Offset of field: timex::tai"][::std::mem::offset_of!(timex, tai) - 160usize];
};
unsafe extern "C" {
    pub fn clock_adjtime(__clock_id: __clockid_t, __utx: *mut timex) -> ::std::os::raw::c_int;
}
pub type clock_t = __clock_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tm"][::std::mem::size_of::<tm>() - 56usize];
    ["Alignment of tm"][::std::mem::align_of::<tm>() - 8usize];
    ["Offset of field: tm::tm_sec"][::std::mem::offset_of!(tm, tm_sec) - 0usize];
    ["Offset of field: tm::tm_min"][::std::mem::offset_of!(tm, tm_min) - 4usize];
    ["Offset of field: tm::tm_hour"][::std::mem::offset_of!(tm, tm_hour) - 8usize];
    ["Offset of field: tm::tm_mday"][::std::mem::offset_of!(tm, tm_mday) - 12usize];
    ["Offset of field: tm::tm_mon"][::std::mem::offset_of!(tm, tm_mon) - 16usize];
    ["Offset of field: tm::tm_year"][::std::mem::offset_of!(tm, tm_year) - 20usize];
    ["Offset of field: tm::tm_wday"][::std::mem::offset_of!(tm, tm_wday) - 24usize];
    ["Offset of field: tm::tm_yday"][::std::mem::offset_of!(tm, tm_yday) - 28usize];
    ["Offset of field: tm::tm_isdst"][::std::mem::offset_of!(tm, tm_isdst) - 32usize];
    ["Offset of field: tm::tm_gmtoff"][::std::mem::offset_of!(tm, tm_gmtoff) - 40usize];
    ["Offset of field: tm::tm_zone"][::std::mem::offset_of!(tm, tm_zone) - 48usize];
};
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of itimerspec"][::std::mem::size_of::<itimerspec>() - 32usize];
    ["Alignment of itimerspec"][::std::mem::align_of::<itimerspec>() - 8usize];
    ["Offset of field: itimerspec::it_interval"]
        [::std::mem::offset_of!(itimerspec, it_interval) - 0usize];
    ["Offset of field: itimerspec::it_value"]
        [::std::mem::offset_of!(itimerspec, it_value) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub fn clock() -> clock_t;
}
unsafe extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
unsafe extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
unsafe extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
unsafe extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> usize;
}
unsafe extern "C" {
    pub fn strptime(
        __s: *const ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        __tp: *mut tm,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn strptime_l(
        __s: *const ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        __tp: *mut tm,
        __loc: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
unsafe extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
unsafe extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
unsafe extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
unsafe extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
unsafe extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
unsafe extern "C" {
    pub fn tzset();
}
unsafe extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
unsafe extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
unsafe extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timespec_getres(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut getdate_err: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getdate(__string: *const ::std::os::raw::c_char) -> *mut tm;
}
unsafe extern "C" {
    pub fn getdate_r(
        __string: *const ::std::os::raw::c_char,
        __resbufp: *mut tm,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>() - 8usize];
    ["Alignment of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>() - 4usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__low"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __low) - 0usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__high"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __high) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter"][::std::mem::size_of::<__atomic_wide_counter>() - 8usize];
    ["Alignment of __atomic_wide_counter"]
        [::std::mem::align_of::<__atomic_wide_counter>() - 8usize];
    ["Offset of field: __atomic_wide_counter::__value64"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value64) - 0usize];
    ["Offset of field: __atomic_wide_counter::__value32"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value32) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_list"][::std::mem::size_of::<__pthread_internal_list>() - 16usize];
    ["Alignment of __pthread_internal_list"]
        [::std::mem::align_of::<__pthread_internal_list>() - 8usize];
    ["Offset of field: __pthread_internal_list::__prev"]
        [::std::mem::offset_of!(__pthread_internal_list, __prev) - 0usize];
    ["Offset of field: __pthread_internal_list::__next"]
        [::std::mem::offset_of!(__pthread_internal_list, __next) - 8usize];
};
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_slist"]
        [::std::mem::size_of::<__pthread_internal_slist>() - 8usize];
    ["Alignment of __pthread_internal_slist"]
        [::std::mem::align_of::<__pthread_internal_slist>() - 8usize];
    ["Offset of field: __pthread_internal_slist::__next"]
        [::std::mem::offset_of!(__pthread_internal_slist, __next) - 0usize];
};
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_mutex_s"][::std::mem::size_of::<__pthread_mutex_s>() - 40usize];
    ["Alignment of __pthread_mutex_s"][::std::mem::align_of::<__pthread_mutex_s>() - 8usize];
    ["Offset of field: __pthread_mutex_s::__lock"]
        [::std::mem::offset_of!(__pthread_mutex_s, __lock) - 0usize];
    ["Offset of field: __pthread_mutex_s::__count"]
        [::std::mem::offset_of!(__pthread_mutex_s, __count) - 4usize];
    ["Offset of field: __pthread_mutex_s::__owner"]
        [::std::mem::offset_of!(__pthread_mutex_s, __owner) - 8usize];
    ["Offset of field: __pthread_mutex_s::__nusers"]
        [::std::mem::offset_of!(__pthread_mutex_s, __nusers) - 12usize];
    ["Offset of field: __pthread_mutex_s::__kind"]
        [::std::mem::offset_of!(__pthread_mutex_s, __kind) - 16usize];
    ["Offset of field: __pthread_mutex_s::__spins"]
        [::std::mem::offset_of!(__pthread_mutex_s, __spins) - 20usize];
    ["Offset of field: __pthread_mutex_s::__elision"]
        [::std::mem::offset_of!(__pthread_mutex_s, __elision) - 22usize];
    ["Offset of field: __pthread_mutex_s::__list"]
        [::std::mem::offset_of!(__pthread_mutex_s, __list) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_rwlock_arch_t"][::std::mem::size_of::<__pthread_rwlock_arch_t>() - 56usize];
    ["Alignment of __pthread_rwlock_arch_t"]
        [::std::mem::align_of::<__pthread_rwlock_arch_t>() - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__readers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __readers) - 0usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers) - 4usize];
    ["Offset of field: __pthread_rwlock_arch_t::__wrphase_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __wrphase_futex) - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers_futex) - 12usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad3"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad3) - 16usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad4"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad4) - 20usize];
    ["Offset of field: __pthread_rwlock_arch_t::__cur_writer"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __cur_writer) - 24usize];
    ["Offset of field: __pthread_rwlock_arch_t::__shared"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __shared) - 28usize];
    ["Offset of field: __pthread_rwlock_arch_t::__rwelision"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __rwelision) - 32usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad1"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad1) - 33usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad2"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad2) - 40usize];
    ["Offset of field: __pthread_rwlock_arch_t::__flags"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __flags) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s"][::std::mem::size_of::<__pthread_cond_s>() - 48usize];
    ["Alignment of __pthread_cond_s"][::std::mem::align_of::<__pthread_cond_s>() - 8usize];
    ["Offset of field: __pthread_cond_s::__wseq"]
        [::std::mem::offset_of!(__pthread_cond_s, __wseq) - 0usize];
    ["Offset of field: __pthread_cond_s::__g1_start"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_start) - 8usize];
    ["Offset of field: __pthread_cond_s::__g_refs"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_refs) - 16usize];
    ["Offset of field: __pthread_cond_s::__g_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_size) - 24usize];
    ["Offset of field: __pthread_cond_s::__g1_orig_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_orig_size) - 32usize];
    ["Offset of field: __pthread_cond_s::__wrefs"]
        [::std::mem::offset_of!(__pthread_cond_s, __wrefs) - 36usize];
    ["Offset of field: __pthread_cond_s::__g_signals"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_signals) - 40usize];
};
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __once_flag"][::std::mem::size_of::<__once_flag>() - 4usize];
    ["Alignment of __once_flag"][::std::mem::align_of::<__once_flag>() - 4usize];
    ["Offset of field: __once_flag::__data"][::std::mem::offset_of!(__once_flag, __data) - 0usize];
};
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutexattr_t"][::std::mem::size_of::<pthread_mutexattr_t>() - 4usize];
    ["Alignment of pthread_mutexattr_t"][::std::mem::align_of::<pthread_mutexattr_t>() - 4usize];
    ["Offset of field: pthread_mutexattr_t::__size"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __size) - 0usize];
    ["Offset of field: pthread_mutexattr_t::__align"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_condattr_t"][::std::mem::size_of::<pthread_condattr_t>() - 4usize];
    ["Alignment of pthread_condattr_t"][::std::mem::align_of::<pthread_condattr_t>() - 4usize];
    ["Offset of field: pthread_condattr_t::__size"]
        [::std::mem::offset_of!(pthread_condattr_t, __size) - 0usize];
    ["Offset of field: pthread_condattr_t::__align"]
        [::std::mem::offset_of!(pthread_condattr_t, __align) - 0usize];
};
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_attr_t"][::std::mem::size_of::<pthread_attr_t>() - 56usize];
    ["Alignment of pthread_attr_t"][::std::mem::align_of::<pthread_attr_t>() - 8usize];
    ["Offset of field: pthread_attr_t::__size"]
        [::std::mem::offset_of!(pthread_attr_t, __size) - 0usize];
    ["Offset of field: pthread_attr_t::__align"]
        [::std::mem::offset_of!(pthread_attr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutex_t"][::std::mem::size_of::<pthread_mutex_t>() - 40usize];
    ["Alignment of pthread_mutex_t"][::std::mem::align_of::<pthread_mutex_t>() - 8usize];
    ["Offset of field: pthread_mutex_t::__data"]
        [::std::mem::offset_of!(pthread_mutex_t, __data) - 0usize];
    ["Offset of field: pthread_mutex_t::__size"]
        [::std::mem::offset_of!(pthread_mutex_t, __size) - 0usize];
    ["Offset of field: pthread_mutex_t::__align"]
        [::std::mem::offset_of!(pthread_mutex_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_cond_t"][::std::mem::size_of::<pthread_cond_t>() - 48usize];
    ["Alignment of pthread_cond_t"][::std::mem::align_of::<pthread_cond_t>() - 8usize];
    ["Offset of field: pthread_cond_t::__data"]
        [::std::mem::offset_of!(pthread_cond_t, __data) - 0usize];
    ["Offset of field: pthread_cond_t::__size"]
        [::std::mem::offset_of!(pthread_cond_t, __size) - 0usize];
    ["Offset of field: pthread_cond_t::__align"]
        [::std::mem::offset_of!(pthread_cond_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlock_t"][::std::mem::size_of::<pthread_rwlock_t>() - 56usize];
    ["Alignment of pthread_rwlock_t"][::std::mem::align_of::<pthread_rwlock_t>() - 8usize];
    ["Offset of field: pthread_rwlock_t::__data"]
        [::std::mem::offset_of!(pthread_rwlock_t, __data) - 0usize];
    ["Offset of field: pthread_rwlock_t::__size"]
        [::std::mem::offset_of!(pthread_rwlock_t, __size) - 0usize];
    ["Offset of field: pthread_rwlock_t::__align"]
        [::std::mem::offset_of!(pthread_rwlock_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlockattr_t"][::std::mem::size_of::<pthread_rwlockattr_t>() - 8usize];
    ["Alignment of pthread_rwlockattr_t"][::std::mem::align_of::<pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: pthread_rwlockattr_t::__size"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __size) - 0usize];
    ["Offset of field: pthread_rwlockattr_t::__align"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __align) - 0usize];
};
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrier_t"][::std::mem::size_of::<pthread_barrier_t>() - 32usize];
    ["Alignment of pthread_barrier_t"][::std::mem::align_of::<pthread_barrier_t>() - 8usize];
    ["Offset of field: pthread_barrier_t::__size"]
        [::std::mem::offset_of!(pthread_barrier_t, __size) - 0usize];
    ["Offset of field: pthread_barrier_t::__align"]
        [::std::mem::offset_of!(pthread_barrier_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrierattr_t"][::std::mem::size_of::<pthread_barrierattr_t>() - 4usize];
    ["Alignment of pthread_barrierattr_t"]
        [::std::mem::align_of::<pthread_barrierattr_t>() - 4usize];
    ["Offset of field: pthread_barrierattr_t::__size"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __size) - 0usize];
    ["Offset of field: pthread_barrierattr_t::__align"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __align) - 0usize];
};
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigset_t"][::std::mem::size_of::<__sigset_t>() - 128usize];
    ["Alignment of __sigset_t"][::std::mem::align_of::<__sigset_t>() - 8usize];
    ["Offset of field: __sigset_t::__val"][::std::mem::offset_of!(__sigset_t, __val) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask: __sigset_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __jmp_buf_tag"][::std::mem::size_of::<__jmp_buf_tag>() - 200usize];
    ["Alignment of __jmp_buf_tag"][::std::mem::align_of::<__jmp_buf_tag>() - 8usize];
    ["Offset of field: __jmp_buf_tag::__jmpbuf"]
        [::std::mem::offset_of!(__jmp_buf_tag, __jmpbuf) - 0usize];
    ["Offset of field: __jmp_buf_tag::__mask_was_saved"]
        [::std::mem::offset_of!(__jmp_buf_tag, __mask_was_saved) - 64usize];
    ["Offset of field: __jmp_buf_tag::__saved_mask"]
        [::std::mem::offset_of!(__jmp_buf_tag, __saved_mask) - 72usize];
};
unsafe extern "C" {
    pub fn __sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
pub const PTHREAD_CREATE_JOINABLE: _bindgen_ty_43 = 0;
pub const PTHREAD_CREATE_DETACHED: _bindgen_ty_43 = 1;
pub type _bindgen_ty_43 = ::std::os::raw::c_uint;
pub const PTHREAD_MUTEX_TIMED_NP: _bindgen_ty_44 = 0;
pub const PTHREAD_MUTEX_RECURSIVE_NP: _bindgen_ty_44 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK_NP: _bindgen_ty_44 = 2;
pub const PTHREAD_MUTEX_ADAPTIVE_NP: _bindgen_ty_44 = 3;
pub const PTHREAD_MUTEX_NORMAL: _bindgen_ty_44 = 0;
pub const PTHREAD_MUTEX_RECURSIVE: _bindgen_ty_44 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK: _bindgen_ty_44 = 2;
pub const PTHREAD_MUTEX_DEFAULT: _bindgen_ty_44 = 0;
pub const PTHREAD_MUTEX_FAST_NP: _bindgen_ty_44 = 0;
pub type _bindgen_ty_44 = ::std::os::raw::c_uint;
pub const PTHREAD_MUTEX_STALLED: _bindgen_ty_45 = 0;
pub const PTHREAD_MUTEX_STALLED_NP: _bindgen_ty_45 = 0;
pub const PTHREAD_MUTEX_ROBUST: _bindgen_ty_45 = 1;
pub const PTHREAD_MUTEX_ROBUST_NP: _bindgen_ty_45 = 1;
pub type _bindgen_ty_45 = ::std::os::raw::c_uint;
pub const PTHREAD_PRIO_NONE: _bindgen_ty_46 = 0;
pub const PTHREAD_PRIO_INHERIT: _bindgen_ty_46 = 1;
pub const PTHREAD_PRIO_PROTECT: _bindgen_ty_46 = 2;
pub type _bindgen_ty_46 = ::std::os::raw::c_uint;
pub const PTHREAD_RWLOCK_PREFER_READER_NP: _bindgen_ty_47 = 0;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: _bindgen_ty_47 = 1;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: _bindgen_ty_47 = 2;
pub const PTHREAD_RWLOCK_DEFAULT_NP: _bindgen_ty_47 = 0;
pub type _bindgen_ty_47 = ::std::os::raw::c_uint;
pub const PTHREAD_INHERIT_SCHED: _bindgen_ty_48 = 0;
pub const PTHREAD_EXPLICIT_SCHED: _bindgen_ty_48 = 1;
pub type _bindgen_ty_48 = ::std::os::raw::c_uint;
pub const PTHREAD_SCOPE_SYSTEM: _bindgen_ty_49 = 0;
pub const PTHREAD_SCOPE_PROCESS: _bindgen_ty_49 = 1;
pub type _bindgen_ty_49 = ::std::os::raw::c_uint;
pub const PTHREAD_PROCESS_PRIVATE: _bindgen_ty_50 = 0;
pub const PTHREAD_PROCESS_SHARED: _bindgen_ty_50 = 1;
pub type _bindgen_ty_50 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pthread_cleanup_buffer {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __canceltype: ::std::os::raw::c_int,
    pub __prev: *mut _pthread_cleanup_buffer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _pthread_cleanup_buffer"][::std::mem::size_of::<_pthread_cleanup_buffer>() - 32usize];
    ["Alignment of _pthread_cleanup_buffer"]
        [::std::mem::align_of::<_pthread_cleanup_buffer>() - 8usize];
    ["Offset of field: _pthread_cleanup_buffer::__routine"]
        [::std::mem::offset_of!(_pthread_cleanup_buffer, __routine) - 0usize];
    ["Offset of field: _pthread_cleanup_buffer::__arg"]
        [::std::mem::offset_of!(_pthread_cleanup_buffer, __arg) - 8usize];
    ["Offset of field: _pthread_cleanup_buffer::__canceltype"]
        [::std::mem::offset_of!(_pthread_cleanup_buffer, __canceltype) - 16usize];
    ["Offset of field: _pthread_cleanup_buffer::__prev"]
        [::std::mem::offset_of!(_pthread_cleanup_buffer, __prev) - 24usize];
};
pub const PTHREAD_CANCEL_ENABLE: _bindgen_ty_51 = 0;
pub const PTHREAD_CANCEL_DISABLE: _bindgen_ty_51 = 1;
pub type _bindgen_ty_51 = ::std::os::raw::c_uint;
pub const PTHREAD_CANCEL_DEFERRED: _bindgen_ty_52 = 0;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: _bindgen_ty_52 = 1;
pub type _bindgen_ty_52 = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn pthread_create(
        __newthread: *mut pthread_t,
        __attr: *const pthread_attr_t,
        __start_routine: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_exit(__retval: *mut ::std::os::raw::c_void) -> !;
}
unsafe extern "C" {
    pub fn pthread_join(
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_tryjoin_np(
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_timedjoin_np(
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_clockjoin_np(
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
        __clockid: clockid_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_detach(__th: pthread_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_self() -> pthread_t;
}
unsafe extern "C" {
    pub fn pthread_equal(__thread1: pthread_t, __thread2: pthread_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_init(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_destroy(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getdetachstate(
        __attr: *const pthread_attr_t,
        __detachstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setdetachstate(
        __attr: *mut pthread_attr_t,
        __detachstate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getguardsize(
        __attr: *const pthread_attr_t,
        __guardsize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setguardsize(
        __attr: *mut pthread_attr_t,
        __guardsize: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getschedparam(
        __attr: *const pthread_attr_t,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setschedparam(
        __attr: *mut pthread_attr_t,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getschedpolicy(
        __attr: *const pthread_attr_t,
        __policy: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setschedpolicy(
        __attr: *mut pthread_attr_t,
        __policy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getinheritsched(
        __attr: *const pthread_attr_t,
        __inherit: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setinheritsched(
        __attr: *mut pthread_attr_t,
        __inherit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getscope(
        __attr: *const pthread_attr_t,
        __scope: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setscope(
        __attr: *mut pthread_attr_t,
        __scope: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getstackaddr(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setstackaddr(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getstacksize(
        __attr: *const pthread_attr_t,
        __stacksize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setstacksize(
        __attr: *mut pthread_attr_t,
        __stacksize: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getstack(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
        __stacksize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setstack(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
        __stacksize: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setaffinity_np(
        __attr: *mut pthread_attr_t,
        __cpusetsize: usize,
        __cpuset: *const cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getaffinity_np(
        __attr: *const pthread_attr_t,
        __cpusetsize: usize,
        __cpuset: *mut cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_getattr_default_np(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setsigmask_np(
        __attr: *mut pthread_attr_t,
        sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getsigmask_np(
        __attr: *const pthread_attr_t,
        sigmask: *mut __sigset_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_setattr_default_np(__attr: *const pthread_attr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_getattr_np(
        __th: pthread_t,
        __attr: *mut pthread_attr_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_setschedparam(
        __target_thread: pthread_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_getschedparam(
        __target_thread: pthread_t,
        __policy: *mut ::std::os::raw::c_int,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_setschedprio(
        __target_thread: pthread_t,
        __prio: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_getname_np(
        __target_thread: pthread_t,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_setname_np(
        __target_thread: pthread_t,
        __name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_getconcurrency() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_setconcurrency(__level: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_yield() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_setaffinity_np(
        __th: pthread_t,
        __cpusetsize: usize,
        __cpuset: *const cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_getaffinity_np(
        __th: pthread_t,
        __cpusetsize: usize,
        __cpuset: *mut cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_once(
        __once_control: *mut pthread_once_t,
        __init_routine: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_setcancelstate(
        __state: ::std::os::raw::c_int,
        __oldstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_setcanceltype(
        __type: ::std::os::raw::c_int,
        __oldtype: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cancel(__th: pthread_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_testcancel();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __cancel_jmp_buf_tag {
    pub __cancel_jmp_buf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __cancel_jmp_buf_tag"][::std::mem::size_of::<__cancel_jmp_buf_tag>() - 72usize];
    ["Alignment of __cancel_jmp_buf_tag"][::std::mem::align_of::<__cancel_jmp_buf_tag>() - 8usize];
    ["Offset of field: __cancel_jmp_buf_tag::__cancel_jmp_buf"]
        [::std::mem::offset_of!(__cancel_jmp_buf_tag, __cancel_jmp_buf) - 0usize];
    ["Offset of field: __cancel_jmp_buf_tag::__mask_was_saved"]
        [::std::mem::offset_of!(__cancel_jmp_buf_tag, __mask_was_saved) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_unwind_buf_t {
    pub __cancel_jmp_buf: [__cancel_jmp_buf_tag; 1usize],
    pub __pad: [*mut ::std::os::raw::c_void; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_unwind_buf_t"][::std::mem::size_of::<__pthread_unwind_buf_t>() - 104usize];
    ["Alignment of __pthread_unwind_buf_t"]
        [::std::mem::align_of::<__pthread_unwind_buf_t>() - 8usize];
    ["Offset of field: __pthread_unwind_buf_t::__cancel_jmp_buf"]
        [::std::mem::offset_of!(__pthread_unwind_buf_t, __cancel_jmp_buf) - 0usize];
    ["Offset of field: __pthread_unwind_buf_t::__pad"]
        [::std::mem::offset_of!(__pthread_unwind_buf_t, __pad) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cleanup_frame {
    pub __cancel_routine:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __cancel_arg: *mut ::std::os::raw::c_void,
    pub __do_it: ::std::os::raw::c_int,
    pub __cancel_type: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cleanup_frame"][::std::mem::size_of::<__pthread_cleanup_frame>() - 24usize];
    ["Alignment of __pthread_cleanup_frame"]
        [::std::mem::align_of::<__pthread_cleanup_frame>() - 8usize];
    ["Offset of field: __pthread_cleanup_frame::__cancel_routine"]
        [::std::mem::offset_of!(__pthread_cleanup_frame, __cancel_routine) - 0usize];
    ["Offset of field: __pthread_cleanup_frame::__cancel_arg"]
        [::std::mem::offset_of!(__pthread_cleanup_frame, __cancel_arg) - 8usize];
    ["Offset of field: __pthread_cleanup_frame::__do_it"]
        [::std::mem::offset_of!(__pthread_cleanup_frame, __do_it) - 16usize];
    ["Offset of field: __pthread_cleanup_frame::__cancel_type"]
        [::std::mem::offset_of!(__pthread_cleanup_frame, __cancel_type) - 20usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct __pthread_cleanup_class {
    pub __cancel_routine:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __cancel_arg: *mut ::std::os::raw::c_void,
    pub __do_it: ::std::os::raw::c_int,
    pub __cancel_type: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cleanup_class"][::std::mem::size_of::<__pthread_cleanup_class>() - 24usize];
    ["Alignment of __pthread_cleanup_class"]
        [::std::mem::align_of::<__pthread_cleanup_class>() - 8usize];
    ["Offset of field: __pthread_cleanup_class::__cancel_routine"]
        [::std::mem::offset_of!(__pthread_cleanup_class, __cancel_routine) - 0usize];
    ["Offset of field: __pthread_cleanup_class::__cancel_arg"]
        [::std::mem::offset_of!(__pthread_cleanup_class, __cancel_arg) - 8usize];
    ["Offset of field: __pthread_cleanup_class::__do_it"]
        [::std::mem::offset_of!(__pthread_cleanup_class, __do_it) - 16usize];
    ["Offset of field: __pthread_cleanup_class::__cancel_type"]
        [::std::mem::offset_of!(__pthread_cleanup_class, __cancel_type) - 20usize];
};
unsafe extern "C" {
    pub fn __sigsetjmp(
        __env: *mut __jmp_buf_tag,
        __savemask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_init(
        __mutex: *mut pthread_mutex_t,
        __mutexattr: *const pthread_mutexattr_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_destroy(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_trylock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_lock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_timedlock(
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_clocklock(
        __mutex: *mut pthread_mutex_t,
        __clockid: clockid_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_unlock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_getprioceiling(
        __mutex: *const pthread_mutex_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_setprioceiling(
        __mutex: *mut pthread_mutex_t,
        __prioceiling: ::std::os::raw::c_int,
        __old_ceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_consistent(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_init(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_destroy(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_getpshared(
        __attr: *const pthread_mutexattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_setpshared(
        __attr: *mut pthread_mutexattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_gettype(
        __attr: *const pthread_mutexattr_t,
        __kind: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_settype(
        __attr: *mut pthread_mutexattr_t,
        __kind: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_getprotocol(
        __attr: *const pthread_mutexattr_t,
        __protocol: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_setprotocol(
        __attr: *mut pthread_mutexattr_t,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_getprioceiling(
        __attr: *const pthread_mutexattr_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_setprioceiling(
        __attr: *mut pthread_mutexattr_t,
        __prioceiling: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_getrobust(
        __attr: *const pthread_mutexattr_t,
        __robustness: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_setrobust(
        __attr: *mut pthread_mutexattr_t,
        __robustness: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_init(
        __rwlock: *mut pthread_rwlock_t,
        __attr: *const pthread_rwlockattr_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_destroy(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_rdlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_tryrdlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_timedrdlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_clockrdlock(
        __rwlock: *mut pthread_rwlock_t,
        __clockid: clockid_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_wrlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_trywrlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_timedwrlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_clockwrlock(
        __rwlock: *mut pthread_rwlock_t,
        __clockid: clockid_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_unlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlockattr_init(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlockattr_destroy(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlockattr_getpshared(
        __attr: *const pthread_rwlockattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlockattr_setpshared(
        __attr: *mut pthread_rwlockattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlockattr_getkind_np(
        __attr: *const pthread_rwlockattr_t,
        __pref: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlockattr_setkind_np(
        __attr: *mut pthread_rwlockattr_t,
        __pref: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cond_init(
        __cond: *mut pthread_cond_t,
        __cond_attr: *const pthread_condattr_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cond_destroy(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cond_signal(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cond_broadcast(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cond_wait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cond_timedwait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cond_clockwait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
        __clock_id: __clockid_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_condattr_init(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_condattr_destroy(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_condattr_getpshared(
        __attr: *const pthread_condattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_condattr_setpshared(
        __attr: *mut pthread_condattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_condattr_getclock(
        __attr: *const pthread_condattr_t,
        __clock_id: *mut __clockid_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_condattr_setclock(
        __attr: *mut pthread_condattr_t,
        __clock_id: __clockid_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_spin_init(
        __lock: *mut pthread_spinlock_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_spin_destroy(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_spin_lock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_spin_trylock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_spin_unlock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_barrier_init(
        __barrier: *mut pthread_barrier_t,
        __attr: *const pthread_barrierattr_t,
        __count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_barrier_destroy(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_barrier_wait(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_barrierattr_init(__attr: *mut pthread_barrierattr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_barrierattr_destroy(__attr: *mut pthread_barrierattr_t)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_barrierattr_getpshared(
        __attr: *const pthread_barrierattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_barrierattr_setpshared(
        __attr: *mut pthread_barrierattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_key_create(
        __key: *mut pthread_key_t,
        __destr_function: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_key_delete(__key: pthread_key_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_getspecific(__key: pthread_key_t) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn pthread_setspecific(
        __key: pthread_key_t,
        __pointer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_getcpuclockid(
        __thread_id: pthread_t,
        __clock_id: *mut __clockid_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_atfork(
        __prepare: ::std::option::Option<unsafe extern "C" fn()>,
        __parent: ::std::option::Option<unsafe extern "C" fn()>,
        __child: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
pub type __gthread_t = pthread_t;
pub type __gthread_key_t = pthread_key_t;
pub type __gthread_once_t = pthread_once_t;
pub type __gthread_mutex_t = pthread_mutex_t;
pub type __gthread_recursive_mutex_t = pthread_mutex_t;
pub type __gthread_cond_t = pthread_cond_t;
pub type __gthread_time_t = timespec;
pub type _Atomic_word = ::std::os::raw::c_int;
unsafe extern "C" {
    pub static mut __libc_single_threaded: ::std::os::raw::c_char;
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::std::mem::size_of::<max_align_t>() - 32usize];
    ["Alignment of max_align_t"][::std::mem::align_of::<max_align_t>() - 16usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pstl_execution_sequenced_policy {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pstl_execution_sequenced_policy"]
        [::std::mem::size_of::<__pstl_execution_sequenced_policy>() - 1usize];
    ["Alignment of __pstl_execution_sequenced_policy"]
        [::std::mem::align_of::<__pstl_execution_sequenced_policy>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pstl_execution_parallel_policy {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pstl_execution_parallel_policy"]
        [::std::mem::size_of::<__pstl_execution_parallel_policy>() - 1usize];
    ["Alignment of __pstl_execution_parallel_policy"]
        [::std::mem::align_of::<__pstl_execution_parallel_policy>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pstl_execution_parallel_unsequenced_policy {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pstl_execution_parallel_unsequenced_policy"]
        [::std::mem::size_of::<__pstl_execution_parallel_unsequenced_policy>() - 1usize];
    ["Alignment of __pstl_execution_parallel_unsequenced_policy"]
        [::std::mem::align_of::<__pstl_execution_parallel_unsequenced_policy>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pstl_execution_unsequenced_policy {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pstl_execution_unsequenced_policy"]
        [::std::mem::size_of::<__pstl_execution_unsequenced_policy>() - 1usize];
    ["Alignment of __pstl_execution_unsequenced_policy"]
        [::std::mem::align_of::<__pstl_execution_unsequenced_policy>() - 1usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZN6__pstl9execution2v1L3seqE"]
    pub static __pstl_execution_seq: __pstl_execution_sequenced_policy;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN6__pstl9execution2v1L3parE"]
    pub static __pstl_execution_par: __pstl_execution_parallel_policy;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN6__pstl9execution2v1L9par_unseqE"]
    pub static __pstl_execution_par_unseq: __pstl_execution_parallel_unsequenced_policy;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN6__pstl9execution2v1L5unseqE"]
    pub static __pstl_execution_unseq: __pstl_execution_unsequenced_policy;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pstl_execution_is_execution_policy {
    pub _base: std_false_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __pstl_execution_is_execution_policy_open0___pstl_execution_sequenced_policy_close0"] [:: std :: mem :: size_of :: < __pstl_execution_is_execution_policy > () - 1usize] ;
    ["Align of template specialization: __pstl_execution_is_execution_policy_open0___pstl_execution_sequenced_policy_close0"] [:: std :: mem :: align_of :: < __pstl_execution_is_execution_policy > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __pstl_execution_is_execution_policy_open0___pstl_execution_parallel_policy_close0"] [:: std :: mem :: size_of :: < __pstl_execution_is_execution_policy > () - 1usize] ;
    ["Align of template specialization: __pstl_execution_is_execution_policy_open0___pstl_execution_parallel_policy_close0"] [:: std :: mem :: align_of :: < __pstl_execution_is_execution_policy > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __pstl_execution_is_execution_policy_open0___pstl_execution_parallel_unsequenced_policy_close0"] [:: std :: mem :: size_of :: < __pstl_execution_is_execution_policy > () - 1usize] ;
    ["Align of template specialization: __pstl_execution_is_execution_policy_open0___pstl_execution_parallel_unsequenced_policy_close0"] [:: std :: mem :: align_of :: < __pstl_execution_is_execution_policy > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __pstl_execution_is_execution_policy_open0___pstl_execution_unsequenced_policy_close0"] [:: std :: mem :: size_of :: < __pstl_execution_is_execution_policy > () - 1usize] ;
    ["Align of template specialization: __pstl_execution_is_execution_policy_open0___pstl_execution_unsequenced_policy_close0"] [:: std :: mem :: align_of :: < __pstl_execution_is_execution_policy > () - 1usize] ;
};
pub type __pstl___internal___enable_if_execution_policy = u8;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos_t"][::std::mem::size_of::<_G_fpos_t>() - 16usize];
    ["Alignment of _G_fpos_t"][::std::mem::align_of::<_G_fpos_t>() - 8usize];
    ["Offset of field: _G_fpos_t::__pos"][::std::mem::offset_of!(_G_fpos_t, __pos) - 0usize];
    ["Offset of field: _G_fpos_t::__state"][::std::mem::offset_of!(_G_fpos_t, __state) - 8usize];
};
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos64_t"][::std::mem::size_of::<_G_fpos64_t>() - 16usize];
    ["Alignment of _G_fpos64_t"][::std::mem::align_of::<_G_fpos64_t>() - 8usize];
    ["Offset of field: _G_fpos64_t::__pos"][::std::mem::offset_of!(_G_fpos64_t, __pos) - 0usize];
    ["Offset of field: _G_fpos64_t::__state"]
        [::std::mem::offset_of!(_G_fpos64_t, __state) - 8usize];
};
pub type __fpos64_t = _G_fpos64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_FILE"][::std::mem::size_of::<_IO_FILE>() - 216usize];
    ["Alignment of _IO_FILE"][::std::mem::align_of::<_IO_FILE>() - 8usize];
    ["Offset of field: _IO_FILE::_flags"][::std::mem::offset_of!(_IO_FILE, _flags) - 0usize];
    ["Offset of field: _IO_FILE::_IO_read_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_ptr) - 8usize];
    ["Offset of field: _IO_FILE::_IO_read_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_end) - 16usize];
    ["Offset of field: _IO_FILE::_IO_read_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_base) - 24usize];
    ["Offset of field: _IO_FILE::_IO_write_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_base) - 32usize];
    ["Offset of field: _IO_FILE::_IO_write_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_ptr) - 40usize];
    ["Offset of field: _IO_FILE::_IO_write_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_end) - 48usize];
    ["Offset of field: _IO_FILE::_IO_buf_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_base) - 56usize];
    ["Offset of field: _IO_FILE::_IO_buf_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_end) - 64usize];
    ["Offset of field: _IO_FILE::_IO_save_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_base) - 72usize];
    ["Offset of field: _IO_FILE::_IO_backup_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_backup_base) - 80usize];
    ["Offset of field: _IO_FILE::_IO_save_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_end) - 88usize];
    ["Offset of field: _IO_FILE::_markers"][::std::mem::offset_of!(_IO_FILE, _markers) - 96usize];
    ["Offset of field: _IO_FILE::_chain"][::std::mem::offset_of!(_IO_FILE, _chain) - 104usize];
    ["Offset of field: _IO_FILE::_fileno"][::std::mem::offset_of!(_IO_FILE, _fileno) - 112usize];
    ["Offset of field: _IO_FILE::_flags2"][::std::mem::offset_of!(_IO_FILE, _flags2) - 116usize];
    ["Offset of field: _IO_FILE::_old_offset"]
        [::std::mem::offset_of!(_IO_FILE, _old_offset) - 120usize];
    ["Offset of field: _IO_FILE::_cur_column"]
        [::std::mem::offset_of!(_IO_FILE, _cur_column) - 128usize];
    ["Offset of field: _IO_FILE::_vtable_offset"]
        [::std::mem::offset_of!(_IO_FILE, _vtable_offset) - 130usize];
    ["Offset of field: _IO_FILE::_shortbuf"]
        [::std::mem::offset_of!(_IO_FILE, _shortbuf) - 131usize];
    ["Offset of field: _IO_FILE::_lock"][::std::mem::offset_of!(_IO_FILE, _lock) - 136usize];
    ["Offset of field: _IO_FILE::_offset"][::std::mem::offset_of!(_IO_FILE, _offset) - 144usize];
    ["Offset of field: _IO_FILE::_codecvt"][::std::mem::offset_of!(_IO_FILE, _codecvt) - 152usize];
    ["Offset of field: _IO_FILE::_wide_data"]
        [::std::mem::offset_of!(_IO_FILE, _wide_data) - 160usize];
    ["Offset of field: _IO_FILE::_freeres_list"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_list) - 168usize];
    ["Offset of field: _IO_FILE::_freeres_buf"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_buf) - 176usize];
    ["Offset of field: _IO_FILE::__pad5"][::std::mem::offset_of!(_IO_FILE, __pad5) - 184usize];
    ["Offset of field: _IO_FILE::_mode"][::std::mem::offset_of!(_IO_FILE, _mode) - 192usize];
    ["Offset of field: _IO_FILE::_unused2"][::std::mem::offset_of!(_IO_FILE, _unused2) - 196usize];
};
pub type cookie_read_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_write_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_seek_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type cookie_close_function_t = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_cookie_io_functions_t {
    pub read: cookie_read_function_t,
    pub write: cookie_write_function_t,
    pub seek: cookie_seek_function_t,
    pub close: cookie_close_function_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_cookie_io_functions_t"]
        [::std::mem::size_of::<_IO_cookie_io_functions_t>() - 32usize];
    ["Alignment of _IO_cookie_io_functions_t"]
        [::std::mem::align_of::<_IO_cookie_io_functions_t>() - 8usize];
    ["Offset of field: _IO_cookie_io_functions_t::read"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, read) - 0usize];
    ["Offset of field: _IO_cookie_io_functions_t::write"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, write) - 8usize];
    ["Offset of field: _IO_cookie_io_functions_t::seek"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, seek) - 16usize];
    ["Offset of field: _IO_cookie_io_functions_t::close"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, close) - 24usize];
};
pub type cookie_io_functions_t = _IO_cookie_io_functions_t;
pub type off_t = __off_t;
pub type off64_t = __off64_t;
pub type fpos_t = __fpos_t;
pub type fpos64_t = __fpos64_t;
unsafe extern "C" {
    pub static mut stdin: *mut FILE;
}
unsafe extern "C" {
    pub static mut stdout: *mut FILE;
}
unsafe extern "C" {
    pub static mut stderr: *mut FILE;
}
unsafe extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn renameat2(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
unsafe extern "C" {
    pub fn tmpfile64() -> *mut FILE;
}
unsafe extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fopen64(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn freopen64(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
unsafe extern "C" {
    pub fn fopencookie(
        __magic_cookie: *mut ::std::os::raw::c_void,
        __modes: *const ::std::os::raw::c_char,
        __io_funcs: cookie_io_functions_t,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
unsafe extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: usize,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: usize,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vasprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __f: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fgets_unlocked(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
unsafe extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
unsafe extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
unsafe extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __s: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn fputs_unlocked(
        __s: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
unsafe extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fseeko64(
        __stream: *mut FILE,
        __off: __off64_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftello64(__stream: *mut FILE) -> __off64_t;
}
unsafe extern "C" {
    pub fn fgetpos64(__stream: *mut FILE, __pos: *mut fpos64_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fsetpos64(__stream: *mut FILE, __pos: *const fpos64_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn cuserid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct obstack {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub fn obstack_printf(
        __obstack: *mut obstack,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn obstack_vprintf(
        __obstack: *mut obstack,
        __format: *const ::std::os::raw::c_char,
        __args: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ggml_abort(
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
pub const ggml_status_GGML_STATUS_ALLOC_FAILED: ggml_status = -2;
pub const ggml_status_GGML_STATUS_FAILED: ggml_status = -1;
pub const ggml_status_GGML_STATUS_SUCCESS: ggml_status = 0;
pub const ggml_status_GGML_STATUS_ABORTED: ggml_status = 1;
pub type ggml_status = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn ggml_status_to_string(status: ggml_status) -> *const ::std::os::raw::c_char;
}
pub type ggml_fp16_t = u16;
unsafe extern "C" {
    pub fn ggml_fp16_to_fp32(arg1: ggml_fp16_t) -> f32;
}
unsafe extern "C" {
    pub fn ggml_fp32_to_fp16(arg1: f32) -> ggml_fp16_t;
}
unsafe extern "C" {
    pub fn ggml_fp16_to_fp32_row(arg1: *const ggml_fp16_t, arg2: *mut f32, arg3: i64);
}
unsafe extern "C" {
    pub fn ggml_fp32_to_fp16_row(arg1: *const f32, arg2: *mut ggml_fp16_t, arg3: i64);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_bf16_t {
    pub bits: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ggml_bf16_t"][::std::mem::size_of::<ggml_bf16_t>() - 2usize];
    ["Alignment of ggml_bf16_t"][::std::mem::align_of::<ggml_bf16_t>() - 2usize];
    ["Offset of field: ggml_bf16_t::bits"][::std::mem::offset_of!(ggml_bf16_t, bits) - 0usize];
};
unsafe extern "C" {
    pub fn ggml_fp32_to_bf16(arg1: f32) -> ggml_bf16_t;
}
unsafe extern "C" {
    pub fn ggml_bf16_to_fp32(arg1: ggml_bf16_t) -> f32;
}
unsafe extern "C" {
    pub fn ggml_bf16_to_fp32_row(arg1: *const ggml_bf16_t, arg2: *mut f32, arg3: i64);
}
unsafe extern "C" {
    pub fn ggml_fp32_to_bf16_row_ref(arg1: *const f32, arg2: *mut ggml_bf16_t, arg3: i64);
}
unsafe extern "C" {
    pub fn ggml_fp32_to_bf16_row(arg1: *const f32, arg2: *mut ggml_bf16_t, arg3: i64);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_object {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_context {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_cgraph {
    _unused: [u8; 0],
}
pub const ggml_type_GGML_TYPE_F32: ggml_type = 0;
pub const ggml_type_GGML_TYPE_F16: ggml_type = 1;
pub const ggml_type_GGML_TYPE_Q4_0: ggml_type = 2;
pub const ggml_type_GGML_TYPE_Q4_1: ggml_type = 3;
pub const ggml_type_GGML_TYPE_Q5_0: ggml_type = 6;
pub const ggml_type_GGML_TYPE_Q5_1: ggml_type = 7;
pub const ggml_type_GGML_TYPE_Q8_0: ggml_type = 8;
pub const ggml_type_GGML_TYPE_Q8_1: ggml_type = 9;
pub const ggml_type_GGML_TYPE_Q2_K: ggml_type = 10;
pub const ggml_type_GGML_TYPE_Q3_K: ggml_type = 11;
pub const ggml_type_GGML_TYPE_Q4_K: ggml_type = 12;
pub const ggml_type_GGML_TYPE_Q5_K: ggml_type = 13;
pub const ggml_type_GGML_TYPE_Q6_K: ggml_type = 14;
pub const ggml_type_GGML_TYPE_Q8_K: ggml_type = 15;
pub const ggml_type_GGML_TYPE_IQ2_XXS: ggml_type = 16;
pub const ggml_type_GGML_TYPE_IQ2_XS: ggml_type = 17;
pub const ggml_type_GGML_TYPE_IQ3_XXS: ggml_type = 18;
pub const ggml_type_GGML_TYPE_IQ1_S: ggml_type = 19;
pub const ggml_type_GGML_TYPE_IQ4_NL: ggml_type = 20;
pub const ggml_type_GGML_TYPE_IQ3_S: ggml_type = 21;
pub const ggml_type_GGML_TYPE_IQ2_S: ggml_type = 22;
pub const ggml_type_GGML_TYPE_IQ4_XS: ggml_type = 23;
pub const ggml_type_GGML_TYPE_I8: ggml_type = 24;
pub const ggml_type_GGML_TYPE_I16: ggml_type = 25;
pub const ggml_type_GGML_TYPE_I32: ggml_type = 26;
pub const ggml_type_GGML_TYPE_I64: ggml_type = 27;
pub const ggml_type_GGML_TYPE_F64: ggml_type = 28;
pub const ggml_type_GGML_TYPE_IQ1_M: ggml_type = 29;
pub const ggml_type_GGML_TYPE_BF16: ggml_type = 30;
pub const ggml_type_GGML_TYPE_TQ1_0: ggml_type = 34;
pub const ggml_type_GGML_TYPE_TQ2_0: ggml_type = 35;
pub const ggml_type_GGML_TYPE_COUNT: ggml_type = 39;
pub type ggml_type = ::std::os::raw::c_uint;
pub const ggml_prec_GGML_PREC_DEFAULT: ggml_prec = 0;
pub const ggml_prec_GGML_PREC_F32: ggml_prec = 1;
pub type ggml_prec = ::std::os::raw::c_uint;
pub const ggml_ftype_GGML_FTYPE_UNKNOWN: ggml_ftype = -1;
pub const ggml_ftype_GGML_FTYPE_ALL_F32: ggml_ftype = 0;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_F16: ggml_ftype = 1;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_Q4_0: ggml_ftype = 2;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_Q4_1: ggml_ftype = 3;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_Q4_1_SOME_F16: ggml_ftype = 4;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_Q8_0: ggml_ftype = 7;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_Q5_0: ggml_ftype = 8;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_Q5_1: ggml_ftype = 9;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_Q2_K: ggml_ftype = 10;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_Q3_K: ggml_ftype = 11;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_Q4_K: ggml_ftype = 12;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_Q5_K: ggml_ftype = 13;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_Q6_K: ggml_ftype = 14;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_IQ2_XXS: ggml_ftype = 15;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_IQ2_XS: ggml_ftype = 16;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_IQ3_XXS: ggml_ftype = 17;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_IQ1_S: ggml_ftype = 18;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_IQ4_NL: ggml_ftype = 19;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_IQ3_S: ggml_ftype = 20;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_IQ2_S: ggml_ftype = 21;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_IQ4_XS: ggml_ftype = 22;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_IQ1_M: ggml_ftype = 23;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_BF16: ggml_ftype = 24;
pub type ggml_ftype = ::std::os::raw::c_int;
pub const ggml_op_GGML_OP_NONE: ggml_op = 0;
pub const ggml_op_GGML_OP_DUP: ggml_op = 1;
pub const ggml_op_GGML_OP_ADD: ggml_op = 2;
pub const ggml_op_GGML_OP_ADD1: ggml_op = 3;
pub const ggml_op_GGML_OP_ACC: ggml_op = 4;
pub const ggml_op_GGML_OP_SUB: ggml_op = 5;
pub const ggml_op_GGML_OP_MUL: ggml_op = 6;
pub const ggml_op_GGML_OP_DIV: ggml_op = 7;
pub const ggml_op_GGML_OP_SQR: ggml_op = 8;
pub const ggml_op_GGML_OP_SQRT: ggml_op = 9;
pub const ggml_op_GGML_OP_LOG: ggml_op = 10;
pub const ggml_op_GGML_OP_SIN: ggml_op = 11;
pub const ggml_op_GGML_OP_COS: ggml_op = 12;
pub const ggml_op_GGML_OP_SUM: ggml_op = 13;
pub const ggml_op_GGML_OP_SUM_ROWS: ggml_op = 14;
pub const ggml_op_GGML_OP_MEAN: ggml_op = 15;
pub const ggml_op_GGML_OP_ARGMAX: ggml_op = 16;
pub const ggml_op_GGML_OP_COUNT_EQUAL: ggml_op = 17;
pub const ggml_op_GGML_OP_REPEAT: ggml_op = 18;
pub const ggml_op_GGML_OP_REPEAT_BACK: ggml_op = 19;
pub const ggml_op_GGML_OP_CONCAT: ggml_op = 20;
pub const ggml_op_GGML_OP_SILU_BACK: ggml_op = 21;
pub const ggml_op_GGML_OP_NORM: ggml_op = 22;
pub const ggml_op_GGML_OP_RMS_NORM: ggml_op = 23;
pub const ggml_op_GGML_OP_RMS_NORM_BACK: ggml_op = 24;
pub const ggml_op_GGML_OP_GROUP_NORM: ggml_op = 25;
pub const ggml_op_GGML_OP_L2_NORM: ggml_op = 26;
pub const ggml_op_GGML_OP_MUL_MAT: ggml_op = 27;
pub const ggml_op_GGML_OP_MUL_MAT_ID: ggml_op = 28;
pub const ggml_op_GGML_OP_OUT_PROD: ggml_op = 29;
pub const ggml_op_GGML_OP_SCALE: ggml_op = 30;
pub const ggml_op_GGML_OP_SET: ggml_op = 31;
pub const ggml_op_GGML_OP_CPY: ggml_op = 32;
pub const ggml_op_GGML_OP_CONT: ggml_op = 33;
pub const ggml_op_GGML_OP_RESHAPE: ggml_op = 34;
pub const ggml_op_GGML_OP_VIEW: ggml_op = 35;
pub const ggml_op_GGML_OP_PERMUTE: ggml_op = 36;
pub const ggml_op_GGML_OP_TRANSPOSE: ggml_op = 37;
pub const ggml_op_GGML_OP_GET_ROWS: ggml_op = 38;
pub const ggml_op_GGML_OP_GET_ROWS_BACK: ggml_op = 39;
pub const ggml_op_GGML_OP_DIAG: ggml_op = 40;
pub const ggml_op_GGML_OP_DIAG_MASK_INF: ggml_op = 41;
pub const ggml_op_GGML_OP_DIAG_MASK_ZERO: ggml_op = 42;
pub const ggml_op_GGML_OP_SOFT_MAX: ggml_op = 43;
pub const ggml_op_GGML_OP_SOFT_MAX_BACK: ggml_op = 44;
pub const ggml_op_GGML_OP_ROPE: ggml_op = 45;
pub const ggml_op_GGML_OP_ROPE_BACK: ggml_op = 46;
pub const ggml_op_GGML_OP_CLAMP: ggml_op = 47;
pub const ggml_op_GGML_OP_CONV_TRANSPOSE_1D: ggml_op = 48;
pub const ggml_op_GGML_OP_IM2COL: ggml_op = 49;
pub const ggml_op_GGML_OP_IM2COL_BACK: ggml_op = 50;
pub const ggml_op_GGML_OP_CONV_2D_DW: ggml_op = 51;
pub const ggml_op_GGML_OP_CONV_TRANSPOSE_2D: ggml_op = 52;
pub const ggml_op_GGML_OP_POOL_1D: ggml_op = 53;
pub const ggml_op_GGML_OP_POOL_2D: ggml_op = 54;
pub const ggml_op_GGML_OP_POOL_2D_BACK: ggml_op = 55;
pub const ggml_op_GGML_OP_UPSCALE: ggml_op = 56;
pub const ggml_op_GGML_OP_PAD: ggml_op = 57;
pub const ggml_op_GGML_OP_PAD_REFLECT_1D: ggml_op = 58;
pub const ggml_op_GGML_OP_ARANGE: ggml_op = 59;
pub const ggml_op_GGML_OP_TIMESTEP_EMBEDDING: ggml_op = 60;
pub const ggml_op_GGML_OP_ARGSORT: ggml_op = 61;
pub const ggml_op_GGML_OP_LEAKY_RELU: ggml_op = 62;
pub const ggml_op_GGML_OP_FLASH_ATTN_EXT: ggml_op = 63;
pub const ggml_op_GGML_OP_FLASH_ATTN_BACK: ggml_op = 64;
pub const ggml_op_GGML_OP_SSM_CONV: ggml_op = 65;
pub const ggml_op_GGML_OP_SSM_SCAN: ggml_op = 66;
pub const ggml_op_GGML_OP_WIN_PART: ggml_op = 67;
pub const ggml_op_GGML_OP_WIN_UNPART: ggml_op = 68;
pub const ggml_op_GGML_OP_GET_REL_POS: ggml_op = 69;
pub const ggml_op_GGML_OP_ADD_REL_POS: ggml_op = 70;
pub const ggml_op_GGML_OP_RWKV_WKV6: ggml_op = 71;
pub const ggml_op_GGML_OP_GATED_LINEAR_ATTN: ggml_op = 72;
pub const ggml_op_GGML_OP_RWKV_WKV7: ggml_op = 73;
pub const ggml_op_GGML_OP_UNARY: ggml_op = 74;
pub const ggml_op_GGML_OP_MAP_CUSTOM1: ggml_op = 75;
pub const ggml_op_GGML_OP_MAP_CUSTOM2: ggml_op = 76;
pub const ggml_op_GGML_OP_MAP_CUSTOM3: ggml_op = 77;
pub const ggml_op_GGML_OP_CUSTOM: ggml_op = 78;
pub const ggml_op_GGML_OP_CROSS_ENTROPY_LOSS: ggml_op = 79;
pub const ggml_op_GGML_OP_CROSS_ENTROPY_LOSS_BACK: ggml_op = 80;
pub const ggml_op_GGML_OP_OPT_STEP_ADAMW: ggml_op = 81;
pub const ggml_op_GGML_OP_COUNT: ggml_op = 82;
pub type ggml_op = ::std::os::raw::c_uint;
pub const ggml_unary_op_GGML_UNARY_OP_ABS: ggml_unary_op = 0;
pub const ggml_unary_op_GGML_UNARY_OP_SGN: ggml_unary_op = 1;
pub const ggml_unary_op_GGML_UNARY_OP_NEG: ggml_unary_op = 2;
pub const ggml_unary_op_GGML_UNARY_OP_STEP: ggml_unary_op = 3;
pub const ggml_unary_op_GGML_UNARY_OP_TANH: ggml_unary_op = 4;
pub const ggml_unary_op_GGML_UNARY_OP_ELU: ggml_unary_op = 5;
pub const ggml_unary_op_GGML_UNARY_OP_RELU: ggml_unary_op = 6;
pub const ggml_unary_op_GGML_UNARY_OP_SIGMOID: ggml_unary_op = 7;
pub const ggml_unary_op_GGML_UNARY_OP_GELU: ggml_unary_op = 8;
pub const ggml_unary_op_GGML_UNARY_OP_GELU_QUICK: ggml_unary_op = 9;
pub const ggml_unary_op_GGML_UNARY_OP_SILU: ggml_unary_op = 10;
pub const ggml_unary_op_GGML_UNARY_OP_HARDSWISH: ggml_unary_op = 11;
pub const ggml_unary_op_GGML_UNARY_OP_HARDSIGMOID: ggml_unary_op = 12;
pub const ggml_unary_op_GGML_UNARY_OP_EXP: ggml_unary_op = 13;
pub const ggml_unary_op_GGML_UNARY_OP_COUNT: ggml_unary_op = 14;
pub type ggml_unary_op = ::std::os::raw::c_uint;
pub const ggml_object_type_GGML_OBJECT_TYPE_TENSOR: ggml_object_type = 0;
pub const ggml_object_type_GGML_OBJECT_TYPE_GRAPH: ggml_object_type = 1;
pub const ggml_object_type_GGML_OBJECT_TYPE_WORK_BUFFER: ggml_object_type = 2;
pub type ggml_object_type = ::std::os::raw::c_uint;
pub const ggml_log_level_GGML_LOG_LEVEL_NONE: ggml_log_level = 0;
pub const ggml_log_level_GGML_LOG_LEVEL_DEBUG: ggml_log_level = 1;
pub const ggml_log_level_GGML_LOG_LEVEL_INFO: ggml_log_level = 2;
pub const ggml_log_level_GGML_LOG_LEVEL_WARN: ggml_log_level = 3;
pub const ggml_log_level_GGML_LOG_LEVEL_ERROR: ggml_log_level = 4;
pub const ggml_log_level_GGML_LOG_LEVEL_CONT: ggml_log_level = 5;
pub type ggml_log_level = ::std::os::raw::c_uint;
pub const ggml_tensor_flag_GGML_TENSOR_FLAG_INPUT: ggml_tensor_flag = 1;
pub const ggml_tensor_flag_GGML_TENSOR_FLAG_OUTPUT: ggml_tensor_flag = 2;
pub const ggml_tensor_flag_GGML_TENSOR_FLAG_PARAM: ggml_tensor_flag = 4;
pub const ggml_tensor_flag_GGML_TENSOR_FLAG_LOSS: ggml_tensor_flag = 8;
pub type ggml_tensor_flag = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_init_params {
    pub mem_size: usize,
    pub mem_buffer: *mut ::std::os::raw::c_void,
    pub no_alloc: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ggml_init_params"][::std::mem::size_of::<ggml_init_params>() - 24usize];
    ["Alignment of ggml_init_params"][::std::mem::align_of::<ggml_init_params>() - 8usize];
    ["Offset of field: ggml_init_params::mem_size"]
        [::std::mem::offset_of!(ggml_init_params, mem_size) - 0usize];
    ["Offset of field: ggml_init_params::mem_buffer"]
        [::std::mem::offset_of!(ggml_init_params, mem_buffer) - 8usize];
    ["Offset of field: ggml_init_params::no_alloc"]
        [::std::mem::offset_of!(ggml_init_params, no_alloc) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_tensor {
    pub type_: ggml_type,
    pub buffer: *mut ggml_backend_buffer,
    pub ne: [i64; 4usize],
    pub nb: [usize; 4usize],
    pub op: ggml_op,
    pub op_params: [i32; 16usize],
    pub flags: i32,
    pub src: [*mut ggml_tensor; 10usize],
    pub view_src: *mut ggml_tensor,
    pub view_offs: usize,
    pub data: *mut ::std::os::raw::c_void,
    pub name: [::std::os::raw::c_char; 64usize],
    pub extra: *mut ::std::os::raw::c_void,
    pub padding: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ggml_tensor"][::std::mem::size_of::<ggml_tensor>() - 336usize];
    ["Alignment of ggml_tensor"][::std::mem::align_of::<ggml_tensor>() - 8usize];
    ["Offset of field: ggml_tensor::type_"][::std::mem::offset_of!(ggml_tensor, type_) - 0usize];
    ["Offset of field: ggml_tensor::buffer"][::std::mem::offset_of!(ggml_tensor, buffer) - 8usize];
    ["Offset of field: ggml_tensor::ne"][::std::mem::offset_of!(ggml_tensor, ne) - 16usize];
    ["Offset of field: ggml_tensor::nb"][::std::mem::offset_of!(ggml_tensor, nb) - 48usize];
    ["Offset of field: ggml_tensor::op"][::std::mem::offset_of!(ggml_tensor, op) - 80usize];
    ["Offset of field: ggml_tensor::op_params"]
        [::std::mem::offset_of!(ggml_tensor, op_params) - 84usize];
    ["Offset of field: ggml_tensor::flags"][::std::mem::offset_of!(ggml_tensor, flags) - 148usize];
    ["Offset of field: ggml_tensor::src"][::std::mem::offset_of!(ggml_tensor, src) - 152usize];
    ["Offset of field: ggml_tensor::view_src"]
        [::std::mem::offset_of!(ggml_tensor, view_src) - 232usize];
    ["Offset of field: ggml_tensor::view_offs"]
        [::std::mem::offset_of!(ggml_tensor, view_offs) - 240usize];
    ["Offset of field: ggml_tensor::data"][::std::mem::offset_of!(ggml_tensor, data) - 248usize];
    ["Offset of field: ggml_tensor::name"][::std::mem::offset_of!(ggml_tensor, name) - 256usize];
    ["Offset of field: ggml_tensor::extra"][::std::mem::offset_of!(ggml_tensor, extra) - 320usize];
    ["Offset of field: ggml_tensor::padding"]
        [::std::mem::offset_of!(ggml_tensor, padding) - 328usize];
};
pub const GGML_TENSOR_SIZE: usize = 336;
pub type ggml_abort_callback =
    ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void) -> bool>;
pub type ggml_guid = [u8; 16usize];
pub type ggml_guid_t = *mut ggml_guid;
unsafe extern "C" {
    pub fn ggml_guid_matches(guid_a: ggml_guid_t, guid_b: ggml_guid_t) -> bool;
}
unsafe extern "C" {
    pub fn ggml_time_init();
}
unsafe extern "C" {
    pub fn ggml_time_ms() -> i64;
}
unsafe extern "C" {
    pub fn ggml_time_us() -> i64;
}
unsafe extern "C" {
    pub fn ggml_cycles() -> i64;
}
unsafe extern "C" {
    pub fn ggml_cycles_per_ms() -> i64;
}
unsafe extern "C" {
    pub fn ggml_fopen(
        fname: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn ggml_print_object(obj: *const ggml_object);
}
unsafe extern "C" {
    pub fn ggml_print_objects(ctx: *const ggml_context);
}
unsafe extern "C" {
    pub fn ggml_nelements(tensor: *const ggml_tensor) -> i64;
}
unsafe extern "C" {
    pub fn ggml_nrows(tensor: *const ggml_tensor) -> i64;
}
unsafe extern "C" {
    pub fn ggml_nbytes(tensor: *const ggml_tensor) -> usize;
}
unsafe extern "C" {
    pub fn ggml_nbytes_pad(tensor: *const ggml_tensor) -> usize;
}
unsafe extern "C" {
    pub fn ggml_blck_size(type_: ggml_type) -> i64;
}
unsafe extern "C" {
    pub fn ggml_type_size(type_: ggml_type) -> usize;
}
unsafe extern "C" {
    pub fn ggml_row_size(type_: ggml_type, ne: i64) -> usize;
}
unsafe extern "C" {
    pub fn ggml_type_sizef(type_: ggml_type) -> f64;
}
unsafe extern "C" {
    pub fn ggml_type_name(type_: ggml_type) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ggml_op_name(op: ggml_op) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ggml_op_symbol(op: ggml_op) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ggml_unary_op_name(op: ggml_unary_op) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ggml_op_desc(t: *const ggml_tensor) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ggml_element_size(tensor: *const ggml_tensor) -> usize;
}
unsafe extern "C" {
    pub fn ggml_is_quantized(type_: ggml_type) -> bool;
}
unsafe extern "C" {
    pub fn ggml_ftype_to_ggml_type(ftype: ggml_ftype) -> ggml_type;
}
unsafe extern "C" {
    pub fn ggml_is_transposed(tensor: *const ggml_tensor) -> bool;
}
unsafe extern "C" {
    pub fn ggml_is_permuted(tensor: *const ggml_tensor) -> bool;
}
unsafe extern "C" {
    pub fn ggml_is_empty(tensor: *const ggml_tensor) -> bool;
}
unsafe extern "C" {
    pub fn ggml_is_scalar(tensor: *const ggml_tensor) -> bool;
}
unsafe extern "C" {
    pub fn ggml_is_vector(tensor: *const ggml_tensor) -> bool;
}
unsafe extern "C" {
    pub fn ggml_is_matrix(tensor: *const ggml_tensor) -> bool;
}
unsafe extern "C" {
    pub fn ggml_is_3d(tensor: *const ggml_tensor) -> bool;
}
unsafe extern "C" {
    pub fn ggml_n_dims(tensor: *const ggml_tensor) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ggml_is_contiguous(tensor: *const ggml_tensor) -> bool;
}
unsafe extern "C" {
    pub fn ggml_is_contiguous_0(tensor: *const ggml_tensor) -> bool;
}
unsafe extern "C" {
    pub fn ggml_is_contiguous_1(tensor: *const ggml_tensor) -> bool;
}
unsafe extern "C" {
    pub fn ggml_is_contiguous_2(tensor: *const ggml_tensor) -> bool;
}
unsafe extern "C" {
    pub fn ggml_is_contiguous_channels(tensor: *const ggml_tensor) -> bool;
}
unsafe extern "C" {
    pub fn ggml_are_same_shape(t0: *const ggml_tensor, t1: *const ggml_tensor) -> bool;
}
unsafe extern "C" {
    pub fn ggml_are_same_stride(t0: *const ggml_tensor, t1: *const ggml_tensor) -> bool;
}
unsafe extern "C" {
    pub fn ggml_can_repeat(t0: *const ggml_tensor, t1: *const ggml_tensor) -> bool;
}
unsafe extern "C" {
    pub fn ggml_tensor_overhead() -> usize;
}
unsafe extern "C" {
    pub fn ggml_validate_row_data(
        type_: ggml_type,
        data: *const ::std::os::raw::c_void,
        nbytes: usize,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ggml_init(params: ggml_init_params) -> *mut ggml_context;
}
unsafe extern "C" {
    pub fn ggml_reset(ctx: *mut ggml_context);
}
unsafe extern "C" {
    pub fn ggml_free(ctx: *mut ggml_context);
}
unsafe extern "C" {
    pub fn ggml_used_mem(ctx: *const ggml_context) -> usize;
}
unsafe extern "C" {
    pub fn ggml_get_no_alloc(ctx: *mut ggml_context) -> bool;
}
unsafe extern "C" {
    pub fn ggml_set_no_alloc(ctx: *mut ggml_context, no_alloc: bool);
}
unsafe extern "C" {
    pub fn ggml_get_mem_buffer(ctx: *const ggml_context) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn ggml_get_mem_size(ctx: *const ggml_context) -> usize;
}
unsafe extern "C" {
    pub fn ggml_get_max_tensor_size(ctx: *const ggml_context) -> usize;
}
unsafe extern "C" {
    pub fn ggml_new_tensor(
        ctx: *mut ggml_context,
        type_: ggml_type,
        n_dims: ::std::os::raw::c_int,
        ne: *const i64,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_new_tensor_1d(
        ctx: *mut ggml_context,
        type_: ggml_type,
        ne0: i64,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_new_tensor_2d(
        ctx: *mut ggml_context,
        type_: ggml_type,
        ne0: i64,
        ne1: i64,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_new_tensor_3d(
        ctx: *mut ggml_context,
        type_: ggml_type,
        ne0: i64,
        ne1: i64,
        ne2: i64,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_new_tensor_4d(
        ctx: *mut ggml_context,
        type_: ggml_type,
        ne0: i64,
        ne1: i64,
        ne2: i64,
        ne3: i64,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_new_buffer(ctx: *mut ggml_context, nbytes: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn ggml_dup_tensor(ctx: *mut ggml_context, src: *const ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_view_tensor(ctx: *mut ggml_context, src: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_get_first_tensor(ctx: *const ggml_context) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_get_next_tensor(
        ctx: *const ggml_context,
        tensor: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_get_tensor(
        ctx: *mut ggml_context,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_unravel_index(
        tensor: *const ggml_tensor,
        i: i64,
        i0: *mut i64,
        i1: *mut i64,
        i2: *mut i64,
        i3: *mut i64,
    );
}
unsafe extern "C" {
    pub fn ggml_get_unary_op(tensor: *const ggml_tensor) -> ggml_unary_op;
}
unsafe extern "C" {
    pub fn ggml_get_data(tensor: *const ggml_tensor) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn ggml_get_data_f32(tensor: *const ggml_tensor) -> *mut f32;
}
unsafe extern "C" {
    pub fn ggml_get_name(tensor: *const ggml_tensor) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ggml_set_name(
        tensor: *mut ggml_tensor,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_format_name(
        tensor: *mut ggml_tensor,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_set_input(tensor: *mut ggml_tensor);
}
unsafe extern "C" {
    pub fn ggml_set_output(tensor: *mut ggml_tensor);
}
unsafe extern "C" {
    pub fn ggml_set_param(ctx: *mut ggml_context, tensor: *mut ggml_tensor);
}
unsafe extern "C" {
    pub fn ggml_set_loss(tensor: *mut ggml_tensor);
}
unsafe extern "C" {
    pub fn ggml_dup(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_dup_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_add(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_add_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_add_cast(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        type_: ggml_type,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_add1(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_add1_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_acc(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        nb1: usize,
        nb2: usize,
        nb3: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_acc_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        nb1: usize,
        nb2: usize,
        nb3: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_sub(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_sub_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_mul(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_mul_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_div(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_div_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_sqr(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_sqr_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_sqrt(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_sqrt_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_log(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_log_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_sin(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_sin_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_cos(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_cos_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_sum(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_sum_rows(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_mean(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_argmax(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_count_equal(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_repeat(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_repeat_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_concat(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        dim: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_abs(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_abs_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_sgn(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_sgn_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_neg(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_neg_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_step(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_step_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_tanh(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_tanh_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_elu(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_elu_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_relu(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_leaky_relu(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        negative_slope: f32,
        inplace: bool,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_relu_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_sigmoid(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_sigmoid_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_gelu(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_gelu_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_gelu_quick(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_gelu_quick_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor)
        -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_silu(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_silu_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_silu_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_hardswish(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_hardsigmoid(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_exp(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_exp_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_norm(ctx: *mut ggml_context, a: *mut ggml_tensor, eps: f32) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_norm_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        eps: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_rms_norm(ctx: *mut ggml_context, a: *mut ggml_tensor, eps: f32)
        -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_rms_norm_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        eps: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_group_norm(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        n_groups: ::std::os::raw::c_int,
        eps: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_group_norm_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        n_groups: ::std::os::raw::c_int,
        eps: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_l2_norm(ctx: *mut ggml_context, a: *mut ggml_tensor, eps: f32) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_l2_norm_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        eps: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_rms_norm_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        eps: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_mul_mat(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_mul_mat_set_prec(a: *mut ggml_tensor, prec: ggml_prec);
}
unsafe extern "C" {
    pub fn ggml_mul_mat_id(
        ctx: *mut ggml_context,
        as_: *mut ggml_tensor,
        b: *mut ggml_tensor,
        ids: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_out_prod(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_scale(ctx: *mut ggml_context, a: *mut ggml_tensor, s: f32) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_scale_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        s: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_set(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        nb1: usize,
        nb2: usize,
        nb3: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_set_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        nb1: usize,
        nb2: usize,
        nb3: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_set_1d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        offset: usize,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_set_1d_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        offset: usize,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_set_2d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        nb1: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_set_2d_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        nb1: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_cpy(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_cast(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        type_: ggml_type,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_cont(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_cont_1d(ctx: *mut ggml_context, a: *mut ggml_tensor, ne0: i64) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_cont_2d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_cont_3d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
        ne2: i64,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_cont_4d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
        ne2: i64,
        ne3: i64,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_reshape(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_reshape_1d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_reshape_2d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_reshape_3d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
        ne2: i64,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_reshape_4d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
        ne2: i64,
        ne3: i64,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_view_1d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        offset: usize,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_view_2d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
        nb1: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_view_3d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
        ne2: i64,
        nb1: usize,
        nb2: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_view_4d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
        ne2: i64,
        ne3: i64,
        nb1: usize,
        nb2: usize,
        nb3: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_permute(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        axis0: ::std::os::raw::c_int,
        axis1: ::std::os::raw::c_int,
        axis2: ::std::os::raw::c_int,
        axis3: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_transpose(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_get_rows(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_get_rows_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_diag(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_diag_mask_inf(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        n_past: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_diag_mask_inf_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        n_past: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_diag_mask_zero(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        n_past: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_diag_mask_zero_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        n_past: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_soft_max(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_soft_max_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_soft_max_ext(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        mask: *mut ggml_tensor,
        scale: f32,
        max_bias: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_soft_max_ext_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        scale: f32,
        max_bias: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_soft_max_ext_back_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        scale: f32,
        max_bias: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_rope(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        n_dims: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_rope_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        n_dims: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_rope_ext(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
        n_dims: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        n_ctx_orig: ::std::os::raw::c_int,
        freq_base: f32,
        freq_scale: f32,
        ext_factor: f32,
        attn_factor: f32,
        beta_fast: f32,
        beta_slow: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_rope_multi(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
        n_dims: ::std::os::raw::c_int,
        sections: *mut ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        n_ctx_orig: ::std::os::raw::c_int,
        freq_base: f32,
        freq_scale: f32,
        ext_factor: f32,
        attn_factor: f32,
        beta_fast: f32,
        beta_slow: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_rope_ext_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
        n_dims: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        n_ctx_orig: ::std::os::raw::c_int,
        freq_base: f32,
        freq_scale: f32,
        ext_factor: f32,
        attn_factor: f32,
        beta_fast: f32,
        beta_slow: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_rope_custom(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        n_dims: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        n_ctx_orig: ::std::os::raw::c_int,
        freq_base: f32,
        freq_scale: f32,
        ext_factor: f32,
        attn_factor: f32,
        beta_fast: f32,
        beta_slow: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_rope_custom_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        n_dims: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        n_ctx_orig: ::std::os::raw::c_int,
        freq_base: f32,
        freq_scale: f32,
        ext_factor: f32,
        attn_factor: f32,
        beta_fast: f32,
        beta_slow: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_rope_yarn_corr_dims(
        n_dims: ::std::os::raw::c_int,
        n_ctx_orig: ::std::os::raw::c_int,
        freq_base: f32,
        beta_fast: f32,
        beta_slow: f32,
        dims: *mut f32,
    );
}
unsafe extern "C" {
    pub fn ggml_rope_ext_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
        n_dims: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        n_ctx_orig: ::std::os::raw::c_int,
        freq_base: f32,
        freq_scale: f32,
        ext_factor: f32,
        attn_factor: f32,
        beta_fast: f32,
        beta_slow: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_rope_multi_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
        n_dims: ::std::os::raw::c_int,
        sections: *mut ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        n_ctx_orig: ::std::os::raw::c_int,
        freq_base: f32,
        freq_scale: f32,
        ext_factor: f32,
        attn_factor: f32,
        beta_fast: f32,
        beta_slow: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_clamp(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        min: f32,
        max: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_im2col(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        s0: ::std::os::raw::c_int,
        s1: ::std::os::raw::c_int,
        p0: ::std::os::raw::c_int,
        p1: ::std::os::raw::c_int,
        d0: ::std::os::raw::c_int,
        d1: ::std::os::raw::c_int,
        is_2D: bool,
        dst_type: ggml_type,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_im2col_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        ne: *mut i64,
        s0: ::std::os::raw::c_int,
        s1: ::std::os::raw::c_int,
        p0: ::std::os::raw::c_int,
        p1: ::std::os::raw::c_int,
        d0: ::std::os::raw::c_int,
        d1: ::std::os::raw::c_int,
        is_2D: bool,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_conv_1d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        s0: ::std::os::raw::c_int,
        p0: ::std::os::raw::c_int,
        d0: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_conv_1d_ph(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        s: ::std::os::raw::c_int,
        d: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_conv_1d_dw(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        s0: ::std::os::raw::c_int,
        p0: ::std::os::raw::c_int,
        d0: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_conv_1d_dw_ph(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        s0: ::std::os::raw::c_int,
        d0: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_conv_transpose_1d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        s0: ::std::os::raw::c_int,
        p0: ::std::os::raw::c_int,
        d0: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_conv_2d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        s0: ::std::os::raw::c_int,
        s1: ::std::os::raw::c_int,
        p0: ::std::os::raw::c_int,
        p1: ::std::os::raw::c_int,
        d0: ::std::os::raw::c_int,
        d1: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_conv_2d_sk_p0(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_conv_2d_s1_ph(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_conv_2d_dw(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        s0: ::std::os::raw::c_int,
        s1: ::std::os::raw::c_int,
        p0: ::std::os::raw::c_int,
        p1: ::std::os::raw::c_int,
        d0: ::std::os::raw::c_int,
        d1: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_conv_2d_dw_direct(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        stride0: ::std::os::raw::c_int,
        stride1: ::std::os::raw::c_int,
        pad0: ::std::os::raw::c_int,
        pad1: ::std::os::raw::c_int,
        dilation0: ::std::os::raw::c_int,
        dilation1: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_conv_transpose_2d_p0(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        stride: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
pub const ggml_op_pool_GGML_OP_POOL_MAX: ggml_op_pool = 0;
pub const ggml_op_pool_GGML_OP_POOL_AVG: ggml_op_pool = 1;
pub const ggml_op_pool_GGML_OP_POOL_COUNT: ggml_op_pool = 2;
pub type ggml_op_pool = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn ggml_pool_1d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        op: ggml_op_pool,
        k0: ::std::os::raw::c_int,
        s0: ::std::os::raw::c_int,
        p0: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_pool_2d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        op: ggml_op_pool,
        k0: ::std::os::raw::c_int,
        k1: ::std::os::raw::c_int,
        s0: ::std::os::raw::c_int,
        s1: ::std::os::raw::c_int,
        p0: f32,
        p1: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_pool_2d_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        af: *mut ggml_tensor,
        op: ggml_op_pool,
        k0: ::std::os::raw::c_int,
        k1: ::std::os::raw::c_int,
        s0: ::std::os::raw::c_int,
        s1: ::std::os::raw::c_int,
        p0: f32,
        p1: f32,
    ) -> *mut ggml_tensor;
}
pub const ggml_scale_mode_GGML_SCALE_MODE_NEAREST: ggml_scale_mode = 0;
pub const ggml_scale_mode_GGML_SCALE_MODE_BILINEAR: ggml_scale_mode = 1;
pub type ggml_scale_mode = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn ggml_upscale(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        scale_factor: ::std::os::raw::c_int,
        mode: ggml_scale_mode,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_upscale_ext(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: ::std::os::raw::c_int,
        ne1: ::std::os::raw::c_int,
        ne2: ::std::os::raw::c_int,
        ne3: ::std::os::raw::c_int,
        mode: ggml_scale_mode,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_pad(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        p0: ::std::os::raw::c_int,
        p1: ::std::os::raw::c_int,
        p2: ::std::os::raw::c_int,
        p3: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_pad_reflect_1d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        p0: ::std::os::raw::c_int,
        p1: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_timestep_embedding(
        ctx: *mut ggml_context,
        timesteps: *mut ggml_tensor,
        dim: ::std::os::raw::c_int,
        max_period: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
pub const ggml_sort_order_GGML_SORT_ORDER_ASC: ggml_sort_order = 0;
pub const ggml_sort_order_GGML_SORT_ORDER_DESC: ggml_sort_order = 1;
pub type ggml_sort_order = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn ggml_argsort(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        order: ggml_sort_order,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_arange(
        ctx: *mut ggml_context,
        start: f32,
        stop: f32,
        step: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_top_k(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        k: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_flash_attn_ext(
        ctx: *mut ggml_context,
        q: *mut ggml_tensor,
        k: *mut ggml_tensor,
        v: *mut ggml_tensor,
        mask: *mut ggml_tensor,
        scale: f32,
        max_bias: f32,
        logit_softcap: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_flash_attn_ext_set_prec(a: *mut ggml_tensor, prec: ggml_prec);
}
unsafe extern "C" {
    pub fn ggml_flash_attn_ext_get_prec(a: *const ggml_tensor) -> ggml_prec;
}
unsafe extern "C" {
    pub fn ggml_flash_attn_back(
        ctx: *mut ggml_context,
        q: *mut ggml_tensor,
        k: *mut ggml_tensor,
        v: *mut ggml_tensor,
        d: *mut ggml_tensor,
        masked: bool,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_ssm_conv(
        ctx: *mut ggml_context,
        sx: *mut ggml_tensor,
        c: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_ssm_scan(
        ctx: *mut ggml_context,
        s: *mut ggml_tensor,
        x: *mut ggml_tensor,
        dt: *mut ggml_tensor,
        A: *mut ggml_tensor,
        B: *mut ggml_tensor,
        C: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_win_part(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        w: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_win_unpart(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        w0: ::std::os::raw::c_int,
        h0: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_unary(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        op: ggml_unary_op,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_unary_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        op: ggml_unary_op,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_get_rel_pos(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        qh: ::std::os::raw::c_int,
        kh: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_add_rel_pos(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        pw: *mut ggml_tensor,
        ph: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_add_rel_pos_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        pw: *mut ggml_tensor,
        ph: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_rwkv_wkv6(
        ctx: *mut ggml_context,
        k: *mut ggml_tensor,
        v: *mut ggml_tensor,
        r: *mut ggml_tensor,
        tf: *mut ggml_tensor,
        td: *mut ggml_tensor,
        state: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_gated_linear_attn(
        ctx: *mut ggml_context,
        k: *mut ggml_tensor,
        v: *mut ggml_tensor,
        q: *mut ggml_tensor,
        g: *mut ggml_tensor,
        state: *mut ggml_tensor,
        scale: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_rwkv_wkv7(
        ctx: *mut ggml_context,
        r: *mut ggml_tensor,
        w: *mut ggml_tensor,
        k: *mut ggml_tensor,
        v: *mut ggml_tensor,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        state: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
pub type ggml_custom1_op_t = ::std::option::Option<
    unsafe extern "C" fn(
        dst: *mut ggml_tensor,
        a: *const ggml_tensor,
        ith: ::std::os::raw::c_int,
        nth: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
pub type ggml_custom2_op_t = ::std::option::Option<
    unsafe extern "C" fn(
        dst: *mut ggml_tensor,
        a: *const ggml_tensor,
        b: *const ggml_tensor,
        ith: ::std::os::raw::c_int,
        nth: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
pub type ggml_custom3_op_t = ::std::option::Option<
    unsafe extern "C" fn(
        dst: *mut ggml_tensor,
        a: *const ggml_tensor,
        b: *const ggml_tensor,
        c: *const ggml_tensor,
        ith: ::std::os::raw::c_int,
        nth: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
unsafe extern "C" {
    pub fn ggml_map_custom1(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        fun: ggml_custom1_op_t,
        n_tasks: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_map_custom1_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        fun: ggml_custom1_op_t,
        n_tasks: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_map_custom2(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        fun: ggml_custom2_op_t,
        n_tasks: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_map_custom2_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        fun: ggml_custom2_op_t,
        n_tasks: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_map_custom3(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
        fun: ggml_custom3_op_t,
        n_tasks: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_map_custom3_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
        fun: ggml_custom3_op_t,
        n_tasks: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut ggml_tensor;
}
pub type ggml_custom_op_t = ::std::option::Option<
    unsafe extern "C" fn(
        dst: *mut ggml_tensor,
        ith: ::std::os::raw::c_int,
        nth: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
unsafe extern "C" {
    pub fn ggml_custom_4d(
        ctx: *mut ggml_context,
        type_: ggml_type,
        ne0: i64,
        ne1: i64,
        ne2: i64,
        ne3: i64,
        args: *mut *mut ggml_tensor,
        n_args: ::std::os::raw::c_int,
        fun: ggml_custom_op_t,
        n_tasks: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_custom_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        args: *mut *mut ggml_tensor,
        n_args: ::std::os::raw::c_int,
        fun: ggml_custom_op_t,
        n_tasks: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_cross_entropy_loss(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_cross_entropy_loss_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_opt_step_adamw(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        grad: *mut ggml_tensor,
        m: *mut ggml_tensor,
        v: *mut ggml_tensor,
        adamw_params: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_build_forward_expand(cgraph: *mut ggml_cgraph, tensor: *mut ggml_tensor);
}
unsafe extern "C" {
    pub fn ggml_build_backward_expand(
        ctx_static: *mut ggml_context,
        ctx_compute: *mut ggml_context,
        cgraph: *mut ggml_cgraph,
        accumulate: bool,
    );
}
unsafe extern "C" {
    pub fn ggml_new_graph(ctx: *mut ggml_context) -> *mut ggml_cgraph;
}
unsafe extern "C" {
    pub fn ggml_new_graph_custom(
        ctx: *mut ggml_context,
        size: usize,
        grads: bool,
    ) -> *mut ggml_cgraph;
}
unsafe extern "C" {
    pub fn ggml_graph_dup(ctx: *mut ggml_context, cgraph: *mut ggml_cgraph) -> *mut ggml_cgraph;
}
unsafe extern "C" {
    pub fn ggml_graph_cpy(src: *mut ggml_cgraph, dst: *mut ggml_cgraph);
}
unsafe extern "C" {
    pub fn ggml_graph_reset(cgraph: *mut ggml_cgraph);
}
unsafe extern "C" {
    pub fn ggml_graph_clear(cgraph: *mut ggml_cgraph);
}
unsafe extern "C" {
    pub fn ggml_graph_size(cgraph: *mut ggml_cgraph) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ggml_graph_node(cgraph: *mut ggml_cgraph, i: ::std::os::raw::c_int) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_graph_nodes(cgraph: *mut ggml_cgraph) -> *mut *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_graph_n_nodes(cgraph: *mut ggml_cgraph) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ggml_graph_add_node(cgraph: *mut ggml_cgraph, tensor: *mut ggml_tensor);
}
unsafe extern "C" {
    pub fn ggml_graph_overhead() -> usize;
}
unsafe extern "C" {
    pub fn ggml_graph_overhead_custom(size: usize, grads: bool) -> usize;
}
unsafe extern "C" {
    pub fn ggml_graph_get_tensor(
        cgraph: *const ggml_cgraph,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_graph_get_grad(
        cgraph: *const ggml_cgraph,
        node: *const ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_graph_get_grad_acc(
        cgraph: *const ggml_cgraph,
        node: *const ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_graph_export(cgraph: *const ggml_cgraph, fname: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn ggml_graph_import(
        fname: *const ::std::os::raw::c_char,
        ctx_data: *mut *mut ggml_context,
        ctx_eval: *mut *mut ggml_context,
    ) -> *mut ggml_cgraph;
}
unsafe extern "C" {
    pub fn ggml_graph_print(cgraph: *const ggml_cgraph);
}
unsafe extern "C" {
    pub fn ggml_graph_dump_dot(
        gb: *const ggml_cgraph,
        gf: *const ggml_cgraph,
        filename: *const ::std::os::raw::c_char,
    );
}
pub type ggml_log_callback = ::std::option::Option<
    unsafe extern "C" fn(
        level: ggml_log_level,
        text: *const ::std::os::raw::c_char,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
unsafe extern "C" {
    pub fn ggml_log_set(log_callback: ggml_log_callback, user_data: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn ggml_set_zero(tensor: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_quantize_init(type_: ggml_type);
}
unsafe extern "C" {
    pub fn ggml_quantize_free();
}
unsafe extern "C" {
    pub fn ggml_quantize_requires_imatrix(type_: ggml_type) -> bool;
}
unsafe extern "C" {
    pub fn ggml_quantize_chunk(
        type_: ggml_type,
        src: *const f32,
        dst: *mut ::std::os::raw::c_void,
        start: i64,
        nrows: i64,
        n_per_row: i64,
        imatrix: *const f32,
    ) -> usize;
}
pub type ggml_to_float_t = ::std::option::Option<
    unsafe extern "C" fn(x: *const ::std::os::raw::c_void, y: *mut f32, k: i64),
>;
pub type ggml_from_float_t = ::std::option::Option<
    unsafe extern "C" fn(x: *const f32, y: *mut ::std::os::raw::c_void, k: i64),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_type_traits {
    pub type_name: *const ::std::os::raw::c_char,
    pub blck_size: i64,
    pub blck_size_interleave: i64,
    pub type_size: usize,
    pub is_quantized: bool,
    pub to_float: ggml_to_float_t,
    pub from_float_ref: ggml_from_float_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ggml_type_traits"][::std::mem::size_of::<ggml_type_traits>() - 56usize];
    ["Alignment of ggml_type_traits"][::std::mem::align_of::<ggml_type_traits>() - 8usize];
    ["Offset of field: ggml_type_traits::type_name"]
        [::std::mem::offset_of!(ggml_type_traits, type_name) - 0usize];
    ["Offset of field: ggml_type_traits::blck_size"]
        [::std::mem::offset_of!(ggml_type_traits, blck_size) - 8usize];
    ["Offset of field: ggml_type_traits::blck_size_interleave"]
        [::std::mem::offset_of!(ggml_type_traits, blck_size_interleave) - 16usize];
    ["Offset of field: ggml_type_traits::type_size"]
        [::std::mem::offset_of!(ggml_type_traits, type_size) - 24usize];
    ["Offset of field: ggml_type_traits::is_quantized"]
        [::std::mem::offset_of!(ggml_type_traits, is_quantized) - 32usize];
    ["Offset of field: ggml_type_traits::to_float"]
        [::std::mem::offset_of!(ggml_type_traits, to_float) - 40usize];
    ["Offset of field: ggml_type_traits::from_float_ref"]
        [::std::mem::offset_of!(ggml_type_traits, from_float_ref) - 48usize];
};
unsafe extern "C" {
    pub fn ggml_get_type_traits(type_: ggml_type) -> *const ggml_type_traits;
}
pub const ggml_sched_priority_GGML_SCHED_PRIO_NORMAL: ggml_sched_priority = 0;
pub const ggml_sched_priority_GGML_SCHED_PRIO_MEDIUM: ggml_sched_priority = 1;
pub const ggml_sched_priority_GGML_SCHED_PRIO_HIGH: ggml_sched_priority = 2;
pub const ggml_sched_priority_GGML_SCHED_PRIO_REALTIME: ggml_sched_priority = 3;
pub type ggml_sched_priority = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_threadpool_params {
    pub cpumask: [bool; 512usize],
    pub n_threads: ::std::os::raw::c_int,
    pub prio: ggml_sched_priority,
    pub poll: u32,
    pub strict_cpu: bool,
    pub paused: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ggml_threadpool_params"][::std::mem::size_of::<ggml_threadpool_params>() - 528usize];
    ["Alignment of ggml_threadpool_params"]
        [::std::mem::align_of::<ggml_threadpool_params>() - 4usize];
    ["Offset of field: ggml_threadpool_params::cpumask"]
        [::std::mem::offset_of!(ggml_threadpool_params, cpumask) - 0usize];
    ["Offset of field: ggml_threadpool_params::n_threads"]
        [::std::mem::offset_of!(ggml_threadpool_params, n_threads) - 512usize];
    ["Offset of field: ggml_threadpool_params::prio"]
        [::std::mem::offset_of!(ggml_threadpool_params, prio) - 516usize];
    ["Offset of field: ggml_threadpool_params::poll"]
        [::std::mem::offset_of!(ggml_threadpool_params, poll) - 520usize];
    ["Offset of field: ggml_threadpool_params::strict_cpu"]
        [::std::mem::offset_of!(ggml_threadpool_params, strict_cpu) - 524usize];
    ["Offset of field: ggml_threadpool_params::paused"]
        [::std::mem::offset_of!(ggml_threadpool_params, paused) - 525usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_threadpool {
    _unused: [u8; 0],
}
pub type ggml_threadpool_t = *mut ggml_threadpool;
unsafe extern "C" {
    pub fn ggml_threadpool_params_default(
        n_threads: ::std::os::raw::c_int,
    ) -> ggml_threadpool_params;
}
unsafe extern "C" {
    pub fn ggml_threadpool_params_init(
        p: *mut ggml_threadpool_params,
        n_threads: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ggml_threadpool_params_match(
        p0: *const ggml_threadpool_params,
        p1: *const ggml_threadpool_params,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_backend_buffer_type {
    _unused: [u8; 0],
}
pub type ggml_backend_buffer_type_t = *mut ggml_backend_buffer_type;
pub type ggml_backend_buffer_t = *mut ggml_backend_buffer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_backend {
    _unused: [u8; 0],
}
pub type ggml_backend_t = *mut ggml_backend;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_tallocr {
    pub buffer: ggml_backend_buffer_t,
    pub base: *mut ::std::os::raw::c_void,
    pub alignment: usize,
    pub offset: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ggml_tallocr"][::std::mem::size_of::<ggml_tallocr>() - 32usize];
    ["Alignment of ggml_tallocr"][::std::mem::align_of::<ggml_tallocr>() - 8usize];
    ["Offset of field: ggml_tallocr::buffer"]
        [::std::mem::offset_of!(ggml_tallocr, buffer) - 0usize];
    ["Offset of field: ggml_tallocr::base"][::std::mem::offset_of!(ggml_tallocr, base) - 8usize];
    ["Offset of field: ggml_tallocr::alignment"]
        [::std::mem::offset_of!(ggml_tallocr, alignment) - 16usize];
    ["Offset of field: ggml_tallocr::offset"]
        [::std::mem::offset_of!(ggml_tallocr, offset) - 24usize];
};
unsafe extern "C" {
    pub fn ggml_tallocr_new(buffer: ggml_backend_buffer_t) -> ggml_tallocr;
}
unsafe extern "C" {
    pub fn ggml_tallocr_alloc(talloc: *mut ggml_tallocr, tensor: *mut ggml_tensor) -> ggml_status;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_gallocr {
    _unused: [u8; 0],
}
pub type ggml_gallocr_t = *mut ggml_gallocr;
unsafe extern "C" {
    pub fn ggml_gallocr_new(buft: ggml_backend_buffer_type_t) -> ggml_gallocr_t;
}
unsafe extern "C" {
    pub fn ggml_gallocr_new_n(
        bufts: *mut ggml_backend_buffer_type_t,
        n_bufs: ::std::os::raw::c_int,
    ) -> ggml_gallocr_t;
}
unsafe extern "C" {
    pub fn ggml_gallocr_free(galloc: ggml_gallocr_t);
}
unsafe extern "C" {
    pub fn ggml_gallocr_reserve(galloc: ggml_gallocr_t, graph: *mut ggml_cgraph) -> bool;
}
unsafe extern "C" {
    pub fn ggml_gallocr_reserve_n(
        galloc: ggml_gallocr_t,
        graph: *mut ggml_cgraph,
        node_buffer_ids: *const ::std::os::raw::c_int,
        leaf_buffer_ids: *const ::std::os::raw::c_int,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ggml_gallocr_alloc_graph(galloc: ggml_gallocr_t, graph: *mut ggml_cgraph) -> bool;
}
unsafe extern "C" {
    pub fn ggml_gallocr_get_buffer_size(
        galloc: ggml_gallocr_t,
        buffer_id: ::std::os::raw::c_int,
    ) -> usize;
}
unsafe extern "C" {
    pub fn ggml_backend_alloc_ctx_tensors_from_buft(
        ctx: *mut ggml_context,
        buft: ggml_backend_buffer_type_t,
    ) -> *mut ggml_backend_buffer;
}
unsafe extern "C" {
    pub fn ggml_backend_alloc_ctx_tensors(
        ctx: *mut ggml_context,
        backend: ggml_backend_t,
    ) -> *mut ggml_backend_buffer;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_backend_event {
    _unused: [u8; 0],
}
pub type ggml_backend_event_t = *mut ggml_backend_event;
pub type ggml_backend_graph_plan_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_backend_reg {
    _unused: [u8; 0],
}
pub type ggml_backend_reg_t = *mut ggml_backend_reg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_backend_device {
    _unused: [u8; 0],
}
pub type ggml_backend_dev_t = *mut ggml_backend_device;
unsafe extern "C" {
    pub fn ggml_backend_buft_name(
        buft: ggml_backend_buffer_type_t,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ggml_backend_buft_alloc_buffer(
        buft: ggml_backend_buffer_type_t,
        size: usize,
    ) -> ggml_backend_buffer_t;
}
unsafe extern "C" {
    pub fn ggml_backend_buft_get_alignment(buft: ggml_backend_buffer_type_t) -> usize;
}
unsafe extern "C" {
    pub fn ggml_backend_buft_get_max_size(buft: ggml_backend_buffer_type_t) -> usize;
}
unsafe extern "C" {
    pub fn ggml_backend_buft_get_alloc_size(
        buft: ggml_backend_buffer_type_t,
        tensor: *mut ggml_tensor,
    ) -> usize;
}
unsafe extern "C" {
    pub fn ggml_backend_buft_is_host(buft: ggml_backend_buffer_type_t) -> bool;
}
unsafe extern "C" {
    pub fn ggml_backend_buft_get_device(buft: ggml_backend_buffer_type_t) -> ggml_backend_dev_t;
}
pub const ggml_backend_buffer_usage_GGML_BACKEND_BUFFER_USAGE_ANY: ggml_backend_buffer_usage = 0;
pub const ggml_backend_buffer_usage_GGML_BACKEND_BUFFER_USAGE_WEIGHTS: ggml_backend_buffer_usage =
    1;
pub const ggml_backend_buffer_usage_GGML_BACKEND_BUFFER_USAGE_COMPUTE: ggml_backend_buffer_usage =
    2;
pub type ggml_backend_buffer_usage = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn ggml_backend_buffer_name(buffer: ggml_backend_buffer_t)
        -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ggml_backend_buffer_free(buffer: ggml_backend_buffer_t);
}
unsafe extern "C" {
    pub fn ggml_backend_buffer_get_base(
        buffer: ggml_backend_buffer_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn ggml_backend_buffer_get_size(buffer: ggml_backend_buffer_t) -> usize;
}
unsafe extern "C" {
    pub fn ggml_backend_buffer_init_tensor(
        buffer: ggml_backend_buffer_t,
        tensor: *mut ggml_tensor,
    ) -> ggml_status;
}
unsafe extern "C" {
    pub fn ggml_backend_buffer_get_alignment(buffer: ggml_backend_buffer_t) -> usize;
}
unsafe extern "C" {
    pub fn ggml_backend_buffer_get_max_size(buffer: ggml_backend_buffer_t) -> usize;
}
unsafe extern "C" {
    pub fn ggml_backend_buffer_get_alloc_size(
        buffer: ggml_backend_buffer_t,
        tensor: *mut ggml_tensor,
    ) -> usize;
}
unsafe extern "C" {
    pub fn ggml_backend_buffer_clear(buffer: ggml_backend_buffer_t, value: u8);
}
unsafe extern "C" {
    pub fn ggml_backend_buffer_is_host(buffer: ggml_backend_buffer_t) -> bool;
}
unsafe extern "C" {
    pub fn ggml_backend_buffer_set_usage(
        buffer: ggml_backend_buffer_t,
        usage: ggml_backend_buffer_usage,
    );
}
unsafe extern "C" {
    pub fn ggml_backend_buffer_get_usage(
        buffer: ggml_backend_buffer_t,
    ) -> ggml_backend_buffer_usage;
}
unsafe extern "C" {
    pub fn ggml_backend_buffer_get_type(
        buffer: ggml_backend_buffer_t,
    ) -> ggml_backend_buffer_type_t;
}
unsafe extern "C" {
    pub fn ggml_backend_buffer_reset(buffer: ggml_backend_buffer_t);
}
unsafe extern "C" {
    pub fn ggml_backend_tensor_copy(src: *mut ggml_tensor, dst: *mut ggml_tensor);
}
unsafe extern "C" {
    pub fn ggml_backend_guid(backend: ggml_backend_t) -> ggml_guid_t;
}
unsafe extern "C" {
    pub fn ggml_backend_name(backend: ggml_backend_t) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ggml_backend_free(backend: ggml_backend_t);
}
unsafe extern "C" {
    pub fn ggml_backend_get_default_buffer_type(
        backend: ggml_backend_t,
    ) -> ggml_backend_buffer_type_t;
}
unsafe extern "C" {
    pub fn ggml_backend_alloc_buffer(backend: ggml_backend_t, size: usize)
        -> ggml_backend_buffer_t;
}
unsafe extern "C" {
    pub fn ggml_backend_get_alignment(backend: ggml_backend_t) -> usize;
}
unsafe extern "C" {
    pub fn ggml_backend_get_max_size(backend: ggml_backend_t) -> usize;
}
unsafe extern "C" {
    pub fn ggml_backend_tensor_set_async(
        backend: ggml_backend_t,
        tensor: *mut ggml_tensor,
        data: *const ::std::os::raw::c_void,
        offset: usize,
        size: usize,
    );
}
unsafe extern "C" {
    pub fn ggml_backend_tensor_get_async(
        backend: ggml_backend_t,
        tensor: *const ggml_tensor,
        data: *mut ::std::os::raw::c_void,
        offset: usize,
        size: usize,
    );
}
unsafe extern "C" {
    pub fn ggml_backend_tensor_set(
        tensor: *mut ggml_tensor,
        data: *const ::std::os::raw::c_void,
        offset: usize,
        size: usize,
    );
}
unsafe extern "C" {
    pub fn ggml_backend_tensor_get(
        tensor: *const ggml_tensor,
        data: *mut ::std::os::raw::c_void,
        offset: usize,
        size: usize,
    );
}
unsafe extern "C" {
    pub fn ggml_backend_tensor_memset(
        tensor: *mut ggml_tensor,
        value: u8,
        offset: usize,
        size: usize,
    );
}
unsafe extern "C" {
    pub fn ggml_backend_synchronize(backend: ggml_backend_t);
}
unsafe extern "C" {
    pub fn ggml_backend_graph_plan_create(
        backend: ggml_backend_t,
        cgraph: *mut ggml_cgraph,
    ) -> ggml_backend_graph_plan_t;
}
unsafe extern "C" {
    pub fn ggml_backend_graph_plan_free(backend: ggml_backend_t, plan: ggml_backend_graph_plan_t);
}
unsafe extern "C" {
    pub fn ggml_backend_graph_plan_compute(
        backend: ggml_backend_t,
        plan: ggml_backend_graph_plan_t,
    ) -> ggml_status;
}
unsafe extern "C" {
    pub fn ggml_backend_graph_compute(
        backend: ggml_backend_t,
        cgraph: *mut ggml_cgraph,
    ) -> ggml_status;
}
unsafe extern "C" {
    pub fn ggml_backend_graph_compute_async(
        backend: ggml_backend_t,
        cgraph: *mut ggml_cgraph,
    ) -> ggml_status;
}
unsafe extern "C" {
    pub fn ggml_backend_supports_op(backend: ggml_backend_t, op: *const ggml_tensor) -> bool;
}
unsafe extern "C" {
    pub fn ggml_backend_supports_buft(
        backend: ggml_backend_t,
        buft: ggml_backend_buffer_type_t,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ggml_backend_offload_op(backend: ggml_backend_t, op: *const ggml_tensor) -> bool;
}
unsafe extern "C" {
    pub fn ggml_backend_tensor_copy_async(
        backend_src: ggml_backend_t,
        backend_dst: ggml_backend_t,
        src: *mut ggml_tensor,
        dst: *mut ggml_tensor,
    );
}
unsafe extern "C" {
    pub fn ggml_backend_get_device(backend: ggml_backend_t) -> ggml_backend_dev_t;
}
unsafe extern "C" {
    pub fn ggml_backend_event_new(device: ggml_backend_dev_t) -> ggml_backend_event_t;
}
unsafe extern "C" {
    pub fn ggml_backend_event_free(event: ggml_backend_event_t);
}
unsafe extern "C" {
    pub fn ggml_backend_event_record(event: ggml_backend_event_t, backend: ggml_backend_t);
}
unsafe extern "C" {
    pub fn ggml_backend_event_synchronize(event: ggml_backend_event_t);
}
unsafe extern "C" {
    pub fn ggml_backend_event_wait(backend: ggml_backend_t, event: ggml_backend_event_t);
}
pub const ggml_backend_dev_type_GGML_BACKEND_DEVICE_TYPE_CPU: ggml_backend_dev_type = 0;
pub const ggml_backend_dev_type_GGML_BACKEND_DEVICE_TYPE_GPU: ggml_backend_dev_type = 1;
pub const ggml_backend_dev_type_GGML_BACKEND_DEVICE_TYPE_ACCEL: ggml_backend_dev_type = 2;
pub type ggml_backend_dev_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_backend_dev_caps {
    pub async_: bool,
    pub host_buffer: bool,
    pub buffer_from_host_ptr: bool,
    pub events: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ggml_backend_dev_caps"][::std::mem::size_of::<ggml_backend_dev_caps>() - 4usize];
    ["Alignment of ggml_backend_dev_caps"]
        [::std::mem::align_of::<ggml_backend_dev_caps>() - 1usize];
    ["Offset of field: ggml_backend_dev_caps::async_"]
        [::std::mem::offset_of!(ggml_backend_dev_caps, async_) - 0usize];
    ["Offset of field: ggml_backend_dev_caps::host_buffer"]
        [::std::mem::offset_of!(ggml_backend_dev_caps, host_buffer) - 1usize];
    ["Offset of field: ggml_backend_dev_caps::buffer_from_host_ptr"]
        [::std::mem::offset_of!(ggml_backend_dev_caps, buffer_from_host_ptr) - 2usize];
    ["Offset of field: ggml_backend_dev_caps::events"]
        [::std::mem::offset_of!(ggml_backend_dev_caps, events) - 3usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_backend_dev_props {
    pub name: *const ::std::os::raw::c_char,
    pub description: *const ::std::os::raw::c_char,
    pub memory_free: usize,
    pub memory_total: usize,
    pub type_: ggml_backend_dev_type,
    pub caps: ggml_backend_dev_caps,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ggml_backend_dev_props"][::std::mem::size_of::<ggml_backend_dev_props>() - 40usize];
    ["Alignment of ggml_backend_dev_props"]
        [::std::mem::align_of::<ggml_backend_dev_props>() - 8usize];
    ["Offset of field: ggml_backend_dev_props::name"]
        [::std::mem::offset_of!(ggml_backend_dev_props, name) - 0usize];
    ["Offset of field: ggml_backend_dev_props::description"]
        [::std::mem::offset_of!(ggml_backend_dev_props, description) - 8usize];
    ["Offset of field: ggml_backend_dev_props::memory_free"]
        [::std::mem::offset_of!(ggml_backend_dev_props, memory_free) - 16usize];
    ["Offset of field: ggml_backend_dev_props::memory_total"]
        [::std::mem::offset_of!(ggml_backend_dev_props, memory_total) - 24usize];
    ["Offset of field: ggml_backend_dev_props::type_"]
        [::std::mem::offset_of!(ggml_backend_dev_props, type_) - 32usize];
    ["Offset of field: ggml_backend_dev_props::caps"]
        [::std::mem::offset_of!(ggml_backend_dev_props, caps) - 36usize];
};
unsafe extern "C" {
    pub fn ggml_backend_dev_name(device: ggml_backend_dev_t) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ggml_backend_dev_description(
        device: ggml_backend_dev_t,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ggml_backend_dev_memory(device: ggml_backend_dev_t, free: *mut usize, total: *mut usize);
}
unsafe extern "C" {
    pub fn ggml_backend_dev_type(device: ggml_backend_dev_t) -> ggml_backend_dev_type;
}
unsafe extern "C" {
    pub fn ggml_backend_dev_get_props(
        device: ggml_backend_dev_t,
        props: *mut ggml_backend_dev_props,
    );
}
unsafe extern "C" {
    pub fn ggml_backend_dev_backend_reg(device: ggml_backend_dev_t) -> ggml_backend_reg_t;
}
unsafe extern "C" {
    pub fn ggml_backend_dev_init(
        device: ggml_backend_dev_t,
        params: *const ::std::os::raw::c_char,
    ) -> ggml_backend_t;
}
unsafe extern "C" {
    pub fn ggml_backend_dev_buffer_type(device: ggml_backend_dev_t) -> ggml_backend_buffer_type_t;
}
unsafe extern "C" {
    pub fn ggml_backend_dev_host_buffer_type(
        device: ggml_backend_dev_t,
    ) -> ggml_backend_buffer_type_t;
}
unsafe extern "C" {
    pub fn ggml_backend_dev_buffer_from_host_ptr(
        device: ggml_backend_dev_t,
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
        max_tensor_size: usize,
    ) -> ggml_backend_buffer_t;
}
unsafe extern "C" {
    pub fn ggml_backend_dev_supports_op(device: ggml_backend_dev_t, op: *const ggml_tensor)
        -> bool;
}
unsafe extern "C" {
    pub fn ggml_backend_dev_supports_buft(
        device: ggml_backend_dev_t,
        buft: ggml_backend_buffer_type_t,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ggml_backend_dev_offload_op(device: ggml_backend_dev_t, op: *const ggml_tensor) -> bool;
}
unsafe extern "C" {
    pub fn ggml_backend_reg_name(reg: ggml_backend_reg_t) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ggml_backend_reg_dev_count(reg: ggml_backend_reg_t) -> usize;
}
unsafe extern "C" {
    pub fn ggml_backend_reg_dev_get(reg: ggml_backend_reg_t, index: usize) -> ggml_backend_dev_t;
}
unsafe extern "C" {
    pub fn ggml_backend_reg_get_proc_address(
        reg: ggml_backend_reg_t,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
pub type ggml_backend_split_buffer_type_t = ::std::option::Option<
    unsafe extern "C" fn(
        main_device: ::std::os::raw::c_int,
        tensor_split: *const f32,
    ) -> ggml_backend_buffer_type_t,
>;
pub type ggml_backend_set_n_threads_t = ::std::option::Option<
    unsafe extern "C" fn(backend: ggml_backend_t, n_threads: ::std::os::raw::c_int),
>;
pub type ggml_backend_dev_get_extra_bufts_t = ::std::option::Option<
    unsafe extern "C" fn(device: ggml_backend_dev_t) -> *mut ggml_backend_buffer_type_t,
>;
pub type ggml_backend_set_abort_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        backend: ggml_backend_t,
        abort_callback: ggml_abort_callback,
        abort_callback_data: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_backend_feature {
    pub name: *const ::std::os::raw::c_char,
    pub value: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ggml_backend_feature"][::std::mem::size_of::<ggml_backend_feature>() - 16usize];
    ["Alignment of ggml_backend_feature"][::std::mem::align_of::<ggml_backend_feature>() - 8usize];
    ["Offset of field: ggml_backend_feature::name"]
        [::std::mem::offset_of!(ggml_backend_feature, name) - 0usize];
    ["Offset of field: ggml_backend_feature::value"]
        [::std::mem::offset_of!(ggml_backend_feature, value) - 8usize];
};
pub type ggml_backend_get_features_t = ::std::option::Option<
    unsafe extern "C" fn(reg: ggml_backend_reg_t) -> *mut ggml_backend_feature,
>;
unsafe extern "C" {
    pub fn ggml_backend_device_register(device: ggml_backend_dev_t);
}
unsafe extern "C" {
    pub fn ggml_backend_reg_count() -> usize;
}
unsafe extern "C" {
    pub fn ggml_backend_reg_get(index: usize) -> ggml_backend_reg_t;
}
unsafe extern "C" {
    pub fn ggml_backend_reg_by_name(name: *const ::std::os::raw::c_char) -> ggml_backend_reg_t;
}
unsafe extern "C" {
    pub fn ggml_backend_dev_count() -> usize;
}
unsafe extern "C" {
    pub fn ggml_backend_dev_get(index: usize) -> ggml_backend_dev_t;
}
unsafe extern "C" {
    pub fn ggml_backend_dev_by_name(name: *const ::std::os::raw::c_char) -> ggml_backend_dev_t;
}
unsafe extern "C" {
    pub fn ggml_backend_dev_by_type(type_: ggml_backend_dev_type) -> ggml_backend_dev_t;
}
unsafe extern "C" {
    pub fn ggml_backend_init_by_name(
        name: *const ::std::os::raw::c_char,
        params: *const ::std::os::raw::c_char,
    ) -> ggml_backend_t;
}
unsafe extern "C" {
    pub fn ggml_backend_init_by_type(
        type_: ggml_backend_dev_type,
        params: *const ::std::os::raw::c_char,
    ) -> ggml_backend_t;
}
unsafe extern "C" {
    pub fn ggml_backend_init_best() -> ggml_backend_t;
}
unsafe extern "C" {
    pub fn ggml_backend_load(path: *const ::std::os::raw::c_char) -> ggml_backend_reg_t;
}
unsafe extern "C" {
    pub fn ggml_backend_unload(reg: ggml_backend_reg_t);
}
unsafe extern "C" {
    pub fn ggml_backend_load_all();
}
unsafe extern "C" {
    pub fn ggml_backend_load_all_from_path(dir_path: *const ::std::os::raw::c_char);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_backend_sched {
    _unused: [u8; 0],
}
pub type ggml_backend_sched_t = *mut ggml_backend_sched;
pub type ggml_backend_sched_eval_callback = ::std::option::Option<
    unsafe extern "C" fn(
        t: *mut ggml_tensor,
        ask: bool,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool,
>;
unsafe extern "C" {
    pub fn ggml_backend_sched_new(
        backends: *mut ggml_backend_t,
        bufts: *mut ggml_backend_buffer_type_t,
        n_backends: ::std::os::raw::c_int,
        graph_size: usize,
        parallel: bool,
    ) -> ggml_backend_sched_t;
}
unsafe extern "C" {
    pub fn ggml_backend_sched_free(sched: ggml_backend_sched_t);
}
unsafe extern "C" {
    pub fn ggml_backend_sched_reserve(
        sched: ggml_backend_sched_t,
        measure_graph: *mut ggml_cgraph,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ggml_backend_sched_get_n_backends(sched: ggml_backend_sched_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ggml_backend_sched_get_backend(
        sched: ggml_backend_sched_t,
        i: ::std::os::raw::c_int,
    ) -> ggml_backend_t;
}
unsafe extern "C" {
    pub fn ggml_backend_sched_get_n_splits(sched: ggml_backend_sched_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ggml_backend_sched_get_n_copies(sched: ggml_backend_sched_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ggml_backend_sched_get_buffer_size(
        sched: ggml_backend_sched_t,
        backend: ggml_backend_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn ggml_backend_sched_set_tensor_backend(
        sched: ggml_backend_sched_t,
        node: *mut ggml_tensor,
        backend: ggml_backend_t,
    );
}
unsafe extern "C" {
    pub fn ggml_backend_sched_get_tensor_backend(
        sched: ggml_backend_sched_t,
        node: *mut ggml_tensor,
    ) -> ggml_backend_t;
}
unsafe extern "C" {
    pub fn ggml_backend_sched_alloc_graph(
        sched: ggml_backend_sched_t,
        graph: *mut ggml_cgraph,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ggml_backend_sched_graph_compute(
        sched: ggml_backend_sched_t,
        graph: *mut ggml_cgraph,
    ) -> ggml_status;
}
unsafe extern "C" {
    pub fn ggml_backend_sched_graph_compute_async(
        sched: ggml_backend_sched_t,
        graph: *mut ggml_cgraph,
    ) -> ggml_status;
}
unsafe extern "C" {
    pub fn ggml_backend_sched_synchronize(sched: ggml_backend_sched_t);
}
unsafe extern "C" {
    pub fn ggml_backend_sched_reset(sched: ggml_backend_sched_t);
}
unsafe extern "C" {
    pub fn ggml_backend_sched_set_eval_callback(
        sched: ggml_backend_sched_t,
        callback: ggml_backend_sched_eval_callback,
        user_data: *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_backend_graph_copy {
    pub buffer: ggml_backend_buffer_t,
    pub ctx_allocated: *mut ggml_context,
    pub ctx_unallocated: *mut ggml_context,
    pub graph: *mut ggml_cgraph,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ggml_backend_graph_copy"][::std::mem::size_of::<ggml_backend_graph_copy>() - 32usize];
    ["Alignment of ggml_backend_graph_copy"]
        [::std::mem::align_of::<ggml_backend_graph_copy>() - 8usize];
    ["Offset of field: ggml_backend_graph_copy::buffer"]
        [::std::mem::offset_of!(ggml_backend_graph_copy, buffer) - 0usize];
    ["Offset of field: ggml_backend_graph_copy::ctx_allocated"]
        [::std::mem::offset_of!(ggml_backend_graph_copy, ctx_allocated) - 8usize];
    ["Offset of field: ggml_backend_graph_copy::ctx_unallocated"]
        [::std::mem::offset_of!(ggml_backend_graph_copy, ctx_unallocated) - 16usize];
    ["Offset of field: ggml_backend_graph_copy::graph"]
        [::std::mem::offset_of!(ggml_backend_graph_copy, graph) - 24usize];
};
unsafe extern "C" {
    pub fn ggml_backend_graph_copy(
        backend: ggml_backend_t,
        graph: *mut ggml_cgraph,
    ) -> ggml_backend_graph_copy;
}
unsafe extern "C" {
    pub fn ggml_backend_graph_copy_free(copy: ggml_backend_graph_copy);
}
pub type ggml_backend_eval_callback = ::std::option::Option<
    unsafe extern "C" fn(
        node_index: ::std::os::raw::c_int,
        t1: *mut ggml_tensor,
        t2: *mut ggml_tensor,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool,
>;
unsafe extern "C" {
    pub fn ggml_backend_compare_graph_backend(
        backend1: ggml_backend_t,
        backend2: ggml_backend_t,
        graph: *mut ggml_cgraph,
        callback: ggml_backend_eval_callback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ggml_backend_tensor_alloc(
        buffer: ggml_backend_buffer_t,
        tensor: *mut ggml_tensor,
        addr: *mut ::std::os::raw::c_void,
    ) -> ggml_status;
}
unsafe extern "C" {
    pub fn ggml_backend_view_init(tensor: *mut ggml_tensor) -> ggml_status;
}
unsafe extern "C" {
    pub fn ggml_backend_cpu_buffer_from_ptr(
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> ggml_backend_buffer_t;
}
unsafe extern "C" {
    pub fn ggml_backend_cpu_buffer_type() -> ggml_backend_buffer_type_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_cplan {
    pub work_size: usize,
    pub work_data: *mut u8,
    pub n_threads: ::std::os::raw::c_int,
    pub threadpool: *mut ggml_threadpool,
    pub abort_callback: ggml_abort_callback,
    pub abort_callback_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ggml_cplan"][::std::mem::size_of::<ggml_cplan>() - 48usize];
    ["Alignment of ggml_cplan"][::std::mem::align_of::<ggml_cplan>() - 8usize];
    ["Offset of field: ggml_cplan::work_size"]
        [::std::mem::offset_of!(ggml_cplan, work_size) - 0usize];
    ["Offset of field: ggml_cplan::work_data"]
        [::std::mem::offset_of!(ggml_cplan, work_data) - 8usize];
    ["Offset of field: ggml_cplan::n_threads"]
        [::std::mem::offset_of!(ggml_cplan, n_threads) - 16usize];
    ["Offset of field: ggml_cplan::threadpool"]
        [::std::mem::offset_of!(ggml_cplan, threadpool) - 24usize];
    ["Offset of field: ggml_cplan::abort_callback"]
        [::std::mem::offset_of!(ggml_cplan, abort_callback) - 32usize];
    ["Offset of field: ggml_cplan::abort_callback_data"]
        [::std::mem::offset_of!(ggml_cplan, abort_callback_data) - 40usize];
};
pub const ggml_numa_strategy_GGML_NUMA_STRATEGY_DISABLED: ggml_numa_strategy = 0;
pub const ggml_numa_strategy_GGML_NUMA_STRATEGY_DISTRIBUTE: ggml_numa_strategy = 1;
pub const ggml_numa_strategy_GGML_NUMA_STRATEGY_ISOLATE: ggml_numa_strategy = 2;
pub const ggml_numa_strategy_GGML_NUMA_STRATEGY_NUMACTL: ggml_numa_strategy = 3;
pub const ggml_numa_strategy_GGML_NUMA_STRATEGY_MIRROR: ggml_numa_strategy = 4;
pub const ggml_numa_strategy_GGML_NUMA_STRATEGY_COUNT: ggml_numa_strategy = 5;
pub type ggml_numa_strategy = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn ggml_numa_init(numa: ggml_numa_strategy);
}
unsafe extern "C" {
    pub fn ggml_is_numa() -> bool;
}
unsafe extern "C" {
    pub fn ggml_new_i32(ctx: *mut ggml_context, value: i32) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_new_f32(ctx: *mut ggml_context, value: f32) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_set_i32(tensor: *mut ggml_tensor, value: i32) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_set_f32(tensor: *mut ggml_tensor, value: f32) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_get_i32_1d(tensor: *const ggml_tensor, i: ::std::os::raw::c_int) -> i32;
}
unsafe extern "C" {
    pub fn ggml_set_i32_1d(tensor: *const ggml_tensor, i: ::std::os::raw::c_int, value: i32);
}
unsafe extern "C" {
    pub fn ggml_get_i32_nd(
        tensor: *const ggml_tensor,
        i0: ::std::os::raw::c_int,
        i1: ::std::os::raw::c_int,
        i2: ::std::os::raw::c_int,
        i3: ::std::os::raw::c_int,
    ) -> i32;
}
unsafe extern "C" {
    pub fn ggml_set_i32_nd(
        tensor: *const ggml_tensor,
        i0: ::std::os::raw::c_int,
        i1: ::std::os::raw::c_int,
        i2: ::std::os::raw::c_int,
        i3: ::std::os::raw::c_int,
        value: i32,
    );
}
unsafe extern "C" {
    pub fn ggml_get_f32_1d(tensor: *const ggml_tensor, i: ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn ggml_set_f32_1d(tensor: *const ggml_tensor, i: ::std::os::raw::c_int, value: f32);
}
unsafe extern "C" {
    pub fn ggml_get_f32_nd(
        tensor: *const ggml_tensor,
        i0: ::std::os::raw::c_int,
        i1: ::std::os::raw::c_int,
        i2: ::std::os::raw::c_int,
        i3: ::std::os::raw::c_int,
    ) -> f32;
}
unsafe extern "C" {
    pub fn ggml_set_f32_nd(
        tensor: *const ggml_tensor,
        i0: ::std::os::raw::c_int,
        i1: ::std::os::raw::c_int,
        i2: ::std::os::raw::c_int,
        i3: ::std::os::raw::c_int,
        value: f32,
    );
}
unsafe extern "C" {
    pub fn ggml_threadpool_new(params: *mut ggml_threadpool_params) -> *mut ggml_threadpool;
}
unsafe extern "C" {
    pub fn ggml_threadpool_free(threadpool: *mut ggml_threadpool);
}
unsafe extern "C" {
    pub fn ggml_threadpool_get_n_threads(threadpool: *mut ggml_threadpool)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ggml_threadpool_pause(threadpool: *mut ggml_threadpool);
}
unsafe extern "C" {
    pub fn ggml_threadpool_resume(threadpool: *mut ggml_threadpool);
}
unsafe extern "C" {
    pub fn ggml_graph_plan(
        cgraph: *const ggml_cgraph,
        n_threads: ::std::os::raw::c_int,
        threadpool: *mut ggml_threadpool,
    ) -> ggml_cplan;
}
unsafe extern "C" {
    pub fn ggml_graph_compute(cgraph: *mut ggml_cgraph, cplan: *mut ggml_cplan) -> ggml_status;
}
unsafe extern "C" {
    pub fn ggml_graph_compute_with_ctx(
        ctx: *mut ggml_context,
        cgraph: *mut ggml_cgraph,
        n_threads: ::std::os::raw::c_int,
    ) -> ggml_status;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_sse3() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_ssse3() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_avx() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_avx_vnni() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_avx2() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_bmi2() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_f16c() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_fma() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_avx512() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_avx512_vbmi() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_avx512_vnni() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_avx512_bf16() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_amx_int8() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_neon() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_arm_fma() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_fp16_va() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_dotprod() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_matmul_int8() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_sve() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_get_sve_cnt() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_sme() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_riscv_v() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_vsx() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_vxe() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_wasm_simd() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_llamafile() -> ::std::os::raw::c_int;
}
pub type ggml_vec_dot_t = ::std::option::Option<
    unsafe extern "C" fn(
        n: ::std::os::raw::c_int,
        s: *mut f32,
        bs: usize,
        x: *const ::std::os::raw::c_void,
        bx: usize,
        y: *const ::std::os::raw::c_void,
        by: usize,
        nrc: ::std::os::raw::c_int,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_type_traits_cpu {
    pub from_float: ggml_from_float_t,
    pub vec_dot: ggml_vec_dot_t,
    pub vec_dot_type: ggml_type,
    pub nrows: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ggml_type_traits_cpu"][::std::mem::size_of::<ggml_type_traits_cpu>() - 32usize];
    ["Alignment of ggml_type_traits_cpu"][::std::mem::align_of::<ggml_type_traits_cpu>() - 8usize];
    ["Offset of field: ggml_type_traits_cpu::from_float"]
        [::std::mem::offset_of!(ggml_type_traits_cpu, from_float) - 0usize];
    ["Offset of field: ggml_type_traits_cpu::vec_dot"]
        [::std::mem::offset_of!(ggml_type_traits_cpu, vec_dot) - 8usize];
    ["Offset of field: ggml_type_traits_cpu::vec_dot_type"]
        [::std::mem::offset_of!(ggml_type_traits_cpu, vec_dot_type) - 16usize];
    ["Offset of field: ggml_type_traits_cpu::nrows"]
        [::std::mem::offset_of!(ggml_type_traits_cpu, nrows) - 24usize];
};
unsafe extern "C" {
    pub fn ggml_get_type_traits_cpu(type_: ggml_type) -> *const ggml_type_traits_cpu;
}
unsafe extern "C" {
    pub fn ggml_cpu_init();
}
unsafe extern "C" {
    pub fn ggml_backend_cpu_init() -> ggml_backend_t;
}
unsafe extern "C" {
    pub fn ggml_backend_is_cpu(backend: ggml_backend_t) -> bool;
}
unsafe extern "C" {
    pub fn ggml_backend_cpu_set_n_threads(
        backend_cpu: ggml_backend_t,
        n_threads: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ggml_backend_cpu_set_threadpool(
        backend_cpu: ggml_backend_t,
        threadpool: ggml_threadpool_t,
    );
}
unsafe extern "C" {
    pub fn ggml_backend_cpu_set_abort_callback(
        backend_cpu: ggml_backend_t,
        abort_callback: ggml_abort_callback,
        abort_callback_data: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn ggml_backend_cpu_reg() -> ggml_backend_reg_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_vocab {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_model {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_context {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_kv_cache {
    _unused: [u8; 0],
}
pub type llama_pos = i32;
pub type llama_token = i32;
pub type llama_seq_id = i32;
pub const llama_vocab_type_LLAMA_VOCAB_TYPE_NONE: llama_vocab_type = 0;
pub const llama_vocab_type_LLAMA_VOCAB_TYPE_SPM: llama_vocab_type = 1;
pub const llama_vocab_type_LLAMA_VOCAB_TYPE_BPE: llama_vocab_type = 2;
pub const llama_vocab_type_LLAMA_VOCAB_TYPE_WPM: llama_vocab_type = 3;
pub const llama_vocab_type_LLAMA_VOCAB_TYPE_UGM: llama_vocab_type = 4;
pub const llama_vocab_type_LLAMA_VOCAB_TYPE_RWKV: llama_vocab_type = 5;
pub type llama_vocab_type = ::std::os::raw::c_uint;
pub const llama_vocab_pre_type_LLAMA_VOCAB_PRE_TYPE_DEFAULT: llama_vocab_pre_type = 0;
pub const llama_vocab_pre_type_LLAMA_VOCAB_PRE_TYPE_LLAMA3: llama_vocab_pre_type = 1;
pub const llama_vocab_pre_type_LLAMA_VOCAB_PRE_TYPE_DEEPSEEK_LLM: llama_vocab_pre_type = 2;
pub const llama_vocab_pre_type_LLAMA_VOCAB_PRE_TYPE_DEEPSEEK_CODER: llama_vocab_pre_type = 3;
pub const llama_vocab_pre_type_LLAMA_VOCAB_PRE_TYPE_FALCON: llama_vocab_pre_type = 4;
pub const llama_vocab_pre_type_LLAMA_VOCAB_PRE_TYPE_MPT: llama_vocab_pre_type = 5;
pub const llama_vocab_pre_type_LLAMA_VOCAB_PRE_TYPE_STARCODER: llama_vocab_pre_type = 6;
pub const llama_vocab_pre_type_LLAMA_VOCAB_PRE_TYPE_GPT2: llama_vocab_pre_type = 7;
pub const llama_vocab_pre_type_LLAMA_VOCAB_PRE_TYPE_REFACT: llama_vocab_pre_type = 8;
pub const llama_vocab_pre_type_LLAMA_VOCAB_PRE_TYPE_COMMAND_R: llama_vocab_pre_type = 9;
pub const llama_vocab_pre_type_LLAMA_VOCAB_PRE_TYPE_STABLELM2: llama_vocab_pre_type = 10;
pub const llama_vocab_pre_type_LLAMA_VOCAB_PRE_TYPE_QWEN2: llama_vocab_pre_type = 11;
pub const llama_vocab_pre_type_LLAMA_VOCAB_PRE_TYPE_OLMO: llama_vocab_pre_type = 12;
pub const llama_vocab_pre_type_LLAMA_VOCAB_PRE_TYPE_DBRX: llama_vocab_pre_type = 13;
pub const llama_vocab_pre_type_LLAMA_VOCAB_PRE_TYPE_SMAUG: llama_vocab_pre_type = 14;
pub const llama_vocab_pre_type_LLAMA_VOCAB_PRE_TYPE_PORO: llama_vocab_pre_type = 15;
pub const llama_vocab_pre_type_LLAMA_VOCAB_PRE_TYPE_CHATGLM3: llama_vocab_pre_type = 16;
pub const llama_vocab_pre_type_LLAMA_VOCAB_PRE_TYPE_CHATGLM4: llama_vocab_pre_type = 17;
pub const llama_vocab_pre_type_LLAMA_VOCAB_PRE_TYPE_VIKING: llama_vocab_pre_type = 18;
pub const llama_vocab_pre_type_LLAMA_VOCAB_PRE_TYPE_JAIS: llama_vocab_pre_type = 19;
pub const llama_vocab_pre_type_LLAMA_VOCAB_PRE_TYPE_TEKKEN: llama_vocab_pre_type = 20;
pub const llama_vocab_pre_type_LLAMA_VOCAB_PRE_TYPE_SMOLLM: llama_vocab_pre_type = 21;
pub const llama_vocab_pre_type_LLAMA_VOCAB_PRE_TYPE_CODESHELL: llama_vocab_pre_type = 22;
pub const llama_vocab_pre_type_LLAMA_VOCAB_PRE_TYPE_BLOOM: llama_vocab_pre_type = 23;
pub const llama_vocab_pre_type_LLAMA_VOCAB_PRE_TYPE_GPT3_FINNISH: llama_vocab_pre_type = 24;
pub const llama_vocab_pre_type_LLAMA_VOCAB_PRE_TYPE_EXAONE: llama_vocab_pre_type = 25;
pub const llama_vocab_pre_type_LLAMA_VOCAB_PRE_TYPE_CHAMELEON: llama_vocab_pre_type = 26;
pub const llama_vocab_pre_type_LLAMA_VOCAB_PRE_TYPE_MINERVA: llama_vocab_pre_type = 27;
pub const llama_vocab_pre_type_LLAMA_VOCAB_PRE_TYPE_DEEPSEEK3_LLM: llama_vocab_pre_type = 28;
pub const llama_vocab_pre_type_LLAMA_VOCAB_PRE_TYPE_GPT4O: llama_vocab_pre_type = 29;
pub const llama_vocab_pre_type_LLAMA_VOCAB_PRE_TYPE_SUPERBPE: llama_vocab_pre_type = 30;
pub const llama_vocab_pre_type_LLAMA_VOCAB_PRE_TYPE_TRILLION: llama_vocab_pre_type = 31;
pub const llama_vocab_pre_type_LLAMA_VOCAB_PRE_TYPE_BAILINGMOE: llama_vocab_pre_type = 32;
pub const llama_vocab_pre_type_LLAMA_VOCAB_PRE_TYPE_LLAMA4: llama_vocab_pre_type = 33;
pub const llama_vocab_pre_type_LLAMA_VOCAB_PRE_TYPE_PIXTRAL: llama_vocab_pre_type = 34;
pub type llama_vocab_pre_type = ::std::os::raw::c_uint;
pub const llama_rope_type_LLAMA_ROPE_TYPE_NONE: llama_rope_type = -1;
pub const llama_rope_type_LLAMA_ROPE_TYPE_NORM: llama_rope_type = 0;
pub const llama_rope_type_LLAMA_ROPE_TYPE_NEOX: llama_rope_type = 2;
pub const llama_rope_type_LLAMA_ROPE_TYPE_MROPE: llama_rope_type = 8;
pub const llama_rope_type_LLAMA_ROPE_TYPE_VISION: llama_rope_type = 24;
pub type llama_rope_type = ::std::os::raw::c_int;
pub const llama_token_type_LLAMA_TOKEN_TYPE_UNDEFINED: llama_token_type = 0;
pub const llama_token_type_LLAMA_TOKEN_TYPE_NORMAL: llama_token_type = 1;
pub const llama_token_type_LLAMA_TOKEN_TYPE_UNKNOWN: llama_token_type = 2;
pub const llama_token_type_LLAMA_TOKEN_TYPE_CONTROL: llama_token_type = 3;
pub const llama_token_type_LLAMA_TOKEN_TYPE_USER_DEFINED: llama_token_type = 4;
pub const llama_token_type_LLAMA_TOKEN_TYPE_UNUSED: llama_token_type = 5;
pub const llama_token_type_LLAMA_TOKEN_TYPE_BYTE: llama_token_type = 6;
pub type llama_token_type = ::std::os::raw::c_uint;
pub const llama_token_attr_LLAMA_TOKEN_ATTR_UNDEFINED: llama_token_attr = 0;
pub const llama_token_attr_LLAMA_TOKEN_ATTR_UNKNOWN: llama_token_attr = 1;
pub const llama_token_attr_LLAMA_TOKEN_ATTR_UNUSED: llama_token_attr = 2;
pub const llama_token_attr_LLAMA_TOKEN_ATTR_NORMAL: llama_token_attr = 4;
pub const llama_token_attr_LLAMA_TOKEN_ATTR_CONTROL: llama_token_attr = 8;
pub const llama_token_attr_LLAMA_TOKEN_ATTR_USER_DEFINED: llama_token_attr = 16;
pub const llama_token_attr_LLAMA_TOKEN_ATTR_BYTE: llama_token_attr = 32;
pub const llama_token_attr_LLAMA_TOKEN_ATTR_NORMALIZED: llama_token_attr = 64;
pub const llama_token_attr_LLAMA_TOKEN_ATTR_LSTRIP: llama_token_attr = 128;
pub const llama_token_attr_LLAMA_TOKEN_ATTR_RSTRIP: llama_token_attr = 256;
pub const llama_token_attr_LLAMA_TOKEN_ATTR_SINGLE_WORD: llama_token_attr = 512;
pub type llama_token_attr = ::std::os::raw::c_uint;
pub const llama_ftype_LLAMA_FTYPE_ALL_F32: llama_ftype = 0;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_F16: llama_ftype = 1;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_Q4_0: llama_ftype = 2;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_Q4_1: llama_ftype = 3;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_Q8_0: llama_ftype = 7;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_Q5_0: llama_ftype = 8;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_Q5_1: llama_ftype = 9;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_Q2_K: llama_ftype = 10;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_Q3_K_S: llama_ftype = 11;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_Q3_K_M: llama_ftype = 12;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_Q3_K_L: llama_ftype = 13;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_Q4_K_S: llama_ftype = 14;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_Q4_K_M: llama_ftype = 15;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_Q5_K_S: llama_ftype = 16;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_Q5_K_M: llama_ftype = 17;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_Q6_K: llama_ftype = 18;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_IQ2_XXS: llama_ftype = 19;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_IQ2_XS: llama_ftype = 20;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_Q2_K_S: llama_ftype = 21;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_IQ3_XS: llama_ftype = 22;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_IQ3_XXS: llama_ftype = 23;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_IQ1_S: llama_ftype = 24;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_IQ4_NL: llama_ftype = 25;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_IQ3_S: llama_ftype = 26;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_IQ3_M: llama_ftype = 27;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_IQ2_S: llama_ftype = 28;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_IQ2_M: llama_ftype = 29;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_IQ4_XS: llama_ftype = 30;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_IQ1_M: llama_ftype = 31;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_BF16: llama_ftype = 32;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_TQ1_0: llama_ftype = 36;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_TQ2_0: llama_ftype = 37;
pub const llama_ftype_LLAMA_FTYPE_GUESSED: llama_ftype = 1024;
pub type llama_ftype = ::std::os::raw::c_uint;
pub const llama_rope_scaling_type_LLAMA_ROPE_SCALING_TYPE_UNSPECIFIED: llama_rope_scaling_type = -1;
pub const llama_rope_scaling_type_LLAMA_ROPE_SCALING_TYPE_NONE: llama_rope_scaling_type = 0;
pub const llama_rope_scaling_type_LLAMA_ROPE_SCALING_TYPE_LINEAR: llama_rope_scaling_type = 1;
pub const llama_rope_scaling_type_LLAMA_ROPE_SCALING_TYPE_YARN: llama_rope_scaling_type = 2;
pub const llama_rope_scaling_type_LLAMA_ROPE_SCALING_TYPE_LONGROPE: llama_rope_scaling_type = 3;
pub const llama_rope_scaling_type_LLAMA_ROPE_SCALING_TYPE_MAX_VALUE: llama_rope_scaling_type = 3;
pub type llama_rope_scaling_type = ::std::os::raw::c_int;
pub const llama_pooling_type_LLAMA_POOLING_TYPE_UNSPECIFIED: llama_pooling_type = -1;
pub const llama_pooling_type_LLAMA_POOLING_TYPE_NONE: llama_pooling_type = 0;
pub const llama_pooling_type_LLAMA_POOLING_TYPE_MEAN: llama_pooling_type = 1;
pub const llama_pooling_type_LLAMA_POOLING_TYPE_CLS: llama_pooling_type = 2;
pub const llama_pooling_type_LLAMA_POOLING_TYPE_LAST: llama_pooling_type = 3;
pub const llama_pooling_type_LLAMA_POOLING_TYPE_RANK: llama_pooling_type = 4;
pub type llama_pooling_type = ::std::os::raw::c_int;
pub const llama_attention_type_LLAMA_ATTENTION_TYPE_UNSPECIFIED: llama_attention_type = -1;
pub const llama_attention_type_LLAMA_ATTENTION_TYPE_CAUSAL: llama_attention_type = 0;
pub const llama_attention_type_LLAMA_ATTENTION_TYPE_NON_CAUSAL: llama_attention_type = 1;
pub type llama_attention_type = ::std::os::raw::c_int;
pub const llama_split_mode_LLAMA_SPLIT_MODE_NONE: llama_split_mode = 0;
pub const llama_split_mode_LLAMA_SPLIT_MODE_LAYER: llama_split_mode = 1;
pub const llama_split_mode_LLAMA_SPLIT_MODE_ROW: llama_split_mode = 2;
pub type llama_split_mode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_token_data {
    pub id: llama_token,
    pub logit: f32,
    pub p: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_token_data"][::std::mem::size_of::<llama_token_data>() - 12usize];
    ["Alignment of llama_token_data"][::std::mem::align_of::<llama_token_data>() - 4usize];
    ["Offset of field: llama_token_data::id"]
        [::std::mem::offset_of!(llama_token_data, id) - 0usize];
    ["Offset of field: llama_token_data::logit"]
        [::std::mem::offset_of!(llama_token_data, logit) - 4usize];
    ["Offset of field: llama_token_data::p"][::std::mem::offset_of!(llama_token_data, p) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_token_data_array {
    pub data: *mut llama_token_data,
    pub size: usize,
    pub selected: i64,
    pub sorted: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_token_data_array"][::std::mem::size_of::<llama_token_data_array>() - 32usize];
    ["Alignment of llama_token_data_array"]
        [::std::mem::align_of::<llama_token_data_array>() - 8usize];
    ["Offset of field: llama_token_data_array::data"]
        [::std::mem::offset_of!(llama_token_data_array, data) - 0usize];
    ["Offset of field: llama_token_data_array::size"]
        [::std::mem::offset_of!(llama_token_data_array, size) - 8usize];
    ["Offset of field: llama_token_data_array::selected"]
        [::std::mem::offset_of!(llama_token_data_array, selected) - 16usize];
    ["Offset of field: llama_token_data_array::sorted"]
        [::std::mem::offset_of!(llama_token_data_array, sorted) - 24usize];
};
pub type llama_progress_callback = ::std::option::Option<
    unsafe extern "C" fn(progress: f32, user_data: *mut ::std::os::raw::c_void) -> bool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_batch {
    pub n_tokens: i32,
    pub token: *mut llama_token,
    pub embd: *mut f32,
    pub pos: *mut llama_pos,
    pub n_seq_id: *mut i32,
    pub seq_id: *mut *mut llama_seq_id,
    pub logits: *mut i8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_batch"][::std::mem::size_of::<llama_batch>() - 56usize];
    ["Alignment of llama_batch"][::std::mem::align_of::<llama_batch>() - 8usize];
    ["Offset of field: llama_batch::n_tokens"]
        [::std::mem::offset_of!(llama_batch, n_tokens) - 0usize];
    ["Offset of field: llama_batch::token"][::std::mem::offset_of!(llama_batch, token) - 8usize];
    ["Offset of field: llama_batch::embd"][::std::mem::offset_of!(llama_batch, embd) - 16usize];
    ["Offset of field: llama_batch::pos"][::std::mem::offset_of!(llama_batch, pos) - 24usize];
    ["Offset of field: llama_batch::n_seq_id"]
        [::std::mem::offset_of!(llama_batch, n_seq_id) - 32usize];
    ["Offset of field: llama_batch::seq_id"][::std::mem::offset_of!(llama_batch, seq_id) - 40usize];
    ["Offset of field: llama_batch::logits"][::std::mem::offset_of!(llama_batch, logits) - 48usize];
};
pub const llama_model_kv_override_type_LLAMA_KV_OVERRIDE_TYPE_INT: llama_model_kv_override_type = 0;
pub const llama_model_kv_override_type_LLAMA_KV_OVERRIDE_TYPE_FLOAT: llama_model_kv_override_type =
    1;
pub const llama_model_kv_override_type_LLAMA_KV_OVERRIDE_TYPE_BOOL: llama_model_kv_override_type =
    2;
pub const llama_model_kv_override_type_LLAMA_KV_OVERRIDE_TYPE_STR: llama_model_kv_override_type = 3;
pub type llama_model_kv_override_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct llama_model_kv_override {
    pub tag: llama_model_kv_override_type,
    pub key: [::std::os::raw::c_char; 128usize],
    pub __bindgen_anon_1: llama_model_kv_override__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union llama_model_kv_override__bindgen_ty_1 {
    pub val_i64: i64,
    pub val_f64: f64,
    pub val_bool: bool,
    pub val_str: [::std::os::raw::c_char; 128usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_model_kv_override__bindgen_ty_1"]
        [::std::mem::size_of::<llama_model_kv_override__bindgen_ty_1>() - 128usize];
    ["Alignment of llama_model_kv_override__bindgen_ty_1"]
        [::std::mem::align_of::<llama_model_kv_override__bindgen_ty_1>() - 8usize];
    ["Offset of field: llama_model_kv_override__bindgen_ty_1::val_i64"]
        [::std::mem::offset_of!(llama_model_kv_override__bindgen_ty_1, val_i64) - 0usize];
    ["Offset of field: llama_model_kv_override__bindgen_ty_1::val_f64"]
        [::std::mem::offset_of!(llama_model_kv_override__bindgen_ty_1, val_f64) - 0usize];
    ["Offset of field: llama_model_kv_override__bindgen_ty_1::val_bool"]
        [::std::mem::offset_of!(llama_model_kv_override__bindgen_ty_1, val_bool) - 0usize];
    ["Offset of field: llama_model_kv_override__bindgen_ty_1::val_str"]
        [::std::mem::offset_of!(llama_model_kv_override__bindgen_ty_1, val_str) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_model_kv_override"]
        [::std::mem::size_of::<llama_model_kv_override>() - 264usize];
    ["Alignment of llama_model_kv_override"]
        [::std::mem::align_of::<llama_model_kv_override>() - 8usize];
    ["Offset of field: llama_model_kv_override::tag"]
        [::std::mem::offset_of!(llama_model_kv_override, tag) - 0usize];
    ["Offset of field: llama_model_kv_override::key"]
        [::std::mem::offset_of!(llama_model_kv_override, key) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_model_tensor_buft_override {
    pub pattern: *const ::std::os::raw::c_char,
    pub buft: ggml_backend_buffer_type_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_model_tensor_buft_override"]
        [::std::mem::size_of::<llama_model_tensor_buft_override>() - 16usize];
    ["Alignment of llama_model_tensor_buft_override"]
        [::std::mem::align_of::<llama_model_tensor_buft_override>() - 8usize];
    ["Offset of field: llama_model_tensor_buft_override::pattern"]
        [::std::mem::offset_of!(llama_model_tensor_buft_override, pattern) - 0usize];
    ["Offset of field: llama_model_tensor_buft_override::buft"]
        [::std::mem::offset_of!(llama_model_tensor_buft_override, buft) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_model_params {
    pub devices: *mut ggml_backend_dev_t,
    pub tensor_buft_overrides: *const llama_model_tensor_buft_override,
    pub n_gpu_layers: i32,
    pub split_mode: llama_split_mode,
    pub main_gpu: i32,
    pub tensor_split: *const f32,
    pub progress_callback: llama_progress_callback,
    pub progress_callback_user_data: *mut ::std::os::raw::c_void,
    pub kv_overrides: *const llama_model_kv_override,
    pub vocab_only: bool,
    pub use_mmap: bool,
    pub use_mlock: bool,
    pub check_tensors: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_model_params"][::std::mem::size_of::<llama_model_params>() - 72usize];
    ["Alignment of llama_model_params"][::std::mem::align_of::<llama_model_params>() - 8usize];
    ["Offset of field: llama_model_params::devices"]
        [::std::mem::offset_of!(llama_model_params, devices) - 0usize];
    ["Offset of field: llama_model_params::tensor_buft_overrides"]
        [::std::mem::offset_of!(llama_model_params, tensor_buft_overrides) - 8usize];
    ["Offset of field: llama_model_params::n_gpu_layers"]
        [::std::mem::offset_of!(llama_model_params, n_gpu_layers) - 16usize];
    ["Offset of field: llama_model_params::split_mode"]
        [::std::mem::offset_of!(llama_model_params, split_mode) - 20usize];
    ["Offset of field: llama_model_params::main_gpu"]
        [::std::mem::offset_of!(llama_model_params, main_gpu) - 24usize];
    ["Offset of field: llama_model_params::tensor_split"]
        [::std::mem::offset_of!(llama_model_params, tensor_split) - 32usize];
    ["Offset of field: llama_model_params::progress_callback"]
        [::std::mem::offset_of!(llama_model_params, progress_callback) - 40usize];
    ["Offset of field: llama_model_params::progress_callback_user_data"]
        [::std::mem::offset_of!(llama_model_params, progress_callback_user_data) - 48usize];
    ["Offset of field: llama_model_params::kv_overrides"]
        [::std::mem::offset_of!(llama_model_params, kv_overrides) - 56usize];
    ["Offset of field: llama_model_params::vocab_only"]
        [::std::mem::offset_of!(llama_model_params, vocab_only) - 64usize];
    ["Offset of field: llama_model_params::use_mmap"]
        [::std::mem::offset_of!(llama_model_params, use_mmap) - 65usize];
    ["Offset of field: llama_model_params::use_mlock"]
        [::std::mem::offset_of!(llama_model_params, use_mlock) - 66usize];
    ["Offset of field: llama_model_params::check_tensors"]
        [::std::mem::offset_of!(llama_model_params, check_tensors) - 67usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_context_params {
    pub n_ctx: u32,
    pub n_batch: u32,
    pub n_ubatch: u32,
    pub n_seq_max: u32,
    pub n_threads: i32,
    pub n_threads_batch: i32,
    pub rope_scaling_type: llama_rope_scaling_type,
    pub pooling_type: llama_pooling_type,
    pub attention_type: llama_attention_type,
    pub rope_freq_base: f32,
    pub rope_freq_scale: f32,
    pub yarn_ext_factor: f32,
    pub yarn_attn_factor: f32,
    pub yarn_beta_fast: f32,
    pub yarn_beta_slow: f32,
    pub yarn_orig_ctx: u32,
    pub defrag_thold: f32,
    pub cb_eval: ggml_backend_sched_eval_callback,
    pub cb_eval_user_data: *mut ::std::os::raw::c_void,
    pub type_k: ggml_type,
    pub type_v: ggml_type,
    pub logits_all: bool,
    pub embeddings: bool,
    pub offload_kqv: bool,
    pub flash_attn: bool,
    pub no_perf: bool,
    pub abort_callback: ggml_abort_callback,
    pub abort_callback_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_context_params"][::std::mem::size_of::<llama_context_params>() - 120usize];
    ["Alignment of llama_context_params"][::std::mem::align_of::<llama_context_params>() - 8usize];
    ["Offset of field: llama_context_params::n_ctx"]
        [::std::mem::offset_of!(llama_context_params, n_ctx) - 0usize];
    ["Offset of field: llama_context_params::n_batch"]
        [::std::mem::offset_of!(llama_context_params, n_batch) - 4usize];
    ["Offset of field: llama_context_params::n_ubatch"]
        [::std::mem::offset_of!(llama_context_params, n_ubatch) - 8usize];
    ["Offset of field: llama_context_params::n_seq_max"]
        [::std::mem::offset_of!(llama_context_params, n_seq_max) - 12usize];
    ["Offset of field: llama_context_params::n_threads"]
        [::std::mem::offset_of!(llama_context_params, n_threads) - 16usize];
    ["Offset of field: llama_context_params::n_threads_batch"]
        [::std::mem::offset_of!(llama_context_params, n_threads_batch) - 20usize];
    ["Offset of field: llama_context_params::rope_scaling_type"]
        [::std::mem::offset_of!(llama_context_params, rope_scaling_type) - 24usize];
    ["Offset of field: llama_context_params::pooling_type"]
        [::std::mem::offset_of!(llama_context_params, pooling_type) - 28usize];
    ["Offset of field: llama_context_params::attention_type"]
        [::std::mem::offset_of!(llama_context_params, attention_type) - 32usize];
    ["Offset of field: llama_context_params::rope_freq_base"]
        [::std::mem::offset_of!(llama_context_params, rope_freq_base) - 36usize];
    ["Offset of field: llama_context_params::rope_freq_scale"]
        [::std::mem::offset_of!(llama_context_params, rope_freq_scale) - 40usize];
    ["Offset of field: llama_context_params::yarn_ext_factor"]
        [::std::mem::offset_of!(llama_context_params, yarn_ext_factor) - 44usize];
    ["Offset of field: llama_context_params::yarn_attn_factor"]
        [::std::mem::offset_of!(llama_context_params, yarn_attn_factor) - 48usize];
    ["Offset of field: llama_context_params::yarn_beta_fast"]
        [::std::mem::offset_of!(llama_context_params, yarn_beta_fast) - 52usize];
    ["Offset of field: llama_context_params::yarn_beta_slow"]
        [::std::mem::offset_of!(llama_context_params, yarn_beta_slow) - 56usize];
    ["Offset of field: llama_context_params::yarn_orig_ctx"]
        [::std::mem::offset_of!(llama_context_params, yarn_orig_ctx) - 60usize];
    ["Offset of field: llama_context_params::defrag_thold"]
        [::std::mem::offset_of!(llama_context_params, defrag_thold) - 64usize];
    ["Offset of field: llama_context_params::cb_eval"]
        [::std::mem::offset_of!(llama_context_params, cb_eval) - 72usize];
    ["Offset of field: llama_context_params::cb_eval_user_data"]
        [::std::mem::offset_of!(llama_context_params, cb_eval_user_data) - 80usize];
    ["Offset of field: llama_context_params::type_k"]
        [::std::mem::offset_of!(llama_context_params, type_k) - 88usize];
    ["Offset of field: llama_context_params::type_v"]
        [::std::mem::offset_of!(llama_context_params, type_v) - 92usize];
    ["Offset of field: llama_context_params::logits_all"]
        [::std::mem::offset_of!(llama_context_params, logits_all) - 96usize];
    ["Offset of field: llama_context_params::embeddings"]
        [::std::mem::offset_of!(llama_context_params, embeddings) - 97usize];
    ["Offset of field: llama_context_params::offload_kqv"]
        [::std::mem::offset_of!(llama_context_params, offload_kqv) - 98usize];
    ["Offset of field: llama_context_params::flash_attn"]
        [::std::mem::offset_of!(llama_context_params, flash_attn) - 99usize];
    ["Offset of field: llama_context_params::no_perf"]
        [::std::mem::offset_of!(llama_context_params, no_perf) - 100usize];
    ["Offset of field: llama_context_params::abort_callback"]
        [::std::mem::offset_of!(llama_context_params, abort_callback) - 104usize];
    ["Offset of field: llama_context_params::abort_callback_data"]
        [::std::mem::offset_of!(llama_context_params, abort_callback_data) - 112usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_model_quantize_params {
    pub nthread: i32,
    pub ftype: llama_ftype,
    pub output_tensor_type: ggml_type,
    pub token_embedding_type: ggml_type,
    pub allow_requantize: bool,
    pub quantize_output_tensor: bool,
    pub only_copy: bool,
    pub pure_: bool,
    pub keep_split: bool,
    pub imatrix: *mut ::std::os::raw::c_void,
    pub kv_overrides: *mut ::std::os::raw::c_void,
    pub tensor_types: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_model_quantize_params"]
        [::std::mem::size_of::<llama_model_quantize_params>() - 48usize];
    ["Alignment of llama_model_quantize_params"]
        [::std::mem::align_of::<llama_model_quantize_params>() - 8usize];
    ["Offset of field: llama_model_quantize_params::nthread"]
        [::std::mem::offset_of!(llama_model_quantize_params, nthread) - 0usize];
    ["Offset of field: llama_model_quantize_params::ftype"]
        [::std::mem::offset_of!(llama_model_quantize_params, ftype) - 4usize];
    ["Offset of field: llama_model_quantize_params::output_tensor_type"]
        [::std::mem::offset_of!(llama_model_quantize_params, output_tensor_type) - 8usize];
    ["Offset of field: llama_model_quantize_params::token_embedding_type"]
        [::std::mem::offset_of!(llama_model_quantize_params, token_embedding_type) - 12usize];
    ["Offset of field: llama_model_quantize_params::allow_requantize"]
        [::std::mem::offset_of!(llama_model_quantize_params, allow_requantize) - 16usize];
    ["Offset of field: llama_model_quantize_params::quantize_output_tensor"]
        [::std::mem::offset_of!(llama_model_quantize_params, quantize_output_tensor) - 17usize];
    ["Offset of field: llama_model_quantize_params::only_copy"]
        [::std::mem::offset_of!(llama_model_quantize_params, only_copy) - 18usize];
    ["Offset of field: llama_model_quantize_params::pure_"]
        [::std::mem::offset_of!(llama_model_quantize_params, pure_) - 19usize];
    ["Offset of field: llama_model_quantize_params::keep_split"]
        [::std::mem::offset_of!(llama_model_quantize_params, keep_split) - 20usize];
    ["Offset of field: llama_model_quantize_params::imatrix"]
        [::std::mem::offset_of!(llama_model_quantize_params, imatrix) - 24usize];
    ["Offset of field: llama_model_quantize_params::kv_overrides"]
        [::std::mem::offset_of!(llama_model_quantize_params, kv_overrides) - 32usize];
    ["Offset of field: llama_model_quantize_params::tensor_types"]
        [::std::mem::offset_of!(llama_model_quantize_params, tensor_types) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_logit_bias {
    pub token: llama_token,
    pub bias: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_logit_bias"][::std::mem::size_of::<llama_logit_bias>() - 8usize];
    ["Alignment of llama_logit_bias"][::std::mem::align_of::<llama_logit_bias>() - 4usize];
    ["Offset of field: llama_logit_bias::token"]
        [::std::mem::offset_of!(llama_logit_bias, token) - 0usize];
    ["Offset of field: llama_logit_bias::bias"]
        [::std::mem::offset_of!(llama_logit_bias, bias) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_sampler_chain_params {
    pub no_perf: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_sampler_chain_params"]
        [::std::mem::size_of::<llama_sampler_chain_params>() - 1usize];
    ["Alignment of llama_sampler_chain_params"]
        [::std::mem::align_of::<llama_sampler_chain_params>() - 1usize];
    ["Offset of field: llama_sampler_chain_params::no_perf"]
        [::std::mem::offset_of!(llama_sampler_chain_params, no_perf) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_chat_message {
    pub role: *const ::std::os::raw::c_char,
    pub content: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_chat_message"][::std::mem::size_of::<llama_chat_message>() - 16usize];
    ["Alignment of llama_chat_message"][::std::mem::align_of::<llama_chat_message>() - 8usize];
    ["Offset of field: llama_chat_message::role"]
        [::std::mem::offset_of!(llama_chat_message, role) - 0usize];
    ["Offset of field: llama_chat_message::content"]
        [::std::mem::offset_of!(llama_chat_message, content) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_adapter_lora {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub fn llama_model_default_params() -> llama_model_params;
}
unsafe extern "C" {
    pub fn llama_context_default_params() -> llama_context_params;
}
unsafe extern "C" {
    pub fn llama_sampler_chain_default_params() -> llama_sampler_chain_params;
}
unsafe extern "C" {
    pub fn llama_model_quantize_default_params() -> llama_model_quantize_params;
}
unsafe extern "C" {
    pub fn llama_backend_init();
}
unsafe extern "C" {
    pub fn llama_backend_free();
}
unsafe extern "C" {
    pub fn llama_numa_init(numa: ggml_numa_strategy);
}
unsafe extern "C" {
    pub fn llama_attach_threadpool(
        ctx: *mut llama_context,
        threadpool: ggml_threadpool_t,
        threadpool_batch: ggml_threadpool_t,
    );
}
unsafe extern "C" {
    pub fn llama_detach_threadpool(ctx: *mut llama_context);
}
unsafe extern "C" {
    pub fn llama_load_model_from_file(
        path_model: *const ::std::os::raw::c_char,
        params: llama_model_params,
    ) -> *mut llama_model;
}
unsafe extern "C" {
    pub fn llama_model_load_from_file(
        path_model: *const ::std::os::raw::c_char,
        params: llama_model_params,
    ) -> *mut llama_model;
}
unsafe extern "C" {
    pub fn llama_model_load_from_splits(
        paths: *mut *const ::std::os::raw::c_char,
        n_paths: usize,
        params: llama_model_params,
    ) -> *mut llama_model;
}
unsafe extern "C" {
    pub fn llama_free_model(model: *mut llama_model);
}
unsafe extern "C" {
    pub fn llama_model_free(model: *mut llama_model);
}
unsafe extern "C" {
    pub fn llama_init_from_model(
        model: *mut llama_model,
        params: llama_context_params,
    ) -> *mut llama_context;
}
unsafe extern "C" {
    pub fn llama_new_context_with_model(
        model: *mut llama_model,
        params: llama_context_params,
    ) -> *mut llama_context;
}
unsafe extern "C" {
    pub fn llama_free(ctx: *mut llama_context);
}
unsafe extern "C" {
    pub fn llama_time_us() -> i64;
}
unsafe extern "C" {
    pub fn llama_max_devices() -> usize;
}
unsafe extern "C" {
    pub fn llama_supports_mmap() -> bool;
}
unsafe extern "C" {
    pub fn llama_supports_mlock() -> bool;
}
unsafe extern "C" {
    pub fn llama_supports_gpu_offload() -> bool;
}
unsafe extern "C" {
    pub fn llama_supports_rpc() -> bool;
}
unsafe extern "C" {
    pub fn llama_n_ctx(ctx: *const llama_context) -> u32;
}
unsafe extern "C" {
    pub fn llama_n_batch(ctx: *const llama_context) -> u32;
}
unsafe extern "C" {
    pub fn llama_n_ubatch(ctx: *const llama_context) -> u32;
}
unsafe extern "C" {
    pub fn llama_n_seq_max(ctx: *const llama_context) -> u32;
}
unsafe extern "C" {
    pub fn llama_n_ctx_train(model: *const llama_model) -> i32;
}
unsafe extern "C" {
    pub fn llama_n_embd(model: *const llama_model) -> i32;
}
unsafe extern "C" {
    pub fn llama_n_layer(model: *const llama_model) -> i32;
}
unsafe extern "C" {
    pub fn llama_n_head(model: *const llama_model) -> i32;
}
unsafe extern "C" {
    pub fn llama_n_vocab(vocab: *const llama_vocab) -> i32;
}
unsafe extern "C" {
    pub fn llama_get_model(ctx: *const llama_context) -> *const llama_model;
}
unsafe extern "C" {
    pub fn llama_get_kv_self(ctx: *mut llama_context) -> *mut llama_kv_cache;
}
unsafe extern "C" {
    pub fn llama_pooling_type(ctx: *const llama_context) -> llama_pooling_type;
}
unsafe extern "C" {
    pub fn llama_model_get_vocab(model: *const llama_model) -> *const llama_vocab;
}
unsafe extern "C" {
    pub fn llama_model_rope_type(model: *const llama_model) -> llama_rope_type;
}
unsafe extern "C" {
    pub fn llama_model_n_ctx_train(model: *const llama_model) -> i32;
}
unsafe extern "C" {
    pub fn llama_model_n_embd(model: *const llama_model) -> i32;
}
unsafe extern "C" {
    pub fn llama_model_n_layer(model: *const llama_model) -> i32;
}
unsafe extern "C" {
    pub fn llama_model_n_head(model: *const llama_model) -> i32;
}
unsafe extern "C" {
    pub fn llama_model_n_head_kv(model: *const llama_model) -> i32;
}
unsafe extern "C" {
    pub fn llama_model_rope_freq_scale_train(model: *const llama_model) -> f32;
}
unsafe extern "C" {
    pub fn llama_vocab_type(vocab: *const llama_vocab) -> llama_vocab_type;
}
unsafe extern "C" {
    pub fn llama_vocab_n_tokens(vocab: *const llama_vocab) -> i32;
}
unsafe extern "C" {
    pub fn llama_model_meta_val_str(
        model: *const llama_model,
        key: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
    ) -> i32;
}
unsafe extern "C" {
    pub fn llama_model_meta_count(model: *const llama_model) -> i32;
}
unsafe extern "C" {
    pub fn llama_model_meta_key_by_index(
        model: *const llama_model,
        i: i32,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
    ) -> i32;
}
unsafe extern "C" {
    pub fn llama_model_meta_val_str_by_index(
        model: *const llama_model,
        i: i32,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
    ) -> i32;
}
unsafe extern "C" {
    pub fn llama_model_desc(
        model: *const llama_model,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
    ) -> i32;
}
unsafe extern "C" {
    pub fn llama_model_size(model: *const llama_model) -> u64;
}
unsafe extern "C" {
    pub fn llama_model_chat_template(
        model: *const llama_model,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn llama_model_n_params(model: *const llama_model) -> u64;
}
unsafe extern "C" {
    pub fn llama_model_has_encoder(model: *const llama_model) -> bool;
}
unsafe extern "C" {
    pub fn llama_model_has_decoder(model: *const llama_model) -> bool;
}
unsafe extern "C" {
    pub fn llama_model_decoder_start_token(model: *const llama_model) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_model_is_recurrent(model: *const llama_model) -> bool;
}
unsafe extern "C" {
    pub fn llama_model_quantize(
        fname_inp: *const ::std::os::raw::c_char,
        fname_out: *const ::std::os::raw::c_char,
        params: *const llama_model_quantize_params,
    ) -> u32;
}
unsafe extern "C" {
    pub fn llama_adapter_lora_init(
        model: *mut llama_model,
        path_lora: *const ::std::os::raw::c_char,
    ) -> *mut llama_adapter_lora;
}
unsafe extern "C" {
    pub fn llama_adapter_lora_free(adapter: *mut llama_adapter_lora);
}
unsafe extern "C" {
    pub fn llama_set_adapter_lora(
        ctx: *mut llama_context,
        adapter: *mut llama_adapter_lora,
        scale: f32,
    ) -> i32;
}
unsafe extern "C" {
    pub fn llama_rm_adapter_lora(ctx: *mut llama_context, adapter: *mut llama_adapter_lora) -> i32;
}
unsafe extern "C" {
    pub fn llama_clear_adapter_lora(ctx: *mut llama_context);
}
unsafe extern "C" {
    pub fn llama_apply_adapter_cvec(
        ctx: *mut llama_context,
        data: *const f32,
        len: usize,
        n_embd: i32,
        il_start: i32,
        il_end: i32,
    ) -> i32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_kv_cache_view_cell {
    pub pos: llama_pos,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_kv_cache_view_cell"]
        [::std::mem::size_of::<llama_kv_cache_view_cell>() - 4usize];
    ["Alignment of llama_kv_cache_view_cell"]
        [::std::mem::align_of::<llama_kv_cache_view_cell>() - 4usize];
    ["Offset of field: llama_kv_cache_view_cell::pos"]
        [::std::mem::offset_of!(llama_kv_cache_view_cell, pos) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_kv_cache_view {
    pub n_cells: i32,
    pub n_seq_max: i32,
    pub token_count: i32,
    pub used_cells: i32,
    pub max_contiguous: i32,
    pub max_contiguous_idx: i32,
    pub cells: *mut llama_kv_cache_view_cell,
    pub cells_sequences: *mut llama_seq_id,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_kv_cache_view"][::std::mem::size_of::<llama_kv_cache_view>() - 40usize];
    ["Alignment of llama_kv_cache_view"][::std::mem::align_of::<llama_kv_cache_view>() - 8usize];
    ["Offset of field: llama_kv_cache_view::n_cells"]
        [::std::mem::offset_of!(llama_kv_cache_view, n_cells) - 0usize];
    ["Offset of field: llama_kv_cache_view::n_seq_max"]
        [::std::mem::offset_of!(llama_kv_cache_view, n_seq_max) - 4usize];
    ["Offset of field: llama_kv_cache_view::token_count"]
        [::std::mem::offset_of!(llama_kv_cache_view, token_count) - 8usize];
    ["Offset of field: llama_kv_cache_view::used_cells"]
        [::std::mem::offset_of!(llama_kv_cache_view, used_cells) - 12usize];
    ["Offset of field: llama_kv_cache_view::max_contiguous"]
        [::std::mem::offset_of!(llama_kv_cache_view, max_contiguous) - 16usize];
    ["Offset of field: llama_kv_cache_view::max_contiguous_idx"]
        [::std::mem::offset_of!(llama_kv_cache_view, max_contiguous_idx) - 20usize];
    ["Offset of field: llama_kv_cache_view::cells"]
        [::std::mem::offset_of!(llama_kv_cache_view, cells) - 24usize];
    ["Offset of field: llama_kv_cache_view::cells_sequences"]
        [::std::mem::offset_of!(llama_kv_cache_view, cells_sequences) - 32usize];
};
unsafe extern "C" {
    pub fn llama_kv_cache_view_init(
        ctx: *const llama_context,
        n_seq_max: i32,
    ) -> llama_kv_cache_view;
}
unsafe extern "C" {
    pub fn llama_kv_cache_view_free(view: *mut llama_kv_cache_view);
}
unsafe extern "C" {
    pub fn llama_kv_cache_view_update(ctx: *const llama_context, view: *mut llama_kv_cache_view);
}
unsafe extern "C" {
    pub fn llama_kv_self_n_tokens(ctx: *const llama_context) -> i32;
}
unsafe extern "C" {
    pub fn llama_get_kv_cache_token_count(ctx: *const llama_context) -> i32;
}
unsafe extern "C" {
    pub fn llama_kv_self_used_cells(ctx: *const llama_context) -> i32;
}
unsafe extern "C" {
    pub fn llama_get_kv_cache_used_cells(ctx: *const llama_context) -> i32;
}
unsafe extern "C" {
    pub fn llama_kv_self_clear(ctx: *mut llama_context);
}
unsafe extern "C" {
    pub fn llama_kv_self_seq_rm(
        ctx: *mut llama_context,
        seq_id: llama_seq_id,
        p0: llama_pos,
        p1: llama_pos,
    ) -> bool;
}
unsafe extern "C" {
    pub fn llama_kv_self_seq_cp(
        ctx: *mut llama_context,
        seq_id_src: llama_seq_id,
        seq_id_dst: llama_seq_id,
        p0: llama_pos,
        p1: llama_pos,
    );
}
unsafe extern "C" {
    pub fn llama_kv_self_seq_keep(ctx: *mut llama_context, seq_id: llama_seq_id);
}
unsafe extern "C" {
    pub fn llama_kv_self_seq_add(
        ctx: *mut llama_context,
        seq_id: llama_seq_id,
        p0: llama_pos,
        p1: llama_pos,
        delta: llama_pos,
    );
}
unsafe extern "C" {
    pub fn llama_kv_self_seq_div(
        ctx: *mut llama_context,
        seq_id: llama_seq_id,
        p0: llama_pos,
        p1: llama_pos,
        d: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn llama_kv_self_seq_pos_max(ctx: *mut llama_context, seq_id: llama_seq_id) -> llama_pos;
}
unsafe extern "C" {
    pub fn llama_kv_self_defrag(ctx: *mut llama_context);
}
unsafe extern "C" {
    pub fn llama_kv_self_can_shift(ctx: *const llama_context) -> bool;
}
unsafe extern "C" {
    pub fn llama_kv_self_update(ctx: *mut llama_context);
}
unsafe extern "C" {
    pub fn llama_kv_cache_clear(ctx: *mut llama_context);
}
unsafe extern "C" {
    pub fn llama_kv_cache_seq_rm(
        ctx: *mut llama_context,
        seq_id: llama_seq_id,
        p0: llama_pos,
        p1: llama_pos,
    ) -> bool;
}
unsafe extern "C" {
    pub fn llama_kv_cache_seq_cp(
        ctx: *mut llama_context,
        seq_id_src: llama_seq_id,
        seq_id_dst: llama_seq_id,
        p0: llama_pos,
        p1: llama_pos,
    );
}
unsafe extern "C" {
    pub fn llama_kv_cache_seq_keep(ctx: *mut llama_context, seq_id: llama_seq_id);
}
unsafe extern "C" {
    pub fn llama_kv_cache_seq_add(
        ctx: *mut llama_context,
        seq_id: llama_seq_id,
        p0: llama_pos,
        p1: llama_pos,
        delta: llama_pos,
    );
}
unsafe extern "C" {
    pub fn llama_kv_cache_seq_div(
        ctx: *mut llama_context,
        seq_id: llama_seq_id,
        p0: llama_pos,
        p1: llama_pos,
        d: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn llama_kv_cache_seq_pos_max(ctx: *mut llama_context, seq_id: llama_seq_id) -> llama_pos;
}
unsafe extern "C" {
    pub fn llama_kv_cache_defrag(ctx: *mut llama_context);
}
unsafe extern "C" {
    pub fn llama_kv_cache_can_shift(ctx: *const llama_context) -> bool;
}
unsafe extern "C" {
    pub fn llama_kv_cache_update(ctx: *mut llama_context);
}
unsafe extern "C" {
    pub fn llama_state_get_size(ctx: *mut llama_context) -> usize;
}
unsafe extern "C" {
    pub fn llama_get_state_size(ctx: *mut llama_context) -> usize;
}
unsafe extern "C" {
    pub fn llama_state_get_data(ctx: *mut llama_context, dst: *mut u8, size: usize) -> usize;
}
unsafe extern "C" {
    pub fn llama_copy_state_data(ctx: *mut llama_context, dst: *mut u8) -> usize;
}
unsafe extern "C" {
    pub fn llama_state_set_data(ctx: *mut llama_context, src: *const u8, size: usize) -> usize;
}
unsafe extern "C" {
    pub fn llama_set_state_data(ctx: *mut llama_context, src: *const u8) -> usize;
}
unsafe extern "C" {
    pub fn llama_state_load_file(
        ctx: *mut llama_context,
        path_session: *const ::std::os::raw::c_char,
        tokens_out: *mut llama_token,
        n_token_capacity: usize,
        n_token_count_out: *mut usize,
    ) -> bool;
}
unsafe extern "C" {
    pub fn llama_load_session_file(
        ctx: *mut llama_context,
        path_session: *const ::std::os::raw::c_char,
        tokens_out: *mut llama_token,
        n_token_capacity: usize,
        n_token_count_out: *mut usize,
    ) -> bool;
}
unsafe extern "C" {
    pub fn llama_state_save_file(
        ctx: *mut llama_context,
        path_session: *const ::std::os::raw::c_char,
        tokens: *const llama_token,
        n_token_count: usize,
    ) -> bool;
}
unsafe extern "C" {
    pub fn llama_save_session_file(
        ctx: *mut llama_context,
        path_session: *const ::std::os::raw::c_char,
        tokens: *const llama_token,
        n_token_count: usize,
    ) -> bool;
}
unsafe extern "C" {
    pub fn llama_state_seq_get_size(ctx: *mut llama_context, seq_id: llama_seq_id) -> usize;
}
unsafe extern "C" {
    pub fn llama_state_seq_get_data(
        ctx: *mut llama_context,
        dst: *mut u8,
        size: usize,
        seq_id: llama_seq_id,
    ) -> usize;
}
unsafe extern "C" {
    pub fn llama_state_seq_set_data(
        ctx: *mut llama_context,
        src: *const u8,
        size: usize,
        dest_seq_id: llama_seq_id,
    ) -> usize;
}
unsafe extern "C" {
    pub fn llama_state_seq_save_file(
        ctx: *mut llama_context,
        filepath: *const ::std::os::raw::c_char,
        seq_id: llama_seq_id,
        tokens: *const llama_token,
        n_token_count: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn llama_state_seq_load_file(
        ctx: *mut llama_context,
        filepath: *const ::std::os::raw::c_char,
        dest_seq_id: llama_seq_id,
        tokens_out: *mut llama_token,
        n_token_capacity: usize,
        n_token_count_out: *mut usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn llama_batch_get_one(tokens: *mut llama_token, n_tokens: i32) -> llama_batch;
}
unsafe extern "C" {
    pub fn llama_batch_init(n_tokens: i32, embd: i32, n_seq_max: i32) -> llama_batch;
}
unsafe extern "C" {
    pub fn llama_batch_free(batch: llama_batch);
}
unsafe extern "C" {
    pub fn llama_encode(ctx: *mut llama_context, batch: llama_batch) -> i32;
}
unsafe extern "C" {
    pub fn llama_decode(ctx: *mut llama_context, batch: llama_batch) -> i32;
}
unsafe extern "C" {
    pub fn llama_set_n_threads(ctx: *mut llama_context, n_threads: i32, n_threads_batch: i32);
}
unsafe extern "C" {
    pub fn llama_n_threads(ctx: *mut llama_context) -> i32;
}
unsafe extern "C" {
    pub fn llama_n_threads_batch(ctx: *mut llama_context) -> i32;
}
unsafe extern "C" {
    pub fn llama_set_embeddings(ctx: *mut llama_context, embeddings: bool);
}
unsafe extern "C" {
    pub fn llama_set_causal_attn(ctx: *mut llama_context, causal_attn: bool);
}
unsafe extern "C" {
    pub fn llama_set_warmup(ctx: *mut llama_context, warmup: bool);
}
unsafe extern "C" {
    pub fn llama_set_abort_callback(
        ctx: *mut llama_context,
        abort_callback: ggml_abort_callback,
        abort_callback_data: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn llama_synchronize(ctx: *mut llama_context);
}
unsafe extern "C" {
    pub fn llama_get_logits(ctx: *mut llama_context) -> *mut f32;
}
unsafe extern "C" {
    pub fn llama_get_logits_ith(ctx: *mut llama_context, i: i32) -> *mut f32;
}
unsafe extern "C" {
    pub fn llama_get_embeddings(ctx: *mut llama_context) -> *mut f32;
}
unsafe extern "C" {
    pub fn llama_get_embeddings_ith(ctx: *mut llama_context, i: i32) -> *mut f32;
}
unsafe extern "C" {
    pub fn llama_get_embeddings_seq(ctx: *mut llama_context, seq_id: llama_seq_id) -> *mut f32;
}
unsafe extern "C" {
    pub fn llama_vocab_get_text(
        vocab: *const llama_vocab,
        token: llama_token,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn llama_vocab_get_score(vocab: *const llama_vocab, token: llama_token) -> f32;
}
unsafe extern "C" {
    pub fn llama_vocab_get_attr(vocab: *const llama_vocab, token: llama_token) -> llama_token_attr;
}
unsafe extern "C" {
    pub fn llama_vocab_is_eog(vocab: *const llama_vocab, token: llama_token) -> bool;
}
unsafe extern "C" {
    pub fn llama_vocab_is_control(vocab: *const llama_vocab, token: llama_token) -> bool;
}
unsafe extern "C" {
    pub fn llama_vocab_bos(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_vocab_eos(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_vocab_eot(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_vocab_sep(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_vocab_nl(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_vocab_pad(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_vocab_get_add_bos(vocab: *const llama_vocab) -> bool;
}
unsafe extern "C" {
    pub fn llama_vocab_get_add_eos(vocab: *const llama_vocab) -> bool;
}
unsafe extern "C" {
    pub fn llama_vocab_fim_pre(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_vocab_fim_suf(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_vocab_fim_mid(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_vocab_fim_pad(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_vocab_fim_rep(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_vocab_fim_sep(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_token_get_text(
        vocab: *const llama_vocab,
        token: llama_token,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn llama_token_get_score(vocab: *const llama_vocab, token: llama_token) -> f32;
}
unsafe extern "C" {
    pub fn llama_token_get_attr(vocab: *const llama_vocab, token: llama_token) -> llama_token_attr;
}
unsafe extern "C" {
    pub fn llama_token_is_eog(vocab: *const llama_vocab, token: llama_token) -> bool;
}
unsafe extern "C" {
    pub fn llama_token_is_control(vocab: *const llama_vocab, token: llama_token) -> bool;
}
unsafe extern "C" {
    pub fn llama_token_bos(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_token_eos(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_token_eot(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_token_cls(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_token_sep(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_token_nl(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_token_pad(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_add_bos_token(vocab: *const llama_vocab) -> bool;
}
unsafe extern "C" {
    pub fn llama_add_eos_token(vocab: *const llama_vocab) -> bool;
}
unsafe extern "C" {
    pub fn llama_token_fim_pre(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_token_fim_suf(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_token_fim_mid(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_token_fim_pad(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_token_fim_rep(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_token_fim_sep(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_vocab_cls(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    #[doc = " @details Convert the provided text into tokens.\n @param tokens The tokens pointer must be large enough to hold the resulting tokens.\n @return Returns the number of tokens on success, no more than n_tokens_max\n @return Returns a negative number on failure - the number of tokens that would have been returned\n @param add_special Allow to add BOS and EOS tokens if model is configured to do so.\n @param parse_special Allow tokenizing special and/or control tokens which otherwise are not exposed and treated\n                      as plaintext. Does not insert a leading space."]
    pub fn llama_tokenize(
        vocab: *const llama_vocab,
        text: *const ::std::os::raw::c_char,
        text_len: i32,
        tokens: *mut llama_token,
        n_tokens_max: i32,
        add_special: bool,
        parse_special: bool,
    ) -> i32;
}
unsafe extern "C" {
    pub fn llama_token_to_piece(
        vocab: *const llama_vocab,
        token: llama_token,
        buf: *mut ::std::os::raw::c_char,
        length: i32,
        lstrip: i32,
        special: bool,
    ) -> i32;
}
unsafe extern "C" {
    #[doc = " @details Convert the provided tokens into text (inverse of llama_tokenize()).\n @param text The char pointer must be large enough to hold the resulting text.\n @return Returns the number of chars/bytes on success, no more than text_len_max.\n @return Returns a negative number on failure - the number of chars/bytes that would have been returned.\n @param remove_special Allow to remove BOS and EOS tokens if model is configured to do so.\n @param unparse_special If true, special tokens are rendered in the output."]
    pub fn llama_detokenize(
        vocab: *const llama_vocab,
        tokens: *const llama_token,
        n_tokens: i32,
        text: *mut ::std::os::raw::c_char,
        text_len_max: i32,
        remove_special: bool,
        unparse_special: bool,
    ) -> i32;
}
unsafe extern "C" {
    #[doc = " Apply chat template. Inspired by hf apply_chat_template() on python.\n Both \"model\" and \"custom_template\" are optional, but at least one is required. \"custom_template\" has higher precedence than \"model\"\n NOTE: This function does not use a jinja parser. It only support a pre-defined list of template. See more: https://github.com/ggml-org/llama.cpp/wiki/Templates-supported-by-llama_chat_apply_template\n @param tmpl A Jinja template to use for this chat. If this is nullptr, the model’s default chat template will be used instead.\n @param chat Pointer to a list of multiple llama_chat_message\n @param n_msg Number of llama_chat_message in this chat\n @param add_ass Whether to end the prompt with the token(s) that indicate the start of an assistant message.\n @param buf A buffer to hold the output formatted prompt. The recommended alloc size is 2 * (total number of characters of all messages)\n @param length The size of the allocated buffer\n @return The total number of bytes of the formatted prompt. If is it larger than the size of buffer, you may need to re-alloc it and then re-apply the template."]
    pub fn llama_chat_apply_template(
        tmpl: *const ::std::os::raw::c_char,
        chat: *const llama_chat_message,
        n_msg: usize,
        add_ass: bool,
        buf: *mut ::std::os::raw::c_char,
        length: i32,
    ) -> i32;
}
unsafe extern "C" {
    pub fn llama_chat_builtin_templates(
        output: *mut *const ::std::os::raw::c_char,
        len: usize,
    ) -> i32;
}
pub type llama_sampler_context_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_sampler_i {
    pub name: ::std::option::Option<
        unsafe extern "C" fn(smpl: *const llama_sampler) -> *const ::std::os::raw::c_char,
    >,
    pub accept:
        ::std::option::Option<unsafe extern "C" fn(smpl: *mut llama_sampler, token: llama_token)>,
    pub apply: ::std::option::Option<
        unsafe extern "C" fn(smpl: *mut llama_sampler, cur_p: *mut llama_token_data_array),
    >,
    pub reset: ::std::option::Option<unsafe extern "C" fn(smpl: *mut llama_sampler)>,
    pub clone: ::std::option::Option<
        unsafe extern "C" fn(smpl: *const llama_sampler) -> *mut llama_sampler,
    >,
    pub free: ::std::option::Option<unsafe extern "C" fn(smpl: *mut llama_sampler)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_sampler_i"][::std::mem::size_of::<llama_sampler_i>() - 48usize];
    ["Alignment of llama_sampler_i"][::std::mem::align_of::<llama_sampler_i>() - 8usize];
    ["Offset of field: llama_sampler_i::name"]
        [::std::mem::offset_of!(llama_sampler_i, name) - 0usize];
    ["Offset of field: llama_sampler_i::accept"]
        [::std::mem::offset_of!(llama_sampler_i, accept) - 8usize];
    ["Offset of field: llama_sampler_i::apply"]
        [::std::mem::offset_of!(llama_sampler_i, apply) - 16usize];
    ["Offset of field: llama_sampler_i::reset"]
        [::std::mem::offset_of!(llama_sampler_i, reset) - 24usize];
    ["Offset of field: llama_sampler_i::clone"]
        [::std::mem::offset_of!(llama_sampler_i, clone) - 32usize];
    ["Offset of field: llama_sampler_i::free"]
        [::std::mem::offset_of!(llama_sampler_i, free) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_sampler {
    pub iface: *const llama_sampler_i,
    pub ctx: llama_sampler_context_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_sampler"][::std::mem::size_of::<llama_sampler>() - 16usize];
    ["Alignment of llama_sampler"][::std::mem::align_of::<llama_sampler>() - 8usize];
    ["Offset of field: llama_sampler::iface"]
        [::std::mem::offset_of!(llama_sampler, iface) - 0usize];
    ["Offset of field: llama_sampler::ctx"][::std::mem::offset_of!(llama_sampler, ctx) - 8usize];
};
unsafe extern "C" {
    pub fn llama_sampler_init(
        iface: *const llama_sampler_i,
        ctx: llama_sampler_context_t,
    ) -> *mut llama_sampler;
}
unsafe extern "C" {
    pub fn llama_sampler_name(smpl: *const llama_sampler) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn llama_sampler_accept(smpl: *mut llama_sampler, token: llama_token);
}
unsafe extern "C" {
    pub fn llama_sampler_apply(smpl: *mut llama_sampler, cur_p: *mut llama_token_data_array);
}
unsafe extern "C" {
    pub fn llama_sampler_reset(smpl: *mut llama_sampler);
}
unsafe extern "C" {
    pub fn llama_sampler_clone(smpl: *const llama_sampler) -> *mut llama_sampler;
}
unsafe extern "C" {
    pub fn llama_sampler_free(smpl: *mut llama_sampler);
}
unsafe extern "C" {
    pub fn llama_sampler_chain_init(params: llama_sampler_chain_params) -> *mut llama_sampler;
}
unsafe extern "C" {
    pub fn llama_sampler_chain_add(chain: *mut llama_sampler, smpl: *mut llama_sampler);
}
unsafe extern "C" {
    pub fn llama_sampler_chain_get(chain: *const llama_sampler, i: i32) -> *mut llama_sampler;
}
unsafe extern "C" {
    pub fn llama_sampler_chain_n(chain: *const llama_sampler) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn llama_sampler_chain_remove(chain: *mut llama_sampler, i: i32) -> *mut llama_sampler;
}
unsafe extern "C" {
    pub fn llama_sampler_init_greedy() -> *mut llama_sampler;
}
unsafe extern "C" {
    pub fn llama_sampler_init_dist(seed: u32) -> *mut llama_sampler;
}
unsafe extern "C" {
    #[doc = " @details Sorts candidate tokens by their logits in descending order and calculate probabilities based on logits.\n NOTE: Avoid using on the full vocabulary as the sorting can become slow. For example, apply top-k or top-p sampling first."]
    pub fn llama_sampler_init_softmax() -> *mut llama_sampler;
}
unsafe extern "C" {
    #[doc = " @details Top-K sampling described in academic paper \"The Curious Case of Neural Text Degeneration\" https://arxiv.org/abs/1904.09751"]
    pub fn llama_sampler_init_top_k(k: i32) -> *mut llama_sampler;
}
unsafe extern "C" {
    #[doc = " @details Nucleus sampling described in academic paper \"The Curious Case of Neural Text Degeneration\" https://arxiv.org/abs/1904.09751"]
    pub fn llama_sampler_init_top_p(p: f32, min_keep: usize) -> *mut llama_sampler;
}
unsafe extern "C" {
    #[doc = " @details Minimum P sampling as described in https://github.com/ggml-org/llama.cpp/pull/3841"]
    pub fn llama_sampler_init_min_p(p: f32, min_keep: usize) -> *mut llama_sampler;
}
unsafe extern "C" {
    #[doc = " @details Locally Typical Sampling implementation described in the paper https://arxiv.org/abs/2202.00666."]
    pub fn llama_sampler_init_typical(p: f32, min_keep: usize) -> *mut llama_sampler;
}
unsafe extern "C" {
    #[doc = " #details Updates the logits l_i` = l_i/t. When t <= 0.0f, the maximum logit is kept at it's original value, the rest are set to -inf"]
    pub fn llama_sampler_init_temp(t: f32) -> *mut llama_sampler;
}
unsafe extern "C" {
    #[doc = " @details Dynamic temperature implementation (a.k.a. entropy) described in the paper https://arxiv.org/abs/2309.02772."]
    pub fn llama_sampler_init_temp_ext(t: f32, delta: f32, exponent: f32) -> *mut llama_sampler;
}
unsafe extern "C" {
    #[doc = " @details XTC sampler as described in https://github.com/oobabooga/text-generation-webui/pull/6335"]
    pub fn llama_sampler_init_xtc(p: f32, t: f32, min_keep: usize, seed: u32)
        -> *mut llama_sampler;
}
unsafe extern "C" {
    #[doc = " @details Top n sigma sampling as described in academic paper \"Top-nσ: Not All Logits Are You Need\" https://arxiv.org/pdf/2411.07641"]
    pub fn llama_sampler_init_top_n_sigma(n: f32) -> *mut llama_sampler;
}
unsafe extern "C" {
    #[doc = " @details Mirostat 1.0 algorithm described in the paper https://arxiv.org/abs/2007.14966. Uses tokens instead of words.\n @param candidates A vector of `llama_token_data` containing the candidate tokens, their probabilities (p), and log-odds (logit) for the current position in the generated text.\n @param tau  The target cross-entropy (or surprise) value you want to achieve for the generated text. A higher value corresponds to more surprising or less predictable text, while a lower value corresponds to less surprising or more predictable text.\n @param eta The learning rate used to update `mu` based on the error between the target and observed surprisal of the sampled word. A larger learning rate will cause `mu` to be updated more quickly, while a smaller learning rate will result in slower updates.\n @param m The number of tokens considered in the estimation of `s_hat`. This is an arbitrary value that is used to calculate `s_hat`, which in turn helps to calculate the value of `k`. In the paper, they use `m = 100`, but you can experiment with different values to see how it affects the performance of the algorithm.\n @param mu Maximum cross-entropy. This value is initialized to be twice the target cross-entropy (`2 * tau`) and is updated in the algorithm based on the error between the target and observed surprisal."]
    pub fn llama_sampler_init_mirostat(
        n_vocab: i32,
        seed: u32,
        tau: f32,
        eta: f32,
        m: i32,
    ) -> *mut llama_sampler;
}
unsafe extern "C" {
    #[doc = " @details Mirostat 2.0 algorithm described in the paper https://arxiv.org/abs/2007.14966. Uses tokens instead of words.\n @param candidates A vector of `llama_token_data` containing the candidate tokens, their probabilities (p), and log-odds (logit) for the current position in the generated text.\n @param tau  The target cross-entropy (or surprise) value you want to achieve for the generated text. A higher value corresponds to more surprising or less predictable text, while a lower value corresponds to less surprising or more predictable text.\n @param eta The learning rate used to update `mu` based on the error between the target and observed surprisal of the sampled word. A larger learning rate will cause `mu` to be updated more quickly, while a smaller learning rate will result in slower updates.\n @param mu Maximum cross-entropy. This value is initialized to be twice the target cross-entropy (`2 * tau`) and is updated in the algorithm based on the error between the target and observed surprisal."]
    pub fn llama_sampler_init_mirostat_v2(seed: u32, tau: f32, eta: f32) -> *mut llama_sampler;
}
unsafe extern "C" {
    #[doc = " @details Intializes a GBNF grammar, see grammars/README.md for details.\n @param vocab The vocabulary that this grammar will be used with.\n @param grammar_str The production rules for the grammar, encoded as a string. Returns an empty grammar if empty. Returns NULL if parsing of grammar_str fails.\n @param grammar_root The name of the start symbol for the grammar."]
    pub fn llama_sampler_init_grammar(
        vocab: *const llama_vocab,
        grammar_str: *const ::std::os::raw::c_char,
        grammar_root: *const ::std::os::raw::c_char,
    ) -> *mut llama_sampler;
}
unsafe extern "C" {
    pub fn llama_sampler_init_grammar_lazy(
        vocab: *const llama_vocab,
        grammar_str: *const ::std::os::raw::c_char,
        grammar_root: *const ::std::os::raw::c_char,
        trigger_words: *mut *const ::std::os::raw::c_char,
        num_trigger_words: usize,
        trigger_tokens: *const llama_token,
        num_trigger_tokens: usize,
    ) -> *mut llama_sampler;
}
unsafe extern "C" {
    #[doc = " @details Lazy grammar sampler, introduced in https://github.com/ggml-org/llama.cpp/pull/9639\n @param trigger_patterns A list of patterns that will trigger the grammar sampler. Pattern will be matched from the start of the generation output, and grammar sampler will be fed content starting from its first match group.\n @param trigger_tokens A list of tokens that will trigger the grammar sampler. Grammar sampler will be fed content starting from the trigger token included."]
    pub fn llama_sampler_init_grammar_lazy_patterns(
        vocab: *const llama_vocab,
        grammar_str: *const ::std::os::raw::c_char,
        grammar_root: *const ::std::os::raw::c_char,
        trigger_patterns: *mut *const ::std::os::raw::c_char,
        num_trigger_patterns: usize,
        trigger_tokens: *const llama_token,
        num_trigger_tokens: usize,
    ) -> *mut llama_sampler;
}
unsafe extern "C" {
    #[doc = " NOTE: Avoid using on the full vocabulary as searching for repeated tokens can become slow. For example, apply top-k or top-p sampling first."]
    pub fn llama_sampler_init_penalties(
        penalty_last_n: i32,
        penalty_repeat: f32,
        penalty_freq: f32,
        penalty_present: f32,
    ) -> *mut llama_sampler;
}
unsafe extern "C" {
    #[doc = "  @details DRY sampler, designed by p-e-w, as described in: https://github.com/oobabooga/text-generation-webui/pull/5677, porting Koboldcpp implementation authored by pi6am: https://github.com/LostRuins/koboldcpp/pull/982"]
    pub fn llama_sampler_init_dry(
        vocab: *const llama_vocab,
        n_ctx_train: i32,
        dry_multiplier: f32,
        dry_base: f32,
        dry_allowed_length: i32,
        dry_penalty_last_n: i32,
        seq_breakers: *mut *const ::std::os::raw::c_char,
        num_breakers: usize,
    ) -> *mut llama_sampler;
}
unsafe extern "C" {
    pub fn llama_sampler_init_logit_bias(
        n_vocab: i32,
        n_logit_bias: i32,
        logit_bias: *const llama_logit_bias,
    ) -> *mut llama_sampler;
}
unsafe extern "C" {
    pub fn llama_sampler_init_infill(vocab: *const llama_vocab) -> *mut llama_sampler;
}
unsafe extern "C" {
    pub fn llama_sampler_get_seed(smpl: *const llama_sampler) -> u32;
}
unsafe extern "C" {
    pub fn llama_sampler_sample(
        smpl: *mut llama_sampler,
        ctx: *mut llama_context,
        idx: i32,
    ) -> llama_token;
}
unsafe extern "C" {
    #[doc = " @details Build a split GGUF final path for this chunk.\n          llama_split_path(split_path, sizeof(split_path), \"/models/ggml-model-q4_0\", 2, 4) => split_path = \"/models/ggml-model-q4_0-00002-of-00004.gguf\""]
    pub fn llama_split_path(
        split_path: *mut ::std::os::raw::c_char,
        maxlen: usize,
        path_prefix: *const ::std::os::raw::c_char,
        split_no: ::std::os::raw::c_int,
        split_count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " @details Extract the path prefix from the split_path if and only if the split_no and split_count match.\n          llama_split_prefix(split_prefix, 64, \"/models/ggml-model-q4_0-00002-of-00004.gguf\", 2, 4) => split_prefix = \"/models/ggml-model-q4_0\""]
    pub fn llama_split_prefix(
        split_prefix: *mut ::std::os::raw::c_char,
        maxlen: usize,
        split_path: *const ::std::os::raw::c_char,
        split_no: ::std::os::raw::c_int,
        split_count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn llama_print_system_info() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn llama_log_set(log_callback: ggml_log_callback, user_data: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_perf_context_data {
    pub t_start_ms: f64,
    pub t_load_ms: f64,
    pub t_p_eval_ms: f64,
    pub t_eval_ms: f64,
    pub n_p_eval: i32,
    pub n_eval: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_perf_context_data"][::std::mem::size_of::<llama_perf_context_data>() - 40usize];
    ["Alignment of llama_perf_context_data"]
        [::std::mem::align_of::<llama_perf_context_data>() - 8usize];
    ["Offset of field: llama_perf_context_data::t_start_ms"]
        [::std::mem::offset_of!(llama_perf_context_data, t_start_ms) - 0usize];
    ["Offset of field: llama_perf_context_data::t_load_ms"]
        [::std::mem::offset_of!(llama_perf_context_data, t_load_ms) - 8usize];
    ["Offset of field: llama_perf_context_data::t_p_eval_ms"]
        [::std::mem::offset_of!(llama_perf_context_data, t_p_eval_ms) - 16usize];
    ["Offset of field: llama_perf_context_data::t_eval_ms"]
        [::std::mem::offset_of!(llama_perf_context_data, t_eval_ms) - 24usize];
    ["Offset of field: llama_perf_context_data::n_p_eval"]
        [::std::mem::offset_of!(llama_perf_context_data, n_p_eval) - 32usize];
    ["Offset of field: llama_perf_context_data::n_eval"]
        [::std::mem::offset_of!(llama_perf_context_data, n_eval) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_perf_sampler_data {
    pub t_sample_ms: f64,
    pub n_sample: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_perf_sampler_data"][::std::mem::size_of::<llama_perf_sampler_data>() - 16usize];
    ["Alignment of llama_perf_sampler_data"]
        [::std::mem::align_of::<llama_perf_sampler_data>() - 8usize];
    ["Offset of field: llama_perf_sampler_data::t_sample_ms"]
        [::std::mem::offset_of!(llama_perf_sampler_data, t_sample_ms) - 0usize];
    ["Offset of field: llama_perf_sampler_data::n_sample"]
        [::std::mem::offset_of!(llama_perf_sampler_data, n_sample) - 8usize];
};
unsafe extern "C" {
    pub fn llama_perf_context(ctx: *const llama_context) -> llama_perf_context_data;
}
unsafe extern "C" {
    pub fn llama_perf_context_print(ctx: *const llama_context);
}
unsafe extern "C" {
    pub fn llama_perf_context_reset(ctx: *mut llama_context);
}
unsafe extern "C" {
    pub fn llama_perf_sampler(chain: *const llama_sampler) -> llama_perf_sampler_data;
}
unsafe extern "C" {
    pub fn llama_perf_sampler_print(chain: *const llama_sampler);
}
unsafe extern "C" {
    pub fn llama_perf_sampler_reset(chain: *mut llama_sampler);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_model_deleter {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_model_deleter"][::std::mem::size_of::<llama_model_deleter>() - 1usize];
    ["Alignment of llama_model_deleter"][::std::mem::align_of::<llama_model_deleter>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_context_deleter {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_context_deleter"][::std::mem::size_of::<llama_context_deleter>() - 1usize];
    ["Alignment of llama_context_deleter"]
        [::std::mem::align_of::<llama_context_deleter>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_sampler_deleter {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_sampler_deleter"][::std::mem::size_of::<llama_sampler_deleter>() - 1usize];
    ["Alignment of llama_sampler_deleter"]
        [::std::mem::align_of::<llama_sampler_deleter>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_adapter_lora_deleter {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_adapter_lora_deleter"]
        [::std::mem::size_of::<llama_adapter_lora_deleter>() - 1usize];
    ["Alignment of llama_adapter_lora_deleter"]
        [::std::mem::align_of::<llama_adapter_lora_deleter>() - 1usize];
};
pub type llama_model_ptr = std_unique_ptr;
pub type llama_context_ptr = std_unique_ptr;
pub type llama_sampler_ptr = std_unique_ptr;
pub type llama_adapter_lora_ptr = std_unique_ptr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lconv {
    pub decimal_point: *mut ::std::os::raw::c_char,
    pub thousands_sep: *mut ::std::os::raw::c_char,
    pub grouping: *mut ::std::os::raw::c_char,
    pub int_curr_symbol: *mut ::std::os::raw::c_char,
    pub currency_symbol: *mut ::std::os::raw::c_char,
    pub mon_decimal_point: *mut ::std::os::raw::c_char,
    pub mon_thousands_sep: *mut ::std::os::raw::c_char,
    pub mon_grouping: *mut ::std::os::raw::c_char,
    pub positive_sign: *mut ::std::os::raw::c_char,
    pub negative_sign: *mut ::std::os::raw::c_char,
    pub int_frac_digits: ::std::os::raw::c_char,
    pub frac_digits: ::std::os::raw::c_char,
    pub p_cs_precedes: ::std::os::raw::c_char,
    pub p_sep_by_space: ::std::os::raw::c_char,
    pub n_cs_precedes: ::std::os::raw::c_char,
    pub n_sep_by_space: ::std::os::raw::c_char,
    pub p_sign_posn: ::std::os::raw::c_char,
    pub n_sign_posn: ::std::os::raw::c_char,
    pub int_p_cs_precedes: ::std::os::raw::c_char,
    pub int_p_sep_by_space: ::std::os::raw::c_char,
    pub int_n_cs_precedes: ::std::os::raw::c_char,
    pub int_n_sep_by_space: ::std::os::raw::c_char,
    pub int_p_sign_posn: ::std::os::raw::c_char,
    pub int_n_sign_posn: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lconv"][::std::mem::size_of::<lconv>() - 96usize];
    ["Alignment of lconv"][::std::mem::align_of::<lconv>() - 8usize];
    ["Offset of field: lconv::decimal_point"]
        [::std::mem::offset_of!(lconv, decimal_point) - 0usize];
    ["Offset of field: lconv::thousands_sep"]
        [::std::mem::offset_of!(lconv, thousands_sep) - 8usize];
    ["Offset of field: lconv::grouping"][::std::mem::offset_of!(lconv, grouping) - 16usize];
    ["Offset of field: lconv::int_curr_symbol"]
        [::std::mem::offset_of!(lconv, int_curr_symbol) - 24usize];
    ["Offset of field: lconv::currency_symbol"]
        [::std::mem::offset_of!(lconv, currency_symbol) - 32usize];
    ["Offset of field: lconv::mon_decimal_point"]
        [::std::mem::offset_of!(lconv, mon_decimal_point) - 40usize];
    ["Offset of field: lconv::mon_thousands_sep"]
        [::std::mem::offset_of!(lconv, mon_thousands_sep) - 48usize];
    ["Offset of field: lconv::mon_grouping"][::std::mem::offset_of!(lconv, mon_grouping) - 56usize];
    ["Offset of field: lconv::positive_sign"]
        [::std::mem::offset_of!(lconv, positive_sign) - 64usize];
    ["Offset of field: lconv::negative_sign"]
        [::std::mem::offset_of!(lconv, negative_sign) - 72usize];
    ["Offset of field: lconv::int_frac_digits"]
        [::std::mem::offset_of!(lconv, int_frac_digits) - 80usize];
    ["Offset of field: lconv::frac_digits"][::std::mem::offset_of!(lconv, frac_digits) - 81usize];
    ["Offset of field: lconv::p_cs_precedes"]
        [::std::mem::offset_of!(lconv, p_cs_precedes) - 82usize];
    ["Offset of field: lconv::p_sep_by_space"]
        [::std::mem::offset_of!(lconv, p_sep_by_space) - 83usize];
    ["Offset of field: lconv::n_cs_precedes"]
        [::std::mem::offset_of!(lconv, n_cs_precedes) - 84usize];
    ["Offset of field: lconv::n_sep_by_space"]
        [::std::mem::offset_of!(lconv, n_sep_by_space) - 85usize];
    ["Offset of field: lconv::p_sign_posn"][::std::mem::offset_of!(lconv, p_sign_posn) - 86usize];
    ["Offset of field: lconv::n_sign_posn"][::std::mem::offset_of!(lconv, n_sign_posn) - 87usize];
    ["Offset of field: lconv::int_p_cs_precedes"]
        [::std::mem::offset_of!(lconv, int_p_cs_precedes) - 88usize];
    ["Offset of field: lconv::int_p_sep_by_space"]
        [::std::mem::offset_of!(lconv, int_p_sep_by_space) - 89usize];
    ["Offset of field: lconv::int_n_cs_precedes"]
        [::std::mem::offset_of!(lconv, int_n_cs_precedes) - 90usize];
    ["Offset of field: lconv::int_n_sep_by_space"]
        [::std::mem::offset_of!(lconv, int_n_sep_by_space) - 91usize];
    ["Offset of field: lconv::int_p_sign_posn"]
        [::std::mem::offset_of!(lconv, int_p_sign_posn) - 92usize];
    ["Offset of field: lconv::int_n_sign_posn"]
        [::std::mem::offset_of!(lconv, int_n_sign_posn) - 93usize];
};
unsafe extern "C" {
    pub fn setlocale(
        __category: ::std::os::raw::c_int,
        __locale: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn localeconv() -> *mut lconv;
}
unsafe extern "C" {
    pub fn newlocale(
        __category_mask: ::std::os::raw::c_int,
        __locale: *const ::std::os::raw::c_char,
        __base: locale_t,
    ) -> locale_t;
}
unsafe extern "C" {
    pub fn duplocale(__dataset: locale_t) -> locale_t;
}
unsafe extern "C" {
    pub fn freelocale(__dataset: locale_t);
}
unsafe extern "C" {
    pub fn uselocale(__dataset: locale_t) -> locale_t;
}
pub const _ISupper: _bindgen_ty_54 = 256;
pub const _ISlower: _bindgen_ty_54 = 512;
pub const _ISalpha: _bindgen_ty_54 = 1024;
pub const _ISdigit: _bindgen_ty_54 = 2048;
pub const _ISxdigit: _bindgen_ty_54 = 4096;
pub const _ISspace: _bindgen_ty_54 = 8192;
pub const _ISprint: _bindgen_ty_54 = 16384;
pub const _ISgraph: _bindgen_ty_54 = 32768;
pub const _ISblank: _bindgen_ty_54 = 1;
pub const _IScntrl: _bindgen_ty_54 = 2;
pub const _ISpunct: _bindgen_ty_54 = 4;
pub const _ISalnum: _bindgen_ty_54 = 8;
pub type _bindgen_ty_54 = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn __ctype_b_loc() -> *mut *const ::std::os::raw::c_ushort;
}
unsafe extern "C" {
    pub fn __ctype_tolower_loc() -> *mut *const __int32_t;
}
unsafe extern "C" {
    pub fn __ctype_toupper_loc() -> *mut *const __int32_t;
}
unsafe extern "C" {
    pub fn isalnum(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isalpha(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iscntrl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn islower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isgraph(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isprint(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ispunct(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isspace(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isxdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tolower(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn toupper(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isblank(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isctype(
        __c: ::std::os::raw::c_int,
        __mask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn toascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _toupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _tolower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isalnum_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isalpha_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iscntrl_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isdigit_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn islower_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isgraph_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isprint_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ispunct_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isspace_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isupper_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isxdigit_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isblank_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __tolower_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tolower_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __toupper_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn toupper_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of div_t"][::std::mem::size_of::<div_t>() - 8usize];
    ["Alignment of div_t"][::std::mem::align_of::<div_t>() - 4usize];
    ["Offset of field: div_t::quot"][::std::mem::offset_of!(div_t, quot) - 0usize];
    ["Offset of field: div_t::rem"][::std::mem::offset_of!(div_t, rem) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ldiv_t"][::std::mem::size_of::<ldiv_t>() - 16usize];
    ["Alignment of ldiv_t"][::std::mem::align_of::<ldiv_t>() - 8usize];
    ["Offset of field: ldiv_t::quot"][::std::mem::offset_of!(ldiv_t, quot) - 0usize];
    ["Offset of field: ldiv_t::rem"][::std::mem::offset_of!(ldiv_t, rem) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lldiv_t"][::std::mem::size_of::<lldiv_t>() - 16usize];
    ["Alignment of lldiv_t"][::std::mem::align_of::<lldiv_t>() - 8usize];
    ["Offset of field: lldiv_t::quot"][::std::mem::offset_of!(lldiv_t, quot) - 0usize];
    ["Offset of field: lldiv_t::rem"][::std::mem::offset_of!(lldiv_t, rem) - 8usize];
};
unsafe extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
unsafe extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
unsafe extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
unsafe extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
unsafe extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
unsafe extern "C" {
    pub fn strtof32(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float32;
}
unsafe extern "C" {
    pub fn strtof64(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float64;
}
unsafe extern "C" {
    pub fn strtof32x(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float32x;
}
unsafe extern "C" {
    pub fn strtof64x(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float64x;
}
unsafe extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn strfromd(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: f64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strfromf(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: f32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strfroml(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: u128,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strfromf32(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: _Float32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strfromf64(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: _Float64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strfromf32x(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: _Float32x,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strfromf64x(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: _Float64x,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strtol_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn strtoul_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strtoll_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtoull_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn strtod_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> f64;
}
unsafe extern "C" {
    pub fn strtof_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> f32;
}
unsafe extern "C" {
    pub fn strtold_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> u128;
}
unsafe extern "C" {
    pub fn strtof32_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float32;
}
unsafe extern "C" {
    pub fn strtof64_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float64;
}
unsafe extern "C" {
    pub fn strtof32x_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float32x;
}
unsafe extern "C" {
    pub fn strtof64x_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float64x;
}
unsafe extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type ino64_t = __ino64_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type useconds_t = __useconds_t;
pub type suseconds_t = __suseconds_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
pub type sigset_t = __sigset_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__fd_mask; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fd_set"][::std::mem::size_of::<fd_set>() - 128usize];
    ["Alignment of fd_set"][::std::mem::align_of::<fd_set>() - 8usize];
    ["Offset of field: fd_set::fds_bits"][::std::mem::offset_of!(fd_set, fds_bits) - 0usize];
};
pub type fd_mask = __fd_mask;
unsafe extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type blkcnt64_t = __blkcnt64_t;
pub type fsblkcnt64_t = __fsblkcnt64_t;
pub type fsfilcnt64_t = __fsfilcnt64_t;
unsafe extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of random_data"][::std::mem::size_of::<random_data>() - 48usize];
    ["Alignment of random_data"][::std::mem::align_of::<random_data>() - 8usize];
    ["Offset of field: random_data::fptr"][::std::mem::offset_of!(random_data, fptr) - 0usize];
    ["Offset of field: random_data::rptr"][::std::mem::offset_of!(random_data, rptr) - 8usize];
    ["Offset of field: random_data::state"][::std::mem::offset_of!(random_data, state) - 16usize];
    ["Offset of field: random_data::rand_type"]
        [::std::mem::offset_of!(random_data, rand_type) - 24usize];
    ["Offset of field: random_data::rand_deg"]
        [::std::mem::offset_of!(random_data, rand_deg) - 28usize];
    ["Offset of field: random_data::rand_sep"]
        [::std::mem::offset_of!(random_data, rand_sep) - 32usize];
    ["Offset of field: random_data::end_ptr"]
        [::std::mem::offset_of!(random_data, end_ptr) - 40usize];
};
unsafe extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn drand48() -> f64;
}
unsafe extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
unsafe extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
unsafe extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
unsafe extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drand48_data"][::std::mem::size_of::<drand48_data>() - 24usize];
    ["Alignment of drand48_data"][::std::mem::align_of::<drand48_data>() - 8usize];
    ["Offset of field: drand48_data::__x"][::std::mem::offset_of!(drand48_data, __x) - 0usize];
    ["Offset of field: drand48_data::__old_x"]
        [::std::mem::offset_of!(drand48_data, __old_x) - 6usize];
    ["Offset of field: drand48_data::__c"][::std::mem::offset_of!(drand48_data, __c) - 12usize];
    ["Offset of field: drand48_data::__init"]
        [::std::mem::offset_of!(drand48_data, __init) - 14usize];
    ["Offset of field: drand48_data::__a"][::std::mem::offset_of!(drand48_data, __a) - 16usize];
};
unsafe extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn calloc(__nmemb: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn alloca(__size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn abort() -> !;
}
unsafe extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn secure_getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkstemp64(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkstemps64(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn mkostemp(
        __template: *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkostemp64(
        __template: *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkostemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkostemps64(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn canonicalize_file_name(
        __name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type comparison_fn_t = __compar_fn_t;
pub type __compar_d_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
unsafe extern "C" {
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_d_fn_t,
        __arg: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
unsafe extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
unsafe extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
unsafe extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mbtowc(
        __pwc: *mut u32,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mbstowcs(__pwcs: *mut u32, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
unsafe extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const u32, __n: usize) -> usize;
}
unsafe extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn posix_openpt(__oflag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn grantpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn unlockpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ptsname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ptsname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getpt() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut program_invocation_name: *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub static mut program_invocation_short_name: *mut ::std::os::raw::c_char;
}
pub type error_t = ::std::os::raw::c_int;
pub type wctype_t = ::std::os::raw::c_ulong;
pub const __ISwupper: _bindgen_ty_55 = 0;
pub const __ISwlower: _bindgen_ty_55 = 1;
pub const __ISwalpha: _bindgen_ty_55 = 2;
pub const __ISwdigit: _bindgen_ty_55 = 3;
pub const __ISwxdigit: _bindgen_ty_55 = 4;
pub const __ISwspace: _bindgen_ty_55 = 5;
pub const __ISwprint: _bindgen_ty_55 = 6;
pub const __ISwgraph: _bindgen_ty_55 = 7;
pub const __ISwblank: _bindgen_ty_55 = 8;
pub const __ISwcntrl: _bindgen_ty_55 = 9;
pub const __ISwpunct: _bindgen_ty_55 = 10;
pub const __ISwalnum: _bindgen_ty_55 = 11;
pub const _ISwupper: _bindgen_ty_55 = 16777216;
pub const _ISwlower: _bindgen_ty_55 = 33554432;
pub const _ISwalpha: _bindgen_ty_55 = 67108864;
pub const _ISwdigit: _bindgen_ty_55 = 134217728;
pub const _ISwxdigit: _bindgen_ty_55 = 268435456;
pub const _ISwspace: _bindgen_ty_55 = 536870912;
pub const _ISwprint: _bindgen_ty_55 = 1073741824;
pub const _ISwgraph: _bindgen_ty_55 = -2147483648;
pub const _ISwblank: _bindgen_ty_55 = 65536;
pub const _ISwcntrl: _bindgen_ty_55 = 131072;
pub const _ISwpunct: _bindgen_ty_55 = 262144;
pub const _ISwalnum: _bindgen_ty_55 = 524288;
pub type _bindgen_ty_55 = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn iswalnum(__wc: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswalpha(__wc: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswcntrl(__wc: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswdigit(__wc: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswgraph(__wc: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswlower(__wc: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswprint(__wc: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswpunct(__wc: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswspace(__wc: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswupper(__wc: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswxdigit(__wc: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswblank(__wc: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wctype(__property: *const ::std::os::raw::c_char) -> wctype_t;
}
unsafe extern "C" {
    pub fn iswctype(__wc: wint_t, __desc: wctype_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn towlower(__wc: wint_t) -> wint_t;
}
unsafe extern "C" {
    pub fn towupper(__wc: wint_t) -> wint_t;
}
pub type wctrans_t = *const __int32_t;
unsafe extern "C" {
    pub fn wctrans(__property: *const ::std::os::raw::c_char) -> wctrans_t;
}
unsafe extern "C" {
    pub fn towctrans(__wc: wint_t, __desc: wctrans_t) -> wint_t;
}
unsafe extern "C" {
    pub fn iswalnum_l(__wc: wint_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswalpha_l(__wc: wint_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswcntrl_l(__wc: wint_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswdigit_l(__wc: wint_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswgraph_l(__wc: wint_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswlower_l(__wc: wint_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswprint_l(__wc: wint_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswpunct_l(__wc: wint_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswspace_l(__wc: wint_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswupper_l(__wc: wint_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswxdigit_l(__wc: wint_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswblank_l(__wc: wint_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wctype_l(__property: *const ::std::os::raw::c_char, __locale: locale_t) -> wctype_t;
}
unsafe extern "C" {
    pub fn iswctype_l(__wc: wint_t, __desc: wctype_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn towlower_l(__wc: wint_t, __locale: locale_t) -> wint_t;
}
unsafe extern "C" {
    pub fn towupper_l(__wc: wint_t, __locale: locale_t) -> wint_t;
}
unsafe extern "C" {
    pub fn wctrans_l(__property: *const ::std::os::raw::c_char, __locale: locale_t) -> wctrans_t;
}
unsafe extern "C" {
    pub fn towctrans_l(__wc: wint_t, __desc: wctrans_t, __locale: locale_t) -> wint_t;
}
#[repr(C)]
pub struct common_adapter_lora_info {
    pub path: std_string,
    pub scale: f32,
    pub ptr: *mut llama_adapter_lora,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of common_adapter_lora_info"]
        [::std::mem::size_of::<common_adapter_lora_info>() - 48usize];
    ["Alignment of common_adapter_lora_info"]
        [::std::mem::align_of::<common_adapter_lora_info>() - 8usize];
    ["Offset of field: common_adapter_lora_info::path"]
        [::std::mem::offset_of!(common_adapter_lora_info, path) - 0usize];
    ["Offset of field: common_adapter_lora_info::scale"]
        [::std::mem::offset_of!(common_adapter_lora_info, scale) - 32usize];
    ["Offset of field: common_adapter_lora_info::ptr"]
        [::std::mem::offset_of!(common_adapter_lora_info, ptr) - 40usize];
};
pub type llama_tokens = std_vector;
unsafe extern "C" {
    pub static mut LLAMA_BUILD_NUMBER: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut LLAMA_COMMIT: *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub static mut LLAMA_COMPILER: *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub static mut LLAMA_BUILD_TARGET: *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_params {
    pub n_threads: ::std::os::raw::c_int,
    pub cpumask: [bool; 512usize],
    pub mask_valid: bool,
    pub priority: ggml_sched_priority,
    pub strict_cpu: bool,
    pub poll: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_params"][::std::mem::size_of::<cpu_params>() - 532usize];
    ["Alignment of cpu_params"][::std::mem::align_of::<cpu_params>() - 4usize];
    ["Offset of field: cpu_params::n_threads"]
        [::std::mem::offset_of!(cpu_params, n_threads) - 0usize];
    ["Offset of field: cpu_params::cpumask"][::std::mem::offset_of!(cpu_params, cpumask) - 4usize];
    ["Offset of field: cpu_params::mask_valid"]
        [::std::mem::offset_of!(cpu_params, mask_valid) - 516usize];
    ["Offset of field: cpu_params::priority"]
        [::std::mem::offset_of!(cpu_params, priority) - 520usize];
    ["Offset of field: cpu_params::strict_cpu"]
        [::std::mem::offset_of!(cpu_params, strict_cpu) - 524usize];
    ["Offset of field: cpu_params::poll"][::std::mem::offset_of!(cpu_params, poll) - 528usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_Z26cpu_get_num_physical_coresv"]
    pub fn cpu_get_num_physical_cores() -> i32;
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z16cpu_get_num_mathv"]
    pub fn cpu_get_num_math() -> i32;
}
pub const llama_example_LLAMA_EXAMPLE_COMMON: llama_example = 0;
pub const llama_example_LLAMA_EXAMPLE_SPECULATIVE: llama_example = 1;
pub const llama_example_LLAMA_EXAMPLE_MAIN: llama_example = 2;
pub const llama_example_LLAMA_EXAMPLE_INFILL: llama_example = 3;
pub const llama_example_LLAMA_EXAMPLE_EMBEDDING: llama_example = 4;
pub const llama_example_LLAMA_EXAMPLE_PERPLEXITY: llama_example = 5;
pub const llama_example_LLAMA_EXAMPLE_RETRIEVAL: llama_example = 6;
pub const llama_example_LLAMA_EXAMPLE_PASSKEY: llama_example = 7;
pub const llama_example_LLAMA_EXAMPLE_IMATRIX: llama_example = 8;
pub const llama_example_LLAMA_EXAMPLE_BENCH: llama_example = 9;
pub const llama_example_LLAMA_EXAMPLE_SERVER: llama_example = 10;
pub const llama_example_LLAMA_EXAMPLE_CVECTOR_GENERATOR: llama_example = 11;
pub const llama_example_LLAMA_EXAMPLE_EXPORT_LORA: llama_example = 12;
pub const llama_example_LLAMA_EXAMPLE_LLAVA: llama_example = 13;
pub const llama_example_LLAMA_EXAMPLE_LOOKUP: llama_example = 14;
pub const llama_example_LLAMA_EXAMPLE_PARALLEL: llama_example = 15;
pub const llama_example_LLAMA_EXAMPLE_TTS: llama_example = 16;
pub const llama_example_LLAMA_EXAMPLE_COUNT: llama_example = 17;
pub type llama_example = ::std::os::raw::c_uint;
pub const common_sampler_type_COMMON_SAMPLER_TYPE_NONE: common_sampler_type = 0;
pub const common_sampler_type_COMMON_SAMPLER_TYPE_DRY: common_sampler_type = 1;
pub const common_sampler_type_COMMON_SAMPLER_TYPE_TOP_K: common_sampler_type = 2;
pub const common_sampler_type_COMMON_SAMPLER_TYPE_TOP_P: common_sampler_type = 3;
pub const common_sampler_type_COMMON_SAMPLER_TYPE_MIN_P: common_sampler_type = 4;
pub const common_sampler_type_COMMON_SAMPLER_TYPE_TYPICAL_P: common_sampler_type = 6;
pub const common_sampler_type_COMMON_SAMPLER_TYPE_TEMPERATURE: common_sampler_type = 7;
pub const common_sampler_type_COMMON_SAMPLER_TYPE_XTC: common_sampler_type = 8;
pub const common_sampler_type_COMMON_SAMPLER_TYPE_INFILL: common_sampler_type = 9;
pub const common_sampler_type_COMMON_SAMPLER_TYPE_PENALTIES: common_sampler_type = 10;
pub type common_sampler_type = ::std::os::raw::c_uint;
pub const dimre_method_DIMRE_METHOD_PCA: dimre_method = 0;
pub const dimre_method_DIMRE_METHOD_MEAN: dimre_method = 1;
pub type dimre_method = ::std::os::raw::c_uint;
pub const common_conversation_mode_COMMON_CONVERSATION_MODE_DISABLED: common_conversation_mode = 0;
pub const common_conversation_mode_COMMON_CONVERSATION_MODE_ENABLED: common_conversation_mode = 1;
pub const common_conversation_mode_COMMON_CONVERSATION_MODE_AUTO: common_conversation_mode = 2;
pub type common_conversation_mode = ::std::os::raw::c_uint;
pub const common_grammar_trigger_type_COMMON_GRAMMAR_TRIGGER_TYPE_TOKEN:
    common_grammar_trigger_type = 0;
pub const common_grammar_trigger_type_COMMON_GRAMMAR_TRIGGER_TYPE_WORD:
    common_grammar_trigger_type = 1;
pub const common_grammar_trigger_type_COMMON_GRAMMAR_TRIGGER_TYPE_PATTERN:
    common_grammar_trigger_type = 2;
pub const common_grammar_trigger_type_COMMON_GRAMMAR_TRIGGER_TYPE_PATTERN_START:
    common_grammar_trigger_type = 3;
pub type common_grammar_trigger_type = ::std::os::raw::c_uint;
#[repr(C)]
pub struct common_grammar_trigger {
    pub type_: common_grammar_trigger_type,
    pub value: std_string,
    pub token: llama_token,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of common_grammar_trigger"][::std::mem::size_of::<common_grammar_trigger>() - 48usize];
    ["Alignment of common_grammar_trigger"]
        [::std::mem::align_of::<common_grammar_trigger>() - 8usize];
    ["Offset of field: common_grammar_trigger::type_"]
        [::std::mem::offset_of!(common_grammar_trigger, type_) - 0usize];
    ["Offset of field: common_grammar_trigger::value"]
        [::std::mem::offset_of!(common_grammar_trigger, value) - 8usize];
    ["Offset of field: common_grammar_trigger::token"]
        [::std::mem::offset_of!(common_grammar_trigger, token) - 40usize];
};
#[repr(C)]
pub struct common_params_sampling {
    pub seed: u32,
    pub n_prev: i32,
    pub n_probs: i32,
    pub min_keep: i32,
    pub top_k: i32,
    pub top_p: f32,
    pub min_p: f32,
    pub xtc_probability: f32,
    pub xtc_threshold: f32,
    pub typ_p: f32,
    pub temp: f32,
    pub dynatemp_range: f32,
    pub dynatemp_exponent: f32,
    pub penalty_last_n: i32,
    pub penalty_repeat: f32,
    pub penalty_freq: f32,
    pub penalty_present: f32,
    pub dry_multiplier: f32,
    pub dry_base: f32,
    pub dry_allowed_length: i32,
    pub dry_penalty_last_n: i32,
    pub mirostat: i32,
    pub top_n_sigma: f32,
    pub mirostat_tau: f32,
    pub mirostat_eta: f32,
    pub ignore_eos: bool,
    pub no_perf: bool,
    pub timing_per_token: bool,
    pub dry_sequence_breakers: std_vector,
    pub samplers: std_vector,
    pub grammar: std_string,
    pub grammar_lazy: bool,
    pub grammar_triggers: std_vector,
    pub preserved_tokens: std_set,
    pub logit_bias: std_vector,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of common_params_sampling"][::std::mem::size_of::<common_params_sampling>() - 288usize];
    ["Alignment of common_params_sampling"]
        [::std::mem::align_of::<common_params_sampling>() - 8usize];
    ["Offset of field: common_params_sampling::seed"]
        [::std::mem::offset_of!(common_params_sampling, seed) - 0usize];
    ["Offset of field: common_params_sampling::n_prev"]
        [::std::mem::offset_of!(common_params_sampling, n_prev) - 4usize];
    ["Offset of field: common_params_sampling::n_probs"]
        [::std::mem::offset_of!(common_params_sampling, n_probs) - 8usize];
    ["Offset of field: common_params_sampling::min_keep"]
        [::std::mem::offset_of!(common_params_sampling, min_keep) - 12usize];
    ["Offset of field: common_params_sampling::top_k"]
        [::std::mem::offset_of!(common_params_sampling, top_k) - 16usize];
    ["Offset of field: common_params_sampling::top_p"]
        [::std::mem::offset_of!(common_params_sampling, top_p) - 20usize];
    ["Offset of field: common_params_sampling::min_p"]
        [::std::mem::offset_of!(common_params_sampling, min_p) - 24usize];
    ["Offset of field: common_params_sampling::xtc_probability"]
        [::std::mem::offset_of!(common_params_sampling, xtc_probability) - 28usize];
    ["Offset of field: common_params_sampling::xtc_threshold"]
        [::std::mem::offset_of!(common_params_sampling, xtc_threshold) - 32usize];
    ["Offset of field: common_params_sampling::typ_p"]
        [::std::mem::offset_of!(common_params_sampling, typ_p) - 36usize];
    ["Offset of field: common_params_sampling::temp"]
        [::std::mem::offset_of!(common_params_sampling, temp) - 40usize];
    ["Offset of field: common_params_sampling::dynatemp_range"]
        [::std::mem::offset_of!(common_params_sampling, dynatemp_range) - 44usize];
    ["Offset of field: common_params_sampling::dynatemp_exponent"]
        [::std::mem::offset_of!(common_params_sampling, dynatemp_exponent) - 48usize];
    ["Offset of field: common_params_sampling::penalty_last_n"]
        [::std::mem::offset_of!(common_params_sampling, penalty_last_n) - 52usize];
    ["Offset of field: common_params_sampling::penalty_repeat"]
        [::std::mem::offset_of!(common_params_sampling, penalty_repeat) - 56usize];
    ["Offset of field: common_params_sampling::penalty_freq"]
        [::std::mem::offset_of!(common_params_sampling, penalty_freq) - 60usize];
    ["Offset of field: common_params_sampling::penalty_present"]
        [::std::mem::offset_of!(common_params_sampling, penalty_present) - 64usize];
    ["Offset of field: common_params_sampling::dry_multiplier"]
        [::std::mem::offset_of!(common_params_sampling, dry_multiplier) - 68usize];
    ["Offset of field: common_params_sampling::dry_base"]
        [::std::mem::offset_of!(common_params_sampling, dry_base) - 72usize];
    ["Offset of field: common_params_sampling::dry_allowed_length"]
        [::std::mem::offset_of!(common_params_sampling, dry_allowed_length) - 76usize];
    ["Offset of field: common_params_sampling::dry_penalty_last_n"]
        [::std::mem::offset_of!(common_params_sampling, dry_penalty_last_n) - 80usize];
    ["Offset of field: common_params_sampling::mirostat"]
        [::std::mem::offset_of!(common_params_sampling, mirostat) - 84usize];
    ["Offset of field: common_params_sampling::top_n_sigma"]
        [::std::mem::offset_of!(common_params_sampling, top_n_sigma) - 88usize];
    ["Offset of field: common_params_sampling::mirostat_tau"]
        [::std::mem::offset_of!(common_params_sampling, mirostat_tau) - 92usize];
    ["Offset of field: common_params_sampling::mirostat_eta"]
        [::std::mem::offset_of!(common_params_sampling, mirostat_eta) - 96usize];
    ["Offset of field: common_params_sampling::ignore_eos"]
        [::std::mem::offset_of!(common_params_sampling, ignore_eos) - 100usize];
    ["Offset of field: common_params_sampling::no_perf"]
        [::std::mem::offset_of!(common_params_sampling, no_perf) - 101usize];
    ["Offset of field: common_params_sampling::timing_per_token"]
        [::std::mem::offset_of!(common_params_sampling, timing_per_token) - 102usize];
    ["Offset of field: common_params_sampling::dry_sequence_breakers"]
        [::std::mem::offset_of!(common_params_sampling, dry_sequence_breakers) - 104usize];
    ["Offset of field: common_params_sampling::samplers"]
        [::std::mem::offset_of!(common_params_sampling, samplers) - 128usize];
    ["Offset of field: common_params_sampling::grammar"]
        [::std::mem::offset_of!(common_params_sampling, grammar) - 152usize];
    ["Offset of field: common_params_sampling::grammar_lazy"]
        [::std::mem::offset_of!(common_params_sampling, grammar_lazy) - 184usize];
    ["Offset of field: common_params_sampling::grammar_triggers"]
        [::std::mem::offset_of!(common_params_sampling, grammar_triggers) - 192usize];
    ["Offset of field: common_params_sampling::preserved_tokens"]
        [::std::mem::offset_of!(common_params_sampling, preserved_tokens) - 216usize];
    ["Offset of field: common_params_sampling::logit_bias"]
        [::std::mem::offset_of!(common_params_sampling, logit_bias) - 264usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK22common_params_sampling5printB5cxx11Ev"]
    pub fn common_params_sampling_print(this: *const common_params_sampling) -> std_string;
}
impl common_params_sampling {
    #[inline]
    pub unsafe fn print(&self) -> std_string {
        common_params_sampling_print(self)
    }
}
#[repr(C)]
pub struct common_params_model {
    pub path: std_string,
    pub url: std_string,
    pub hf_repo: std_string,
    pub hf_file: std_string,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of common_params_model"][::std::mem::size_of::<common_params_model>() - 128usize];
    ["Alignment of common_params_model"][::std::mem::align_of::<common_params_model>() - 8usize];
    ["Offset of field: common_params_model::path"]
        [::std::mem::offset_of!(common_params_model, path) - 0usize];
    ["Offset of field: common_params_model::url"]
        [::std::mem::offset_of!(common_params_model, url) - 32usize];
    ["Offset of field: common_params_model::hf_repo"]
        [::std::mem::offset_of!(common_params_model, hf_repo) - 64usize];
    ["Offset of field: common_params_model::hf_file"]
        [::std::mem::offset_of!(common_params_model, hf_file) - 96usize];
};
#[repr(C)]
pub struct common_params_speculative {
    pub devices: std_vector,
    pub n_ctx: i32,
    pub n_max: i32,
    pub n_min: i32,
    pub n_gpu_layers: i32,
    pub p_split: f32,
    pub p_min: f32,
    pub cpuparams: cpu_params,
    pub cpuparams_batch: cpu_params,
    pub model: common_params_model,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of common_params_speculative"]
        [::std::mem::size_of::<common_params_speculative>() - 1240usize];
    ["Alignment of common_params_speculative"]
        [::std::mem::align_of::<common_params_speculative>() - 8usize];
    ["Offset of field: common_params_speculative::devices"]
        [::std::mem::offset_of!(common_params_speculative, devices) - 0usize];
    ["Offset of field: common_params_speculative::n_ctx"]
        [::std::mem::offset_of!(common_params_speculative, n_ctx) - 24usize];
    ["Offset of field: common_params_speculative::n_max"]
        [::std::mem::offset_of!(common_params_speculative, n_max) - 28usize];
    ["Offset of field: common_params_speculative::n_min"]
        [::std::mem::offset_of!(common_params_speculative, n_min) - 32usize];
    ["Offset of field: common_params_speculative::n_gpu_layers"]
        [::std::mem::offset_of!(common_params_speculative, n_gpu_layers) - 36usize];
    ["Offset of field: common_params_speculative::p_split"]
        [::std::mem::offset_of!(common_params_speculative, p_split) - 40usize];
    ["Offset of field: common_params_speculative::p_min"]
        [::std::mem::offset_of!(common_params_speculative, p_min) - 44usize];
    ["Offset of field: common_params_speculative::cpuparams"]
        [::std::mem::offset_of!(common_params_speculative, cpuparams) - 48usize];
    ["Offset of field: common_params_speculative::cpuparams_batch"]
        [::std::mem::offset_of!(common_params_speculative, cpuparams_batch) - 580usize];
    ["Offset of field: common_params_speculative::model"]
        [::std::mem::offset_of!(common_params_speculative, model) - 1112usize];
};
#[repr(C)]
pub struct common_params_vocoder {
    pub model: common_params_model,
    pub speaker_file: std_string,
    pub use_guide_tokens: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of common_params_vocoder"][::std::mem::size_of::<common_params_vocoder>() - 168usize];
    ["Alignment of common_params_vocoder"]
        [::std::mem::align_of::<common_params_vocoder>() - 8usize];
    ["Offset of field: common_params_vocoder::model"]
        [::std::mem::offset_of!(common_params_vocoder, model) - 0usize];
    ["Offset of field: common_params_vocoder::speaker_file"]
        [::std::mem::offset_of!(common_params_vocoder, speaker_file) - 128usize];
    ["Offset of field: common_params_vocoder::use_guide_tokens"]
        [::std::mem::offset_of!(common_params_vocoder, use_guide_tokens) - 160usize];
};
pub const common_reasoning_format_COMMON_REASONING_FORMAT_NONE: common_reasoning_format = 0;
pub const common_reasoning_format_COMMON_REASONING_FORMAT_DEEPSEEK: common_reasoning_format = 1;
pub type common_reasoning_format = ::std::os::raw::c_uint;
#[repr(C)]
pub struct common_params {
    pub n_predict: i32,
    pub n_ctx: i32,
    pub n_batch: i32,
    pub n_ubatch: i32,
    pub n_keep: i32,
    pub n_chunks: i32,
    pub n_parallel: i32,
    pub n_sequences: i32,
    pub grp_attn_n: i32,
    pub grp_attn_w: i32,
    pub n_print: i32,
    pub rope_freq_base: f32,
    pub rope_freq_scale: f32,
    pub yarn_ext_factor: f32,
    pub yarn_attn_factor: f32,
    pub yarn_beta_fast: f32,
    pub yarn_beta_slow: f32,
    pub yarn_orig_ctx: i32,
    pub defrag_thold: f32,
    pub devices: std_vector,
    pub n_gpu_layers: i32,
    pub main_gpu: i32,
    pub tensor_split: [f32; 128usize],
    pub split_mode: llama_split_mode,
    pub cpuparams: cpu_params,
    pub cpuparams_batch: cpu_params,
    pub cb_eval: ggml_backend_sched_eval_callback,
    pub cb_eval_user_data: *mut ::std::os::raw::c_void,
    pub numa: ggml_numa_strategy,
    pub rope_scaling_type: llama_rope_scaling_type,
    pub pooling_type: llama_pooling_type,
    pub attention_type: llama_attention_type,
    pub sampling: common_params_sampling,
    pub speculative: common_params_speculative,
    pub vocoder: common_params_vocoder,
    pub model: common_params_model,
    pub model_alias: std_string,
    pub hf_token: std_string,
    pub prompt: std_string,
    pub system_prompt: std_string,
    pub prompt_file: std_string,
    pub path_prompt_cache: std_string,
    pub input_prefix: std_string,
    pub input_suffix: std_string,
    pub lookup_cache_static: std_string,
    pub lookup_cache_dynamic: std_string,
    pub logits_file: std_string,
    pub in_files: std_vector,
    pub antiprompt: std_vector,
    pub kv_overrides: std_vector,
    pub tensor_buft_overrides: std_vector,
    pub lora_init_without_apply: bool,
    pub lora_adapters: std_vector,
    pub control_vectors: std_vector,
    pub verbosity: i32,
    pub control_vector_layer_start: i32,
    pub control_vector_layer_end: i32,
    pub ppl_stride: i32,
    pub ppl_output_type: i32,
    pub hellaswag: bool,
    pub hellaswag_tasks: usize,
    pub winogrande: bool,
    pub winogrande_tasks: usize,
    pub multiple_choice: bool,
    pub multiple_choice_tasks: usize,
    pub kl_divergence: bool,
    pub usage: bool,
    pub completion: bool,
    pub use_color: bool,
    pub special: bool,
    pub interactive: bool,
    pub interactive_first: bool,
    pub prompt_cache_all: bool,
    pub prompt_cache_ro: bool,
    pub escape: bool,
    pub multiline_input: bool,
    pub simple_io: bool,
    pub cont_batching: bool,
    pub flash_attn: bool,
    pub no_perf: bool,
    pub ctx_shift: bool,
    pub input_prefix_bos: bool,
    pub logits_all: bool,
    pub use_mmap: bool,
    pub use_mlock: bool,
    pub verbose_prompt: bool,
    pub display_prompt: bool,
    pub dump_kv_cache: bool,
    pub no_kv_offload: bool,
    pub warmup: bool,
    pub check_tensors: bool,
    pub single_turn: bool,
    pub cache_type_k: ggml_type,
    pub cache_type_v: ggml_type,
    pub conversation_mode: common_conversation_mode,
    pub mmproj: common_params_model,
    pub mmproj_use_gpu: bool,
    pub no_mmproj: bool,
    pub image: std_vector,
    pub embedding: bool,
    pub embd_normalize: i32,
    pub embd_out: std_string,
    pub embd_sep: std_string,
    pub reranking: bool,
    pub port: i32,
    pub timeout_read: i32,
    pub timeout_write: i32,
    pub n_threads_http: i32,
    pub n_cache_reuse: i32,
    pub hostname: std_string,
    pub public_path: std_string,
    pub chat_template: std_string,
    pub use_jinja: bool,
    pub enable_chat_template: bool,
    pub reasoning_format: common_reasoning_format,
    pub api_keys: std_vector,
    pub ssl_file_key: std_string,
    pub ssl_file_cert: std_string,
    pub webui: bool,
    pub endpoint_slots: bool,
    pub endpoint_props: bool,
    pub endpoint_metrics: bool,
    pub log_json: bool,
    pub slot_save_path: std_string,
    pub slot_prompt_similarity: f32,
    pub is_pp_shared: bool,
    pub n_pp: std_vector,
    pub n_tg: std_vector,
    pub n_pl: std_vector,
    pub context_files: std_vector,
    pub chunk_size: i32,
    pub chunk_separator: std_string,
    pub n_junk: i32,
    pub i_pos: i32,
    pub n_out_freq: i32,
    pub n_save_freq: i32,
    pub i_chunk: i32,
    pub process_output: bool,
    pub compute_ppl: bool,
    pub n_pca_batch: ::std::os::raw::c_int,
    pub n_pca_iterations: ::std::os::raw::c_int,
    pub cvector_dimre_method: dimre_method,
    pub cvector_positive_file: std_string,
    pub cvector_negative_file: std_string,
    pub spm_infill: bool,
    pub batched_bench_output_jsonl: bool,
    pub out_file: std_string,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of common_params"][::std::mem::size_of::<common_params>() - 4936usize];
    ["Alignment of common_params"][::std::mem::align_of::<common_params>() - 8usize];
    ["Offset of field: common_params::n_predict"]
        [::std::mem::offset_of!(common_params, n_predict) - 0usize];
    ["Offset of field: common_params::n_ctx"]
        [::std::mem::offset_of!(common_params, n_ctx) - 4usize];
    ["Offset of field: common_params::n_batch"]
        [::std::mem::offset_of!(common_params, n_batch) - 8usize];
    ["Offset of field: common_params::n_ubatch"]
        [::std::mem::offset_of!(common_params, n_ubatch) - 12usize];
    ["Offset of field: common_params::n_keep"]
        [::std::mem::offset_of!(common_params, n_keep) - 16usize];
    ["Offset of field: common_params::n_chunks"]
        [::std::mem::offset_of!(common_params, n_chunks) - 20usize];
    ["Offset of field: common_params::n_parallel"]
        [::std::mem::offset_of!(common_params, n_parallel) - 24usize];
    ["Offset of field: common_params::n_sequences"]
        [::std::mem::offset_of!(common_params, n_sequences) - 28usize];
    ["Offset of field: common_params::grp_attn_n"]
        [::std::mem::offset_of!(common_params, grp_attn_n) - 32usize];
    ["Offset of field: common_params::grp_attn_w"]
        [::std::mem::offset_of!(common_params, grp_attn_w) - 36usize];
    ["Offset of field: common_params::n_print"]
        [::std::mem::offset_of!(common_params, n_print) - 40usize];
    ["Offset of field: common_params::rope_freq_base"]
        [::std::mem::offset_of!(common_params, rope_freq_base) - 44usize];
    ["Offset of field: common_params::rope_freq_scale"]
        [::std::mem::offset_of!(common_params, rope_freq_scale) - 48usize];
    ["Offset of field: common_params::yarn_ext_factor"]
        [::std::mem::offset_of!(common_params, yarn_ext_factor) - 52usize];
    ["Offset of field: common_params::yarn_attn_factor"]
        [::std::mem::offset_of!(common_params, yarn_attn_factor) - 56usize];
    ["Offset of field: common_params::yarn_beta_fast"]
        [::std::mem::offset_of!(common_params, yarn_beta_fast) - 60usize];
    ["Offset of field: common_params::yarn_beta_slow"]
        [::std::mem::offset_of!(common_params, yarn_beta_slow) - 64usize];
    ["Offset of field: common_params::yarn_orig_ctx"]
        [::std::mem::offset_of!(common_params, yarn_orig_ctx) - 68usize];
    ["Offset of field: common_params::defrag_thold"]
        [::std::mem::offset_of!(common_params, defrag_thold) - 72usize];
    ["Offset of field: common_params::devices"]
        [::std::mem::offset_of!(common_params, devices) - 80usize];
    ["Offset of field: common_params::n_gpu_layers"]
        [::std::mem::offset_of!(common_params, n_gpu_layers) - 104usize];
    ["Offset of field: common_params::main_gpu"]
        [::std::mem::offset_of!(common_params, main_gpu) - 108usize];
    ["Offset of field: common_params::tensor_split"]
        [::std::mem::offset_of!(common_params, tensor_split) - 112usize];
    ["Offset of field: common_params::split_mode"]
        [::std::mem::offset_of!(common_params, split_mode) - 624usize];
    ["Offset of field: common_params::cpuparams"]
        [::std::mem::offset_of!(common_params, cpuparams) - 628usize];
    ["Offset of field: common_params::cpuparams_batch"]
        [::std::mem::offset_of!(common_params, cpuparams_batch) - 1160usize];
    ["Offset of field: common_params::cb_eval"]
        [::std::mem::offset_of!(common_params, cb_eval) - 1696usize];
    ["Offset of field: common_params::cb_eval_user_data"]
        [::std::mem::offset_of!(common_params, cb_eval_user_data) - 1704usize];
    ["Offset of field: common_params::numa"]
        [::std::mem::offset_of!(common_params, numa) - 1712usize];
    ["Offset of field: common_params::rope_scaling_type"]
        [::std::mem::offset_of!(common_params, rope_scaling_type) - 1716usize];
    ["Offset of field: common_params::pooling_type"]
        [::std::mem::offset_of!(common_params, pooling_type) - 1720usize];
    ["Offset of field: common_params::attention_type"]
        [::std::mem::offset_of!(common_params, attention_type) - 1724usize];
    ["Offset of field: common_params::sampling"]
        [::std::mem::offset_of!(common_params, sampling) - 1728usize];
    ["Offset of field: common_params::speculative"]
        [::std::mem::offset_of!(common_params, speculative) - 2016usize];
    ["Offset of field: common_params::vocoder"]
        [::std::mem::offset_of!(common_params, vocoder) - 3256usize];
    ["Offset of field: common_params::model"]
        [::std::mem::offset_of!(common_params, model) - 3424usize];
    ["Offset of field: common_params::model_alias"]
        [::std::mem::offset_of!(common_params, model_alias) - 3552usize];
    ["Offset of field: common_params::hf_token"]
        [::std::mem::offset_of!(common_params, hf_token) - 3584usize];
    ["Offset of field: common_params::prompt"]
        [::std::mem::offset_of!(common_params, prompt) - 3616usize];
    ["Offset of field: common_params::system_prompt"]
        [::std::mem::offset_of!(common_params, system_prompt) - 3648usize];
    ["Offset of field: common_params::prompt_file"]
        [::std::mem::offset_of!(common_params, prompt_file) - 3680usize];
    ["Offset of field: common_params::path_prompt_cache"]
        [::std::mem::offset_of!(common_params, path_prompt_cache) - 3712usize];
    ["Offset of field: common_params::input_prefix"]
        [::std::mem::offset_of!(common_params, input_prefix) - 3744usize];
    ["Offset of field: common_params::input_suffix"]
        [::std::mem::offset_of!(common_params, input_suffix) - 3776usize];
    ["Offset of field: common_params::lookup_cache_static"]
        [::std::mem::offset_of!(common_params, lookup_cache_static) - 3808usize];
    ["Offset of field: common_params::lookup_cache_dynamic"]
        [::std::mem::offset_of!(common_params, lookup_cache_dynamic) - 3840usize];
    ["Offset of field: common_params::logits_file"]
        [::std::mem::offset_of!(common_params, logits_file) - 3872usize];
    ["Offset of field: common_params::in_files"]
        [::std::mem::offset_of!(common_params, in_files) - 3904usize];
    ["Offset of field: common_params::antiprompt"]
        [::std::mem::offset_of!(common_params, antiprompt) - 3928usize];
    ["Offset of field: common_params::kv_overrides"]
        [::std::mem::offset_of!(common_params, kv_overrides) - 3952usize];
    ["Offset of field: common_params::tensor_buft_overrides"]
        [::std::mem::offset_of!(common_params, tensor_buft_overrides) - 3976usize];
    ["Offset of field: common_params::lora_init_without_apply"]
        [::std::mem::offset_of!(common_params, lora_init_without_apply) - 4000usize];
    ["Offset of field: common_params::lora_adapters"]
        [::std::mem::offset_of!(common_params, lora_adapters) - 4008usize];
    ["Offset of field: common_params::control_vectors"]
        [::std::mem::offset_of!(common_params, control_vectors) - 4032usize];
    ["Offset of field: common_params::verbosity"]
        [::std::mem::offset_of!(common_params, verbosity) - 4056usize];
    ["Offset of field: common_params::control_vector_layer_start"]
        [::std::mem::offset_of!(common_params, control_vector_layer_start) - 4060usize];
    ["Offset of field: common_params::control_vector_layer_end"]
        [::std::mem::offset_of!(common_params, control_vector_layer_end) - 4064usize];
    ["Offset of field: common_params::ppl_stride"]
        [::std::mem::offset_of!(common_params, ppl_stride) - 4068usize];
    ["Offset of field: common_params::ppl_output_type"]
        [::std::mem::offset_of!(common_params, ppl_output_type) - 4072usize];
    ["Offset of field: common_params::hellaswag"]
        [::std::mem::offset_of!(common_params, hellaswag) - 4076usize];
    ["Offset of field: common_params::hellaswag_tasks"]
        [::std::mem::offset_of!(common_params, hellaswag_tasks) - 4080usize];
    ["Offset of field: common_params::winogrande"]
        [::std::mem::offset_of!(common_params, winogrande) - 4088usize];
    ["Offset of field: common_params::winogrande_tasks"]
        [::std::mem::offset_of!(common_params, winogrande_tasks) - 4096usize];
    ["Offset of field: common_params::multiple_choice"]
        [::std::mem::offset_of!(common_params, multiple_choice) - 4104usize];
    ["Offset of field: common_params::multiple_choice_tasks"]
        [::std::mem::offset_of!(common_params, multiple_choice_tasks) - 4112usize];
    ["Offset of field: common_params::kl_divergence"]
        [::std::mem::offset_of!(common_params, kl_divergence) - 4120usize];
    ["Offset of field: common_params::usage"]
        [::std::mem::offset_of!(common_params, usage) - 4121usize];
    ["Offset of field: common_params::completion"]
        [::std::mem::offset_of!(common_params, completion) - 4122usize];
    ["Offset of field: common_params::use_color"]
        [::std::mem::offset_of!(common_params, use_color) - 4123usize];
    ["Offset of field: common_params::special"]
        [::std::mem::offset_of!(common_params, special) - 4124usize];
    ["Offset of field: common_params::interactive"]
        [::std::mem::offset_of!(common_params, interactive) - 4125usize];
    ["Offset of field: common_params::interactive_first"]
        [::std::mem::offset_of!(common_params, interactive_first) - 4126usize];
    ["Offset of field: common_params::prompt_cache_all"]
        [::std::mem::offset_of!(common_params, prompt_cache_all) - 4127usize];
    ["Offset of field: common_params::prompt_cache_ro"]
        [::std::mem::offset_of!(common_params, prompt_cache_ro) - 4128usize];
    ["Offset of field: common_params::escape"]
        [::std::mem::offset_of!(common_params, escape) - 4129usize];
    ["Offset of field: common_params::multiline_input"]
        [::std::mem::offset_of!(common_params, multiline_input) - 4130usize];
    ["Offset of field: common_params::simple_io"]
        [::std::mem::offset_of!(common_params, simple_io) - 4131usize];
    ["Offset of field: common_params::cont_batching"]
        [::std::mem::offset_of!(common_params, cont_batching) - 4132usize];
    ["Offset of field: common_params::flash_attn"]
        [::std::mem::offset_of!(common_params, flash_attn) - 4133usize];
    ["Offset of field: common_params::no_perf"]
        [::std::mem::offset_of!(common_params, no_perf) - 4134usize];
    ["Offset of field: common_params::ctx_shift"]
        [::std::mem::offset_of!(common_params, ctx_shift) - 4135usize];
    ["Offset of field: common_params::input_prefix_bos"]
        [::std::mem::offset_of!(common_params, input_prefix_bos) - 4136usize];
    ["Offset of field: common_params::logits_all"]
        [::std::mem::offset_of!(common_params, logits_all) - 4137usize];
    ["Offset of field: common_params::use_mmap"]
        [::std::mem::offset_of!(common_params, use_mmap) - 4138usize];
    ["Offset of field: common_params::use_mlock"]
        [::std::mem::offset_of!(common_params, use_mlock) - 4139usize];
    ["Offset of field: common_params::verbose_prompt"]
        [::std::mem::offset_of!(common_params, verbose_prompt) - 4140usize];
    ["Offset of field: common_params::display_prompt"]
        [::std::mem::offset_of!(common_params, display_prompt) - 4141usize];
    ["Offset of field: common_params::dump_kv_cache"]
        [::std::mem::offset_of!(common_params, dump_kv_cache) - 4142usize];
    ["Offset of field: common_params::no_kv_offload"]
        [::std::mem::offset_of!(common_params, no_kv_offload) - 4143usize];
    ["Offset of field: common_params::warmup"]
        [::std::mem::offset_of!(common_params, warmup) - 4144usize];
    ["Offset of field: common_params::check_tensors"]
        [::std::mem::offset_of!(common_params, check_tensors) - 4145usize];
    ["Offset of field: common_params::single_turn"]
        [::std::mem::offset_of!(common_params, single_turn) - 4146usize];
    ["Offset of field: common_params::cache_type_k"]
        [::std::mem::offset_of!(common_params, cache_type_k) - 4148usize];
    ["Offset of field: common_params::cache_type_v"]
        [::std::mem::offset_of!(common_params, cache_type_v) - 4152usize];
    ["Offset of field: common_params::conversation_mode"]
        [::std::mem::offset_of!(common_params, conversation_mode) - 4156usize];
    ["Offset of field: common_params::mmproj"]
        [::std::mem::offset_of!(common_params, mmproj) - 4160usize];
    ["Offset of field: common_params::mmproj_use_gpu"]
        [::std::mem::offset_of!(common_params, mmproj_use_gpu) - 4288usize];
    ["Offset of field: common_params::no_mmproj"]
        [::std::mem::offset_of!(common_params, no_mmproj) - 4289usize];
    ["Offset of field: common_params::image"]
        [::std::mem::offset_of!(common_params, image) - 4296usize];
    ["Offset of field: common_params::embedding"]
        [::std::mem::offset_of!(common_params, embedding) - 4320usize];
    ["Offset of field: common_params::embd_normalize"]
        [::std::mem::offset_of!(common_params, embd_normalize) - 4324usize];
    ["Offset of field: common_params::embd_out"]
        [::std::mem::offset_of!(common_params, embd_out) - 4328usize];
    ["Offset of field: common_params::embd_sep"]
        [::std::mem::offset_of!(common_params, embd_sep) - 4360usize];
    ["Offset of field: common_params::reranking"]
        [::std::mem::offset_of!(common_params, reranking) - 4392usize];
    ["Offset of field: common_params::port"]
        [::std::mem::offset_of!(common_params, port) - 4396usize];
    ["Offset of field: common_params::timeout_read"]
        [::std::mem::offset_of!(common_params, timeout_read) - 4400usize];
    ["Offset of field: common_params::timeout_write"]
        [::std::mem::offset_of!(common_params, timeout_write) - 4404usize];
    ["Offset of field: common_params::n_threads_http"]
        [::std::mem::offset_of!(common_params, n_threads_http) - 4408usize];
    ["Offset of field: common_params::n_cache_reuse"]
        [::std::mem::offset_of!(common_params, n_cache_reuse) - 4412usize];
    ["Offset of field: common_params::hostname"]
        [::std::mem::offset_of!(common_params, hostname) - 4416usize];
    ["Offset of field: common_params::public_path"]
        [::std::mem::offset_of!(common_params, public_path) - 4448usize];
    ["Offset of field: common_params::chat_template"]
        [::std::mem::offset_of!(common_params, chat_template) - 4480usize];
    ["Offset of field: common_params::use_jinja"]
        [::std::mem::offset_of!(common_params, use_jinja) - 4512usize];
    ["Offset of field: common_params::enable_chat_template"]
        [::std::mem::offset_of!(common_params, enable_chat_template) - 4513usize];
    ["Offset of field: common_params::reasoning_format"]
        [::std::mem::offset_of!(common_params, reasoning_format) - 4516usize];
    ["Offset of field: common_params::api_keys"]
        [::std::mem::offset_of!(common_params, api_keys) - 4520usize];
    ["Offset of field: common_params::ssl_file_key"]
        [::std::mem::offset_of!(common_params, ssl_file_key) - 4544usize];
    ["Offset of field: common_params::ssl_file_cert"]
        [::std::mem::offset_of!(common_params, ssl_file_cert) - 4576usize];
    ["Offset of field: common_params::webui"]
        [::std::mem::offset_of!(common_params, webui) - 4608usize];
    ["Offset of field: common_params::endpoint_slots"]
        [::std::mem::offset_of!(common_params, endpoint_slots) - 4609usize];
    ["Offset of field: common_params::endpoint_props"]
        [::std::mem::offset_of!(common_params, endpoint_props) - 4610usize];
    ["Offset of field: common_params::endpoint_metrics"]
        [::std::mem::offset_of!(common_params, endpoint_metrics) - 4611usize];
    ["Offset of field: common_params::log_json"]
        [::std::mem::offset_of!(common_params, log_json) - 4612usize];
    ["Offset of field: common_params::slot_save_path"]
        [::std::mem::offset_of!(common_params, slot_save_path) - 4616usize];
    ["Offset of field: common_params::slot_prompt_similarity"]
        [::std::mem::offset_of!(common_params, slot_prompt_similarity) - 4648usize];
    ["Offset of field: common_params::is_pp_shared"]
        [::std::mem::offset_of!(common_params, is_pp_shared) - 4652usize];
    ["Offset of field: common_params::n_pp"]
        [::std::mem::offset_of!(common_params, n_pp) - 4656usize];
    ["Offset of field: common_params::n_tg"]
        [::std::mem::offset_of!(common_params, n_tg) - 4680usize];
    ["Offset of field: common_params::n_pl"]
        [::std::mem::offset_of!(common_params, n_pl) - 4704usize];
    ["Offset of field: common_params::context_files"]
        [::std::mem::offset_of!(common_params, context_files) - 4728usize];
    ["Offset of field: common_params::chunk_size"]
        [::std::mem::offset_of!(common_params, chunk_size) - 4752usize];
    ["Offset of field: common_params::chunk_separator"]
        [::std::mem::offset_of!(common_params, chunk_separator) - 4760usize];
    ["Offset of field: common_params::n_junk"]
        [::std::mem::offset_of!(common_params, n_junk) - 4792usize];
    ["Offset of field: common_params::i_pos"]
        [::std::mem::offset_of!(common_params, i_pos) - 4796usize];
    ["Offset of field: common_params::n_out_freq"]
        [::std::mem::offset_of!(common_params, n_out_freq) - 4800usize];
    ["Offset of field: common_params::n_save_freq"]
        [::std::mem::offset_of!(common_params, n_save_freq) - 4804usize];
    ["Offset of field: common_params::i_chunk"]
        [::std::mem::offset_of!(common_params, i_chunk) - 4808usize];
    ["Offset of field: common_params::process_output"]
        [::std::mem::offset_of!(common_params, process_output) - 4812usize];
    ["Offset of field: common_params::compute_ppl"]
        [::std::mem::offset_of!(common_params, compute_ppl) - 4813usize];
    ["Offset of field: common_params::n_pca_batch"]
        [::std::mem::offset_of!(common_params, n_pca_batch) - 4816usize];
    ["Offset of field: common_params::n_pca_iterations"]
        [::std::mem::offset_of!(common_params, n_pca_iterations) - 4820usize];
    ["Offset of field: common_params::cvector_dimre_method"]
        [::std::mem::offset_of!(common_params, cvector_dimre_method) - 4824usize];
    ["Offset of field: common_params::cvector_positive_file"]
        [::std::mem::offset_of!(common_params, cvector_positive_file) - 4832usize];
    ["Offset of field: common_params::cvector_negative_file"]
        [::std::mem::offset_of!(common_params, cvector_negative_file) - 4864usize];
    ["Offset of field: common_params::spm_infill"]
        [::std::mem::offset_of!(common_params, spm_infill) - 4896usize];
    ["Offset of field: common_params::batched_bench_output_jsonl"]
        [::std::mem::offset_of!(common_params, batched_bench_output_jsonl) - 4897usize];
    ["Offset of field: common_params::out_file"]
        [::std::mem::offset_of!(common_params, out_file) - 4904usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_Z11common_initv"]
    pub fn common_init();
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z29common_params_get_system_infoB5cxx11RK13common_params"]
    pub fn common_params_get_system_info(params: *const common_params) -> std_string;
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z15parse_cpu_rangeRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERA512_b"]
    pub fn parse_cpu_range(range: *const std_string, boolmask: *mut [bool; 512usize]) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z14parse_cpu_maskRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERA512_b"]
    pub fn parse_cpu_mask(mask: *const std_string, boolmask: *mut [bool; 512usize]) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z22postprocess_cpu_paramsR10cpu_paramsPKS_"]
    pub fn postprocess_cpu_params(cpuparams: *mut cpu_params, role_model: *const cpu_params);
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z20set_process_priority19ggml_sched_priority"]
    pub fn set_process_priority(prio: ggml_sched_priority) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z13string_formatB5cxx11PKcz"]
    pub fn string_format(fmt: *const ::std::os::raw::c_char, ...) -> std_string;
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z12string_stripRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn string_strip(str_: *const std_string) -> std_string;
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z29string_get_sortable_timestampB5cxx11v"]
    pub fn string_get_sortable_timestamp() -> std_string;
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z11string_joinRKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EERKS5_"]
    pub fn string_join(values: *const std_vector, separator: *const std_string) -> std_string;
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z12string_splitRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_"]
    pub fn string_split(str_: *const std_string, delimiter: *const std_string) -> std_vector;
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z13string_repeatRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm"]
    pub fn string_repeat(str_: *const std_string, n: usize) -> std_string;
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z18string_replace_allRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKS4_S7_"]
    pub fn string_replace_all(
        s: *mut std_string,
        search: *const std_string,
        replace: *const std_string,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z12regex_escapeRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn regex_escape(s: *const std_string) -> std_string;
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z24string_parse_kv_overridePKcRSt6vectorI23llama_model_kv_overrideSaIS2_EE"]
    pub fn string_parse_kv_override(
        data: *const ::std::os::raw::c_char,
        overrides: *mut std_vector,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z22string_process_escapesRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn string_process_escapes(input: *mut std_string);
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z11string_fromB5cxx11b"]
    pub fn string_from(value: bool) -> std_string;
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z11string_fromB5cxx11RKSt6vectorIiSaIiEE"]
    pub fn string_from1(values: *const std_vector) -> std_string;
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z11string_fromB5cxx11PK13llama_contextRKSt6vectorIiSaIiEE"]
    pub fn string_from2(ctx: *const llama_context, tokens: *const std_vector) -> std_string;
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z11string_fromB5cxx11PK13llama_contextRK11llama_batch"]
    pub fn string_from3(ctx: *const llama_context, batch: *const llama_batch) -> std_string;
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z20fs_validate_filenameRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn fs_validate_filename(filename: *const std_string) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z32fs_create_directory_with_parentsRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn fs_create_directory_with_parents(path: *const std_string) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z22fs_get_cache_directoryB5cxx11v"]
    pub fn fs_get_cache_directory() -> std_string;
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z17fs_get_cache_fileRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn fs_get_cache_file(filename: *const std_string) -> std_string;
}
#[repr(C)]
pub struct common_init_result {
    pub model: llama_model_ptr,
    pub context: llama_context_ptr,
    pub lora: std_vector,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of common_init_result"][::std::mem::size_of::<common_init_result>() - 40usize];
    ["Alignment of common_init_result"][::std::mem::align_of::<common_init_result>() - 8usize];
    ["Offset of field: common_init_result::model"]
        [::std::mem::offset_of!(common_init_result, model) - 0usize];
    ["Offset of field: common_init_result::context"]
        [::std::mem::offset_of!(common_init_result, context) - 8usize];
    ["Offset of field: common_init_result::lora"]
        [::std::mem::offset_of!(common_init_result, lora) - 16usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_Z23common_init_from_paramsR13common_params"]
    pub fn common_init_from_params(params: *mut common_params) -> common_init_result;
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z28common_model_params_to_llamaR13common_params"]
    pub fn common_model_params_to_llama(params: *mut common_params) -> llama_model_params;
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z30common_context_params_to_llamaRK13common_params"]
    pub fn common_context_params_to_llama(params: *const common_params) -> llama_context_params;
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z38ggml_threadpool_params_from_cpu_paramsRK10cpu_params"]
    pub fn ggml_threadpool_params_from_cpu_params(
        params: *const cpu_params,
    ) -> ggml_threadpool_params;
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z23common_set_adapter_loraP13llama_contextRSt6vectorI24common_adapter_lora_infoSaIS2_EE"]
    pub fn common_set_adapter_lora(ctx: *mut llama_context, lora: *mut std_vector);
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z18get_model_endpointB5cxx11v"]
    pub fn get_model_endpoint() -> std_string;
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z18common_batch_clearR11llama_batch"]
    pub fn common_batch_clear(batch: *mut llama_batch);
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z16common_batch_addR11llama_batchiiRKSt6vectorIiSaIiEEb"]
    pub fn common_batch_add(
        batch: *mut llama_batch,
        id: llama_token,
        pos: llama_pos,
        seq_ids: *const std_vector,
        logits: bool,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z10common_lcpRKSt6vectorIiSaIiEES3_"]
    pub fn common_lcp(a: *const llama_tokens, b: *const llama_tokens) -> usize;
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z10common_lcsRKSt6vectorIiSaIiEES3_"]
    pub fn common_lcs(a: *const llama_tokens, b: *const llama_tokens) -> usize;
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z15common_tokenizePK13llama_contextRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbb"]
    pub fn common_tokenize(
        ctx: *const llama_context,
        text: *const std_string,
        add_special: bool,
        parse_special: bool,
    ) -> std_vector;
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z15common_tokenizePK11llama_vocabRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbb"]
    pub fn common_tokenize1(
        vocab: *const llama_vocab,
        text: *const std_string,
        add_special: bool,
        parse_special: bool,
    ) -> std_vector;
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z21common_token_to_pieceB5cxx11PK13llama_contextib"]
    pub fn common_token_to_piece(
        ctx: *const llama_context,
        token: llama_token,
        special: bool,
    ) -> std_string;
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z21common_token_to_pieceB5cxx11PK11llama_vocabib"]
    pub fn common_token_to_piece1(
        vocab: *const llama_vocab,
        token: llama_token,
        special: bool,
    ) -> std_string;
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z17common_detokenizeB5cxx11PK13llama_contextRKSt6vectorIiSaIiEEb"]
    pub fn common_detokenize(
        ctx: *const llama_context,
        tokens: *const std_vector,
        special: bool,
    ) -> std_string;
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z17common_detokenizeB5cxx11PK11llama_vocabRKSt6vectorIiSaIiEEb"]
    pub fn common_detokenize1(
        vocab: *const llama_vocab,
        tokens: *const std_vector,
        special: bool,
    ) -> std_string;
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z25common_kv_cache_dump_viewRK19llama_kv_cache_viewi"]
    pub fn common_kv_cache_dump_view(
        view: *const llama_kv_cache_view,
        row_size: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z30common_kv_cache_dump_view_seqsRK19llama_kv_cache_viewi"]
    pub fn common_kv_cache_dump_view_seqs(
        view: *const llama_kv_cache_view,
        row_size: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z21common_embd_normalizePKfPfii"]
    pub fn common_embd_normalize(
        inp: *const f32,
        out: *mut f32,
        n: ::std::os::raw::c_int,
        embd_norm: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z26common_embd_similarity_cosPKfS0_i"]
    pub fn common_embd_similarity_cos(
        embd1: *const f32,
        embd2: *const f32,
        n: ::std::os::raw::c_int,
    ) -> f32;
}
#[repr(C)]
pub struct common_control_vector_data {
    pub n_embd: ::std::os::raw::c_int,
    pub data: std_vector,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of common_control_vector_data"]
        [::std::mem::size_of::<common_control_vector_data>() - 32usize];
    ["Alignment of common_control_vector_data"]
        [::std::mem::align_of::<common_control_vector_data>() - 8usize];
    ["Offset of field: common_control_vector_data::n_embd"]
        [::std::mem::offset_of!(common_control_vector_data, n_embd) - 0usize];
    ["Offset of field: common_control_vector_data::data"]
        [::std::mem::offset_of!(common_control_vector_data, data) - 8usize];
};
#[repr(C)]
pub struct common_control_vector_load_info {
    pub strength: f32,
    pub fname: std_string,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of common_control_vector_load_info"]
        [::std::mem::size_of::<common_control_vector_load_info>() - 40usize];
    ["Alignment of common_control_vector_load_info"]
        [::std::mem::align_of::<common_control_vector_load_info>() - 8usize];
    ["Offset of field: common_control_vector_load_info::strength"]
        [::std::mem::offset_of!(common_control_vector_load_info, strength) - 0usize];
    ["Offset of field: common_control_vector_load_info::fname"]
        [::std::mem::offset_of!(common_control_vector_load_info, fname) - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_Z26common_control_vector_loadRKSt6vectorI31common_control_vector_load_infoSaIS0_EE"]
    pub fn common_control_vector_load(load_infos: *const std_vector) -> common_control_vector_data;
}
pub const _bindgen_mod_id_30799_LLM_KV_SPLIT_NO: &[u8; 9] = b"split.no\0";
pub const _bindgen_mod_id_30799_LLM_KV_SPLIT_COUNT: &[u8; 12] = b"split.count\0";
pub const _bindgen_mod_id_30799_LLM_KV_SPLIT_TENSORS_COUNT: &[u8; 20] = b"split.tensors.count\0";
#[repr(C)]
pub struct common_arg {
    pub examples: std_set,
    pub excludes: std_set,
    pub args: std_vector,
    pub value_hint: *const ::std::os::raw::c_char,
    pub value_hint_2: *const ::std::os::raw::c_char,
    pub env: *const ::std::os::raw::c_char,
    pub help: std_string,
    pub is_sparam: bool,
    pub handler_void: ::std::option::Option<unsafe extern "C" fn(params: *mut common_params)>,
    pub handler_string: ::std::option::Option<
        unsafe extern "C" fn(params: *mut common_params, arg1: *const std_string),
    >,
    pub handler_str_str: ::std::option::Option<
        unsafe extern "C" fn(
            params: *mut common_params,
            arg1: *const std_string,
            arg2: *const std_string,
        ),
    >,
    pub handler_int: ::std::option::Option<
        unsafe extern "C" fn(params: *mut common_params, arg1: ::std::os::raw::c_int),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of common_arg"][::std::mem::size_of::<common_arg>() - 216usize];
    ["Alignment of common_arg"][::std::mem::align_of::<common_arg>() - 8usize];
    ["Offset of field: common_arg::examples"]
        [::std::mem::offset_of!(common_arg, examples) - 0usize];
    ["Offset of field: common_arg::excludes"]
        [::std::mem::offset_of!(common_arg, excludes) - 48usize];
    ["Offset of field: common_arg::args"][::std::mem::offset_of!(common_arg, args) - 96usize];
    ["Offset of field: common_arg::value_hint"]
        [::std::mem::offset_of!(common_arg, value_hint) - 120usize];
    ["Offset of field: common_arg::value_hint_2"]
        [::std::mem::offset_of!(common_arg, value_hint_2) - 128usize];
    ["Offset of field: common_arg::env"][::std::mem::offset_of!(common_arg, env) - 136usize];
    ["Offset of field: common_arg::help"][::std::mem::offset_of!(common_arg, help) - 144usize];
    ["Offset of field: common_arg::is_sparam"]
        [::std::mem::offset_of!(common_arg, is_sparam) - 176usize];
    ["Offset of field: common_arg::handler_void"]
        [::std::mem::offset_of!(common_arg, handler_void) - 184usize];
    ["Offset of field: common_arg::handler_string"]
        [::std::mem::offset_of!(common_arg, handler_string) - 192usize];
    ["Offset of field: common_arg::handler_str_str"]
        [::std::mem::offset_of!(common_arg, handler_str_str) - 200usize];
    ["Offset of field: common_arg::handler_int"]
        [::std::mem::offset_of!(common_arg, handler_int) - 208usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZN10common_arg12set_examplesESt16initializer_listI13llama_exampleE"]
    pub fn common_arg_set_examples(
        this: *mut common_arg,
        examples: std_initializer_list<llama_example>,
    ) -> *mut common_arg;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN10common_arg12set_excludesESt16initializer_listI13llama_exampleE"]
    pub fn common_arg_set_excludes(
        this: *mut common_arg,
        excludes: std_initializer_list<llama_example>,
    ) -> *mut common_arg;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN10common_arg7set_envEPKc"]
    pub fn common_arg_set_env(
        this: *mut common_arg,
        env: *const ::std::os::raw::c_char,
    ) -> *mut common_arg;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN10common_arg10set_sparamEv"]
    pub fn common_arg_set_sparam(this: *mut common_arg) -> *mut common_arg;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN10common_arg10in_exampleE13llama_example"]
    pub fn common_arg_in_example(this: *mut common_arg, ex: llama_example) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN10common_arg10is_excludeE13llama_example"]
    pub fn common_arg_is_exclude(this: *mut common_arg, ex: llama_example) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN10common_arg18get_value_from_envERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn common_arg_get_value_from_env(this: *mut common_arg, output: *mut std_string) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN10common_arg18has_value_from_envEv"]
    pub fn common_arg_has_value_from_env(this: *mut common_arg) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN10common_arg9to_stringB5cxx11Ev"]
    pub fn common_arg_to_string(this: *mut common_arg) -> std_string;
}
impl common_arg {
    #[inline]
    pub unsafe fn set_examples(
        &mut self,
        examples: std_initializer_list<llama_example>,
    ) -> *mut common_arg {
        common_arg_set_examples(self, examples)
    }
    #[inline]
    pub unsafe fn set_excludes(
        &mut self,
        excludes: std_initializer_list<llama_example>,
    ) -> *mut common_arg {
        common_arg_set_excludes(self, excludes)
    }
    #[inline]
    pub unsafe fn set_env(&mut self, env: *const ::std::os::raw::c_char) -> *mut common_arg {
        common_arg_set_env(self, env)
    }
    #[inline]
    pub unsafe fn set_sparam(&mut self) -> *mut common_arg {
        common_arg_set_sparam(self)
    }
    #[inline]
    pub unsafe fn in_example(&mut self, ex: llama_example) -> bool {
        common_arg_in_example(self, ex)
    }
    #[inline]
    pub unsafe fn is_exclude(&mut self, ex: llama_example) -> bool {
        common_arg_is_exclude(self, ex)
    }
    #[inline]
    pub unsafe fn get_value_from_env(&mut self, output: *mut std_string) -> bool {
        common_arg_get_value_from_env(self, output)
    }
    #[inline]
    pub unsafe fn has_value_from_env(&mut self) -> bool {
        common_arg_has_value_from_env(self)
    }
    #[inline]
    pub unsafe fn to_string(&mut self) -> std_string {
        common_arg_to_string(self)
    }
}
#[repr(C)]
pub struct common_params_context {
    pub ex: llama_example,
    pub params: *mut common_params,
    pub options: std_vector,
    pub print_usage: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: *mut *mut ::std::os::raw::c_char),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of common_params_context"][::std::mem::size_of::<common_params_context>() - 48usize];
    ["Alignment of common_params_context"]
        [::std::mem::align_of::<common_params_context>() - 8usize];
    ["Offset of field: common_params_context::ex"]
        [::std::mem::offset_of!(common_params_context, ex) - 0usize];
    ["Offset of field: common_params_context::params"]
        [::std::mem::offset_of!(common_params_context, params) - 8usize];
    ["Offset of field: common_params_context::options"]
        [::std::mem::offset_of!(common_params_context, options) - 16usize];
    ["Offset of field: common_params_context::print_usage"]
        [::std::mem::offset_of!(common_params_context, print_usage) - 40usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_Z19common_params_parseiPPcR13common_params13llama_examplePFviS0_E"]
    pub fn common_params_parse(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        params: *mut common_params,
        ex: llama_example,
        print_usage: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *mut *mut ::std::os::raw::c_char,
            ),
        >,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z25common_params_parser_initR13common_params13llama_examplePFviPPcE"]
    pub fn common_params_parser_init(
        params: *mut common_params,
        ex: llama_example,
        print_usage: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *mut *mut ::std::os::raw::c_char,
            ),
        >,
    ) -> common_params_context;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_1 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_2 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_3 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_4 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_5 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_6 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_7 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_8 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_9 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_10 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_11 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_12 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_13 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_14 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_15 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_16 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_17 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_18 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_19 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_20 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_21 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_22 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_23 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_24 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_25 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_26 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_27 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_28 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_29 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_30 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_31 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_32 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_33 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_34 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_35 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_36 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_37 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_38 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_39 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_40 {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0"] [:: std :: mem :: size_of :: < std_iterator > () - 1usize] ;
    ["Align of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0"] [:: std :: mem :: align_of :: < std_iterator > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0"] [:: std :: mem :: size_of :: < std_iterator > () - 1usize] ;
    ["Align of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0"] [:: std :: mem :: align_of :: < std_iterator > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0"] [:: std :: mem :: size_of :: < std_iterator > () - 1usize] ;
    ["Align of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0"] [:: std :: mem :: align_of :: < std_iterator > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_void_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_void_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0"] [:: std :: mem :: size_of :: < std_iterator > () - 1usize] ;
    ["Align of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0"] [:: std :: mem :: align_of :: < std_iterator > () - 1usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_41 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_42 {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_long_double_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_long_double_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < u32 > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char16_t_std_char_traits_open1_char16_t_close1_std_allocator_open1_char16_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < u16 > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_char16_t_std_char_traits_open1_char16_t_close1_std_allocator_open1_char16_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < u16 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char16_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char16_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char32_t_std_char_traits_open1_char32_t_close1_std_allocator_open1_char32_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < u32 > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_char32_t_std_char_traits_open1_char32_t_close1_std_allocator_open1_char32_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char32_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char32_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::std::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::std::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::std::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::std::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::std::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::std::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_ios_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_ios < :: std :: os :: raw :: c_char > > () - 264usize] ;
    ["Align of template specialization: std_basic_ios_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_ios < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_streambuf_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_streambuf < :: std :: os :: raw :: c_char > > () - 64usize] ;
    ["Align of template specialization: std_basic_streambuf_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_streambuf < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_istream_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_istream < :: std :: os :: raw :: c_char > > () - 280usize] ;
    ["Align of template specialization: std_basic_istream_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_istream < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_ostream_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_ostream < :: std :: os :: raw :: c_char > > () - 272usize] ;
    ["Align of template specialization: std_basic_ostream_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_ostream < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_iostream_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_iostream < :: std :: os :: raw :: c_char > > () - 288usize] ;
    ["Align of template specialization: std_basic_iostream_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_iostream < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_stringbuf_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_stringbuf < :: std :: os :: raw :: c_char > > () - 104usize] ;
    ["Align of template specialization: std_basic_stringbuf_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_stringbuf < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_istringstream_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_istringstream < :: std :: os :: raw :: c_char > > () - 384usize] ;
    ["Align of template specialization: std_basic_istringstream_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_istringstream < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_ostringstream_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_ostringstream < :: std :: os :: raw :: c_char > > () - 376usize] ;
    ["Align of template specialization: std_basic_ostringstream_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_ostringstream < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_stringstream_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_stringstream < :: std :: os :: raw :: c_char > > () - 392usize] ;
    ["Align of template specialization: std_basic_stringstream_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_stringstream < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_ios_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_ios < u32 > > () - 264usize] ;
    ["Align of template specialization: std_basic_ios_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_ios < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_streambuf_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_streambuf < u32 > > () - 64usize] ;
    ["Align of template specialization: std_basic_streambuf_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_streambuf < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_istream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_istream < u32 > > () - 280usize] ;
    ["Align of template specialization: std_basic_istream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_istream < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_ostream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_ostream < u32 > > () - 272usize] ;
    ["Align of template specialization: std_basic_ostream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_ostream < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_iostream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_iostream < u32 > > () - 288usize] ;
    ["Align of template specialization: std_basic_iostream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_iostream < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_stringbuf_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_stringbuf < u32 > > () - 104usize] ;
    ["Align of template specialization: std_basic_stringbuf_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_stringbuf < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_istringstream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_istringstream < u32 > > () - 384usize] ;
    ["Align of template specialization: std_basic_istringstream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_istringstream < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_ostringstream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_ostringstream < u32 > > () - 376usize] ;
    ["Align of template specialization: std_basic_ostringstream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_ostringstream < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_stringstream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_stringstream < u32 > > () - 392usize] ;
    ["Align of template specialization: std_basic_stringstream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_stringstream < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_53 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_backend_buffer {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_unique_ptr_open0_llama_model_llama_model_deleter_close0"] [:: std :: mem :: size_of :: < std_unique_ptr > () - 8usize] ;
    ["Align of template specialization: std_unique_ptr_open0_llama_model_llama_model_deleter_close0"] [:: std :: mem :: align_of :: < std_unique_ptr > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_unique_ptr_open0_llama_context_llama_context_deleter_close0"] [:: std :: mem :: size_of :: < std_unique_ptr > () - 8usize] ;
    ["Align of template specialization: std_unique_ptr_open0_llama_context_llama_context_deleter_close0"] [:: std :: mem :: align_of :: < std_unique_ptr > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_view_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string_view < :: std :: os :: raw :: c_char > > () - 16usize] ;
    ["Align of template specialization: std_basic_string_view_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string_view < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_view_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string_view < u32 > > () - 16usize] ;
    ["Align of template specialization: std_basic_string_view_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string_view < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_view_open0_char16_t_std_char_traits_open1_char16_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string_view < u16 > > () - 16usize] ;
    ["Align of template specialization: std_basic_string_view_open0_char16_t_std_char_traits_open1_char16_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string_view < u16 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_view_open0_char32_t_std_char_traits_open1_char32_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string_view < u32 > > () - 16usize] ;
    ["Align of template specialization: std_basic_string_view_open0_char32_t_std_char_traits_open1_char32_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string_view < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_view_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string_view < :: std :: os :: raw :: c_char > > () - 16usize] ;
    ["Align of template specialization: std_basic_string_view_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string_view < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_std_basic_string_view_open1_char_std_char_traits_open2_char_close2_close1_close0"] [:: std :: mem :: size_of :: < std_hash > () - 1usize] ;
    ["Align of template specialization: std_hash_open0_std_basic_string_view_open1_char_std_char_traits_open2_char_close2_close1_close0"] [:: std :: mem :: align_of :: < std_hash > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_view_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string_view < :: std :: os :: raw :: c_char > > () - 16usize] ;
    ["Align of template specialization: std_basic_string_view_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string_view < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_view_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string_view < u32 > > () - 16usize] ;
    ["Align of template specialization: std_basic_string_view_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string_view < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_std_basic_string_view_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0"] [:: std :: mem :: size_of :: < std_hash > () - 1usize] ;
    ["Align of template specialization: std_hash_open0_std_basic_string_view_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0"] [:: std :: mem :: align_of :: < std_hash > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_view_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string_view < u32 > > () - 16usize] ;
    ["Align of template specialization: std_basic_string_view_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string_view < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_view_open0_char16_t_std_char_traits_open1_char16_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string_view < u16 > > () - 16usize] ;
    ["Align of template specialization: std_basic_string_view_open0_char16_t_std_char_traits_open1_char16_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string_view < u16 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_std_basic_string_view_open1_char16_t_std_char_traits_open2_char16_t_close2_close1_close0"] [:: std :: mem :: size_of :: < std_hash > () - 1usize] ;
    ["Align of template specialization: std_hash_open0_std_basic_string_view_open1_char16_t_std_char_traits_open2_char16_t_close2_close1_close0"] [:: std :: mem :: align_of :: < std_hash > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_view_open0_char16_t_std_char_traits_open1_char16_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string_view < u16 > > () - 16usize] ;
    ["Align of template specialization: std_basic_string_view_open0_char16_t_std_char_traits_open1_char16_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string_view < u16 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_view_open0_char32_t_std_char_traits_open1_char32_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string_view < u32 > > () - 16usize] ;
    ["Align of template specialization: std_basic_string_view_open0_char32_t_std_char_traits_open1_char32_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string_view < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_std_basic_string_view_open1_char32_t_std_char_traits_open2_char32_t_close2_close1_close0"] [:: std :: mem :: size_of :: < std_hash > () - 1usize] ;
    ["Align of template specialization: std_hash_open0_std_basic_string_view_open1_char32_t_std_char_traits_open2_char32_t_close2_close1_close0"] [:: std :: mem :: align_of :: < std_hash > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_view_open0_char32_t_std_char_traits_open1_char32_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string_view < u32 > > () - 16usize] ;
    ["Align of template specialization: std_basic_string_view_open0_char32_t_std_char_traits_open1_char32_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string_view < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_istream_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_istream < :: std :: os :: raw :: c_char > > () - 280usize] ;
    ["Align of template specialization: std_basic_istream_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_istream < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_istream_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_istream < :: std :: os :: raw :: c_char > > () - 280usize] ;
    ["Align of template specialization: std_basic_istream_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_istream < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_istream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_istream < u32 > > () - 280usize] ;
    ["Align of template specialization: std_basic_istream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_istream < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < u32 > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_istream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_istream < u32 > > () - 280usize] ;
    ["Align of template specialization: std_basic_istream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_istream < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0"] [:: std :: mem :: size_of :: < std_hash > () - 1usize] ;
    ["Align of template specialization: std_hash_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0"] [:: std :: mem :: align_of :: < std_hash > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < u32 > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_std_basic_string_open1_wchar_t_std_char_traits_open2_wchar_t_close2_std_allocator_open2_wchar_t_close2_close1_close0"] [:: std :: mem :: size_of :: < std_hash > () - 1usize] ;
    ["Align of template specialization: std_hash_open0_std_basic_string_open1_wchar_t_std_char_traits_open2_wchar_t_close2_std_allocator_open2_wchar_t_close2_close1_close0"] [:: std :: mem :: align_of :: < std_hash > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < u32 > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char16_t_std_char_traits_open1_char16_t_close1_std_allocator_open1_char16_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < u16 > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_char16_t_std_char_traits_open1_char16_t_close1_std_allocator_open1_char16_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < u16 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char16_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char16_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_std_basic_string_open1_char16_t_std_char_traits_open2_char16_t_close2_std_allocator_open2_char16_t_close2_close1_close0"] [:: std :: mem :: size_of :: < std_hash > () - 1usize] ;
    ["Align of template specialization: std_hash_open0_std_basic_string_open1_char16_t_std_char_traits_open2_char16_t_close2_std_allocator_open2_char16_t_close2_close1_close0"] [:: std :: mem :: align_of :: < std_hash > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char16_t_std_char_traits_open1_char16_t_close1_std_allocator_open1_char16_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < u16 > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_char16_t_std_char_traits_open1_char16_t_close1_std_allocator_open1_char16_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < u16 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char16_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char16_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char32_t_std_char_traits_open1_char32_t_close1_std_allocator_open1_char32_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < u32 > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_char32_t_std_char_traits_open1_char32_t_close1_std_allocator_open1_char32_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char32_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char32_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_std_basic_string_open1_char32_t_std_char_traits_open2_char32_t_close2_std_allocator_open2_char32_t_close2_close1_close0"] [:: std :: mem :: size_of :: < std_hash > () - 1usize] ;
    ["Align of template specialization: std_hash_open0_std_basic_string_open1_char32_t_std_char_traits_open2_char32_t_close2_std_allocator_open2_char32_t_close2_close1_close0"] [:: std :: mem :: align_of :: < std_hash > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char32_t_std_char_traits_open1_char32_t_close1_std_allocator_open1_char32_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < u32 > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_char32_t_std_char_traits_open1_char32_t_close1_std_allocator_open1_char32_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char32_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char32_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
pub type size_type = size_type;
pub type size_type = usize;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_iterator_open0_std_random_access_iterator_tag_bool__long_ptr_bool_ref_bool_close0"] [:: std :: mem :: size_of :: < std_iterator > () - 1usize] ;
    ["Align of template specialization: std_iterator_open0_std_random_access_iterator_tag_bool__long_ptr_bool_ref_bool_close0"] [:: std :: mem :: align_of :: < std_iterator > () - 1usize] ;
};
pub type iterator = std__Bit_iterator;
pub type size_type = usize;
pub type iterator = std__Bit_iterator;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_streambuf_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_streambuf < :: std :: os :: raw :: c_char > > () - 64usize] ;
    ["Align of template specialization: std_basic_streambuf_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_streambuf < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_streambuf_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_streambuf < :: std :: os :: raw :: c_char > > () - 64usize] ;
    ["Align of template specialization: std_basic_streambuf_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_streambuf < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_streambuf_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_streambuf < u32 > > () - 64usize] ;
    ["Align of template specialization: std_basic_streambuf_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_streambuf < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_streambuf_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_streambuf < u32 > > () - 64usize] ;
    ["Align of template specialization: std_basic_streambuf_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_streambuf < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0"] [:: std :: mem :: size_of :: < std_iterator > () - 1usize] ;
    ["Align of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0"] [:: std :: mem :: align_of :: < std_iterator > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
pub type char_type = ::std::os::raw::c_char;
pub type int_type = int_type;
pub type int_type = ::std::os::raw::c_int;
pub type char_type = u32;
pub type int_type = int_type;
pub type int_type = ::std::os::raw::c_uint;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_llama_token_std_allocator_open1_int_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_llama_token_std_allocator_open1_int_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0"] [:: std :: mem :: size_of :: < std_allocator > () - 1usize] ;
    ["Align of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0"] [:: std :: mem :: align_of :: < std_allocator > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_common_sampler_type_std_allocator_open1_common_sampler_type_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_common_sampler_type_std_allocator_open1_common_sampler_type_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_common_sampler_type_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_common_sampler_type_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_common_grammar_trigger_std_allocator_open1_common_grammar_trigger_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_common_grammar_trigger_std_allocator_open1_common_grammar_trigger_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_common_grammar_trigger_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_common_grammar_trigger_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_set_open0_llama_token_std_less_open1_int_close1_std_allocator_open1_int_close1_close0"] [:: std :: mem :: size_of :: < std_set > () - 48usize] ;
    ["Align of template specialization: std_set_open0_llama_token_std_less_open1_int_close1_std_allocator_open1_int_close1_close0"] [:: std :: mem :: align_of :: < std_set > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_less_open0_int_close0"]
        [::std::mem::size_of::<std_less>() - 1usize];
    ["Align of template specialization: std_less_open0_int_close0"]
        [::std::mem::align_of::<std_less>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_llama_logit_bias_std_allocator_open1_llama_logit_bias_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_llama_logit_bias_std_allocator_open1_llama_logit_bias_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_llama_logit_bias_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_llama_logit_bias_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_ggml_backend_dev_t_std_allocator_open1_ptr_ggml_backend_device_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_ggml_backend_dev_t_std_allocator_open1_ptr_ggml_backend_device_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_ptr_ggml_backend_device_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_ptr_ggml_backend_device_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_ggml_backend_dev_t_std_allocator_open1_ptr_ggml_backend_device_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_ggml_backend_dev_t_std_allocator_open1_ptr_ggml_backend_device_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_ptr_ggml_backend_device_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_ptr_ggml_backend_device_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0"] [:: std :: mem :: size_of :: < std_allocator > () - 1usize] ;
    ["Align of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0"] [:: std :: mem :: align_of :: < std_allocator > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0"] [:: std :: mem :: size_of :: < std_allocator > () - 1usize] ;
    ["Align of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0"] [:: std :: mem :: align_of :: < std_allocator > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_llama_model_kv_override_std_allocator_open1_llama_model_kv_override_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_llama_model_kv_override_std_allocator_open1_llama_model_kv_override_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_llama_model_kv_override_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_llama_model_kv_override_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_llama_model_tensor_buft_override_std_allocator_open1_llama_model_tensor_buft_override_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_llama_model_tensor_buft_override_std_allocator_open1_llama_model_tensor_buft_override_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_llama_model_tensor_buft_override_close0"] [:: std :: mem :: size_of :: < std_allocator > () - 1usize] ;
    ["Align of template specialization: std_allocator_open0_llama_model_tensor_buft_override_close0"] [:: std :: mem :: align_of :: < std_allocator > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_common_adapter_lora_info_std_allocator_open1_common_adapter_lora_info_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_common_adapter_lora_info_std_allocator_open1_common_adapter_lora_info_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_common_adapter_lora_info_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_common_adapter_lora_info_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_common_control_vector_load_info_std_allocator_open1_common_control_vector_load_info_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_common_control_vector_load_info_std_allocator_open1_common_control_vector_load_info_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_common_control_vector_load_info_close0"] [:: std :: mem :: size_of :: < std_allocator > () - 1usize] ;
    ["Align of template specialization: std_allocator_open0_common_control_vector_load_info_close0"] [:: std :: mem :: align_of :: < std_allocator > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0"] [:: std :: mem :: size_of :: < std_allocator > () - 1usize] ;
    ["Align of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0"] [:: std :: mem :: align_of :: < std_allocator > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0"] [:: std :: mem :: size_of :: < std_allocator > () - 1usize] ;
    ["Align of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0"] [:: std :: mem :: align_of :: < std_allocator > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_int32_t_std_allocator_open1_int_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_int32_t_std_allocator_open1_int_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_int32_t_std_allocator_open1_int_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_int32_t_std_allocator_open1_int_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_int32_t_std_allocator_open1_int_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_int32_t_std_allocator_open1_int_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0"] [:: std :: mem :: size_of :: < std_allocator > () - 1usize] ;
    ["Align of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0"] [:: std :: mem :: align_of :: < std_allocator > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0"] [:: std :: mem :: size_of :: < std_allocator > () - 1usize] ;
    ["Align of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0"] [:: std :: mem :: align_of :: < std_allocator > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0"] [:: std :: mem :: size_of :: < std_allocator > () - 1usize] ;
    ["Align of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0"] [:: std :: mem :: align_of :: < std_allocator > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0"] [:: std :: mem :: size_of :: < std_allocator > () - 1usize] ;
    ["Align of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0"] [:: std :: mem :: align_of :: < std_allocator > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_llama_model_kv_override_std_allocator_open1_llama_model_kv_override_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_llama_model_kv_override_std_allocator_open1_llama_model_kv_override_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_llama_model_kv_override_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_llama_model_kv_override_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_llama_token_std_allocator_open1_int_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_llama_token_std_allocator_open1_int_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_llama_adapter_lora_ptr_std_allocator_open1_std_unique_ptr_open2_llama_adapter_lora_llama_adapter_lora_deleter_close2_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_llama_adapter_lora_ptr_std_allocator_open1_std_unique_ptr_open2_llama_adapter_lora_llama_adapter_lora_deleter_close2_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_std_unique_ptr_open1_llama_adapter_lora_llama_adapter_lora_deleter_close1_close0"] [:: std :: mem :: size_of :: < std_allocator > () - 1usize] ;
    ["Align of template specialization: std_allocator_open0_std_unique_ptr_open1_llama_adapter_lora_llama_adapter_lora_deleter_close1_close0"] [:: std :: mem :: align_of :: < std_allocator > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_common_adapter_lora_info_std_allocator_open1_common_adapter_lora_info_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_common_adapter_lora_info_std_allocator_open1_common_adapter_lora_info_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_common_adapter_lora_info_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_common_adapter_lora_info_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_llama_seq_id_std_allocator_open1_int_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_llama_seq_id_std_allocator_open1_int_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_llama_token_std_allocator_open1_int_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_llama_token_std_allocator_open1_int_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_llama_token_std_allocator_open1_int_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_llama_token_std_allocator_open1_int_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_llama_token_std_allocator_open1_int_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_llama_token_std_allocator_open1_int_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_llama_token_std_allocator_open1_int_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_llama_token_std_allocator_open1_int_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_common_control_vector_load_info_std_allocator_open1_common_control_vector_load_info_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_common_control_vector_load_info_std_allocator_open1_common_control_vector_load_info_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_common_control_vector_load_info_close0"] [:: std :: mem :: size_of :: < std_allocator > () - 1usize] ;
    ["Align of template specialization: std_allocator_open0_common_control_vector_load_info_close0"] [:: std :: mem :: align_of :: < std_allocator > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_set_open0_llama_example_std_less_open1_llama_example_close1_std_allocator_open1_llama_example_close1_close0"] [:: std :: mem :: size_of :: < std_set > () - 48usize] ;
    ["Align of template specialization: std_set_open0_llama_example_std_less_open1_llama_example_close1_std_allocator_open1_llama_example_close1_close0"] [:: std :: mem :: align_of :: < std_set > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_less_open0_llama_example_close0"]
        [::std::mem::size_of::<std_less>() - 1usize];
    ["Align of template specialization: std_less_open0_llama_example_close0"]
        [::std::mem::align_of::<std_less>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_llama_example_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_llama_example_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_set_open0_llama_example_std_less_open1_llama_example_close1_std_allocator_open1_llama_example_close1_close0"] [:: std :: mem :: size_of :: < std_set > () - 48usize] ;
    ["Align of template specialization: std_set_open0_llama_example_std_less_open1_llama_example_close1_std_allocator_open1_llama_example_close1_close0"] [:: std :: mem :: align_of :: < std_set > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_less_open0_llama_example_close0"]
        [::std::mem::size_of::<std_less>() - 1usize];
    ["Align of template specialization: std_less_open0_llama_example_close0"]
        [::std::mem::align_of::<std_less>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_llama_example_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_llama_example_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_ptr_const_char_std_allocator_open1_ptr_const_char_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_ptr_const_char_std_allocator_open1_ptr_const_char_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_ptr_const_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_ptr_const_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_initializer_list_open0_ptr_const_char_close0"]
        [::std::mem::size_of::<std_initializer_list<*const ::std::os::raw::c_char>>() - 16usize];
    ["Align of template specialization: std_initializer_list_open0_ptr_const_char_close0"]
        [::std::mem::align_of::<std_initializer_list<*const ::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_initializer_list_open0_ptr_const_char_close0"]
        [::std::mem::size_of::<std_initializer_list<*const ::std::os::raw::c_char>>() - 16usize];
    ["Align of template specialization: std_initializer_list_open0_ptr_const_char_close0"]
        [::std::mem::align_of::<std_initializer_list<*const ::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_initializer_list_open0_ptr_const_char_close0"]
        [::std::mem::size_of::<std_initializer_list<*const ::std::os::raw::c_char>>() - 16usize];
    ["Align of template specialization: std_initializer_list_open0_ptr_const_char_close0"]
        [::std::mem::align_of::<std_initializer_list<*const ::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_initializer_list_open0_ptr_const_char_close0"]
        [::std::mem::size_of::<std_initializer_list<*const ::std::os::raw::c_char>>() - 16usize];
    ["Align of template specialization: std_initializer_list_open0_ptr_const_char_close0"]
        [::std::mem::align_of::<std_initializer_list<*const ::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_initializer_list_open0_llama_example_close0"]
        [::std::mem::size_of::<std_initializer_list<llama_example>>() - 16usize];
    ["Align of template specialization: std_initializer_list_open0_llama_example_close0"]
        [::std::mem::align_of::<std_initializer_list<llama_example>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_initializer_list_open0_llama_example_close0"]
        [::std::mem::size_of::<std_initializer_list<llama_example>>() - 16usize];
    ["Align of template specialization: std_initializer_list_open0_llama_example_close0"]
        [::std::mem::align_of::<std_initializer_list<llama_example>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_common_arg_std_allocator_open1_common_arg_close1_close0"] [:: std :: mem :: size_of :: < std_vector > () - 24usize] ;
    ["Align of template specialization: std_vector_open0_common_arg_std_allocator_open1_common_arg_close1_close0"] [:: std :: mem :: align_of :: < std_vector > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_common_arg_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_common_arg_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
